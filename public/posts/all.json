{"version":"https://jsonfeed-extension.yammer.jp/v0.1.0","version_description":"a subset of json feed 1.1. it is optional that items.content_text or items.content_html","title":"Posts on memo.yammer.jp (full text)","home_page_url":"https://memo.yammer.jp","feed_url":"https://memo.yammer.jp/posts/all.json","description":"Recent content in Posts on memo.yammer.jp","generator":"memo.yammer.jp with Next.js (https://github.com/yammerjp/memo.yammer.jp)","language":"ja","copyright":"©2021 Keisuke Nakayama","lastBuildDate":"Sun, 06 Jul 2025 00:25:20 GMT","items":[{"id":"https://memo.yammer.jp/posts/mail-sender-authentication","url":"https://memo.yammer.jp/posts/mail-sender-authentication","title":"メール送信者認証技術の整理","summary":"SPF, DKIM, DMARCをはじめとするメール送信者認証技術のトピックが時々必要になるので、自分用のメモとして書き出しておきます。覚えていないところはRFCを見たりしていますが、記憶の中を書き出しているだけので、間違っているところがあったらご指摘ください。 メール送信者認証技術はなぜ必要なのか？ SMTPで送信元を表すのは、IPアドレス、エンベロープFrom、ヘッダFrom メールは、SMTPというプロトコル上でやり取りされます。この時、送信者側がどのホスト名からの接続か宣言されることとなっており、これがいわゆるエンベロープFromと呼ばれます。SMTPプロトコル上ではメールの内容(メー","content_html":"<p>SPF, DKIM, DMARCをはじめとするメール送信者認証技術のトピックが時々必要になるので、自分用のメモとして書き出しておきます。覚えていないところはRFCを見たりしていますが、記憶の中を書き出しているだけので、間違っているところがあったらご指摘ください。</p>\n<h2>メール送信者認証技術はなぜ必要なのか？</h2>\n<h3>SMTPで送信元を表すのは、IPアドレス、エンベロープFrom、ヘッダFrom</h3>\n<p>メールは、SMTPというプロトコル上でやり取りされます。この時、送信者側がどのホスト名からの接続か宣言されることとなっており、これがいわゆるエンベロープFromと呼ばれます。SMTPプロトコル上ではメールの内容(メールヘッダ+メールボディ)を合わせてテキストとして送信し、メールヘッダの中には送信者を表すFromのヘッダ(いわゆるヘッダFrom) が書かれています。</p>\n<h3>SMTP上でエンベロープFromとヘッダFromを検証する仕組みはない。どのメールを受け取るかは受信者が決める</h3>\n<p>SMTPのプロトコル上は、エンベロープFromとヘッダFromは特に縛りがなく、何を書いても規格上は問題ないメールとして取り扱われます。これが問題で、メールは送信者が好きに自分の身元を名乗りたい放題のプロトコル<sup><a href=\"#user-content-fn-smtp_supported_from\" id=\"user-content-fnref-smtp_supported_from\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>になっており、送信元のアドレス (=ドメイン) が本当にその人の所有しているものかを確認する術がありません。このような性質から、スパムメールと呼ばれる正当な送信元ではないメールも多数流通し、それに対応するために、インターネット上のメールというエコシステムでは、基本的に受信者が受信するかどうかを決めることでコントロールしている、というふうな構図となっています。</p>\n<h3>大手の受信者が公開しているポリシーに、送信側は実質的に従う必要がある<sup><a href=\"#user-content-fn-mail_provider_policy\" id=\"user-content-fnref-mail_provider_policy\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></h3>\n<p>特に影響力のある大手の受信者(GmailやMicrosoft(outlook.com)、iCloud等)に受信してもらえるよう、送信者側がその基準を満たすようなメールを送る必要性が、昨今高まっています。明確に方針として示されたのが、2024年から適用されている、いわゆる<a href=\"https://support.google.com/a/answer/81126?hl=ja\">Gmailガイドライン</a>です。Gmailに向けてメールを送る全ての送信者に一定の基準を設け、また大量送信者には、より厳しい基準を設け、満たさないメールは受信拒否すると宣言されました。後述する、メール送信者認証技術 (DMARC=pass) への準拠が求められるようになったことで、メールの送信者、特に大量送信者にはその対応が求められました。また、現在や今後も、大手受信者のポリシー変更があれば、追従する必要があります。</p>\n<h2>個々のメール送信者認証技術</h2>\n<p>メールの仕組みに話を戻しましょう。</p>\n<p>受信者側が、そのメールに書かれている送信元が正当かどうかを確認する等のための仕組みとして、メール送信者認証技術があります。これが SPF, DKIM, DMARC (そしてBIMI！) などの各種規格です。</p>\n<h3>DNSレコードに書かれていることは、ドメインの所有者の意思で書かれているはず</h3>\n<p>どのプロトコルも基本的に、DNSを信頼の元としています。ドメインの正当な所有者だけがDNSにレコードを登録でき、世界にその情報が正しいと伝えることができるはず、という点が起点となっています。DNSのTXTレコードに書いてあるを信頼し、受信したメールがそれと一致するかを、受信者側で検証することで、メール自体も信頼できるかを判断できるようになっています。</p>\n<h3>SPF (passならば、エンベロープFromのドメイン所有者が認めたIPアドレスのサーバから送られたとわかる)</h3>\n<p>SPFは、次のようなDNSレコードを公開するものです。ドメインの所有者が、メールを送出するサーバのIPアドレスをTXTレコードとして宣言することで、それ以外のメールサーバから送出された場合は不正であると判断できるようになります。SMTPはTCP/IP上で成立していますから、送信元のIPアドレスは通信時にわかるので、それと比較して問題ないかを確認できます。</p>\n<pre><code>example.com. IN TXT \"v=spf1 ip4:192.0.2.100 ~all\"\n</code></pre>\n<p>ただし、ここで受信者が引くドメインは、エンベロープFromのドメインです。ヘッダFromに書かれた内容は検証されません。一般的なメールクライアントで送信元メールアドレスとして表示されているのはヘッダFromですが、全く違っていても検証されず、SPFはpassしたと判断されます。</p>\n<h3>DKIM (passならば、署名したドメインの所有者がそのメール内容を送信したとわかる)</h3>\n<p>DKIMは、次のようなDNSレコードを公開するものです。ドメインの所有者が、公開鍵を公開します。メール送出時にドメインの所有者(か権限を委譲された者。以下略します)しか知らない秘密鍵でメールの内容に署名することで、署名を検証すれば、ドメインの所有者の送出したメールの内容(ヘッダやボディ) が正しいことを検証できます。</p>\n<pre><code>default._domainkey.example.com. IN TXT \"v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD3JbLw...（公開鍵の文字列）...AQAB\"\n</code></pre>\n<p>ただし、ここで署名したドメインは、ヘッダFromやエンベロープFromでなくても良いことになっています。</p>\n<h3>DMARC</h3>\n<p>DMARCは、次のようなDNSレコードを公開するものです。メールの受信者に対して、受信したメールの取り扱い方法を宣言するものです。SPFやDKIMをどの程度厳格に検証すべきか、また検証失敗時にその旨をレポートする先を示しています。</p>\n<pre><code>_dmarc.example.com. IN TXT \"v=DMARC1; p=quarantine; rua=mailto:dmarc-report@example.com; ruf=mailto:dmarc-forensic@example.com; fo=1; adkim=r; aspf=r\"\n</code></pre>\n<p>DMARCには、SPFやDKIMを組み合わせて、メール送信元の確からしさを判定する基準の一つである「アライメント」を定めています。また、DMARCの基準を満たしていない場合に、それをレポートする仕組みがあります。順に見ていきましょう。</p>\n<h4>アライメント</h4>\n<p>SPFアライメントはエンベロープFromとヘッダFromが一致している時に、満たしていることとなっています。SPFがpassしている状況下では、送信者として表示されるヘッダFromのドメイン所有者が、そのメールが送出されたメールサーバ(IP)を信頼しているので、その点で確からしいメールだと言えるでしょう。</p>\n<iframe class=\"speakerdeck-iframe\" frameborder=\"0\" src=\"https://speakerdeck.com/player/e47be4bcb39e4c2abdc4ea0ad2588cf4?slide=49\" title=\"実録_マルチテナント環境でのGmailガイドライン対応\" allowfullscreen=\"true\" style=\"border: 0px; background: padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;\" data-ratio=\"1.7777777777777777\"></iframe>\n<p>DKIMアライメントは署名ドメインとヘッダFromのドメインが一致している時に満たしていることとなっています。DKIMがpassしている状況下では、これを満たすメールは送信者として表示されるヘッダFromのドメイン所有者がメール本文に署名していることから、その点で確からしいメールだと言えるでしょう。</p>\n<iframe class=\"speakerdeck-iframe\" frameborder=\"0\" src=\"https://speakerdeck.com/player/e47be4bcb39e4c2abdc4ea0ad2588cf4?slide=51\" title=\"実録_マルチテナント環境でのGmailガイドライン対応\" allowfullscreen=\"true\" style=\"border: 0px; background: padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;\" data-ratio=\"1.7777777777777777\"></iframe>\n<p>なお、SPFまたはDKIMのいずれかにpassし、かつSPFアライメントもしくはDKIMアライメントのいずれかをpassしているとき、DMARCにpassしたと判定されます</p>\n<h4>ポリシー</h4>\n<p>DMARCにpassしていないメールがどれくらい流通しているかを、ドメインの所有者が知るために、ポリシーを宣言することとなっています。 <code>none</code> , <code>quarantine</code> , <code>reject</code>  があり、各受信者に、そのポリシーに従ってメールを取り扱うことや、 DMARCをpassしないメールがあったときに、その内容をレポートするメールを送信してほしい旨を宣言します。</p>\n<p>送信者としてのポリシーであり、仕組み上受信者が従わなければならないような制約はないですが、成り立ちからして受信者の事情からできてきたものであるからこのようになっていると理解しています。</p>\n<h3>BIMI</h3>\n<p>BIMIは、次のようなDNSレコードを公開するものです。メールの受信者に対して、送信元のブランドロゴを宣言します。</p>\n<pre><code>default._bimi.example.com. IN TXT \"v=BIMI1; l=https://example.com/logo.svg; a=https://example.com/bimi.pem\"\n</code></pre>\n<p>BIMIは、DMARCのポリシーが <code>quarantine</code> 以上であり、かつロゴが VMC (Verified Mark Certificate) と呼ばれる証明書で署名されている必要があります。VMCでの署名を受けるには、各国の機関による商標等の知的財産権の登録が必要となっています。</p>\n<p>BIMIがサポートされる環境で、確認されたメールには、送信元を表すロゴが、メールクライアントに表示されます。</p>\n<hr>\n<p>というわけで、メールを専門に取り扱わないWebアプリケーションエンジニアにとっては、HTTP以外のプロトコルのことを考える時間は珍しいでしょうし、SMTPとそれをもとに構成された多層のメールエコシステムに関する理解は、忘れてしまうと面倒そうなのでメモとして書き出しました。</p>\n<h2>メール技術のキャッチアップ</h2>\n<p>私が2024年や2025年にメールに関する学びを得た書籍とWebサイトを紹介して終わります</p>\n<ul>\n<li><a href=\"https://www.shoeisha.co.jp/book/detail/9784798183930\">実務で使える メール技術の教科書</a> ... 2025年現在で、メールに関連する技術を、その分野に詳しくないソフトウェア開発者がゼロから知ろうと思った時に事前知識なく読み始められる丁寧な書籍</li>\n<li><a href=\"https://github.com/azumakuniyuki/feb-2024-no-auth-no-entry\">azumakuniyuki/feb-2024-no-auth-no-entry</a> ... Gmailガイドラインをはじめとする、2024年以降の大手メール受信者プロバイダの公開するポリシーを時系列で記録したリポジトリ。過去に公開されていた内容との差分や、特定の事業者に閉じない大手メール受信プロバイダの動向に気づくことができる</li>\n<li><a href=\"https://speakerdeck.com/azumakuniyuki/gu-iji-shu-nituite-smtpxian-dai-shi-qing-tumamishi-i\">古い技術について SMTP現代事情つまみ食い</a> ... SPF/DKIM/DMARCの関係性を説明してくれている</li>\n<li><a href=\"https://workaround.org\">ISPmail GUIDE</a> ... Postfixの設定や運用として2025年に求められるものを最小範囲で実現し、手元でメールサーバを動かしてみることができる手順を解説したドキュメント。Postfixに関する書籍や入門書は最近見かけておらず、このリポジトリを読み進めながら触るのが結構良さそうという感触を得た。</li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7208\">RFC7208: Sender Policy Framework (SPF)</a> ... SPFのRFC</li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc6376\">RFC6376: DomainKeys Identified Mail (DKIM) Signatures</a> ... DKIMのRFC</li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc7489\">RFC7489: Domain-based Message Authentication, Reporting, and Conformance (DMARC)</a> ... DMARCのRFC</li>\n<li><a href=\"https://datatracker.ietf.org/doc/draft-brand-indicators-for-message-identification/\">Internet Draft: Brand Indicators for Message Identification (BIMI)</a> ... BIMIはまだRFCになっていない</li>\n<li><a href=\"https://twilio-cms-prod.s3.amazonaws.com/documents/Generic_IP_Warmup_Schedule.pdf\">Generic IP Warm Up Schedule</a> ... (メール送信者認証技術と直接関連ないが)新しいIPv4アドレスを使ってメールを送るにあたっての具体的なIPウォームアップの指標をSendGridが示してくれている表</li>\n</ul>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-smtp_supported_from\">\n<p>ここでは2025年現在の視点から、現時点でわかりやすく理解するために「名乗りたい放題のプロトコル」と表現していますが、実際にはインターネット技術の発展とともに、現在のメールエコシステムを構成するパーツが一つずつ構成されていったのであって、SMTP自体は、シンプルな文書通信のためのプロトコルであるでしょうし、その成り立ちや技術に対する対する批判等の意味合いは持っていません。ただ、パーツが色々あるので、新米Web技術者が今からキャッチアップするのは、普段メールシステムに馴染みがないとなかなか大変だという感想を持っています。 <a href=\"#user-content-fnref-smtp_supported_from\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-mail_provider_policy\">\n<p>ここでは送信者の視点で「従う必要がある」などと書いていますが、実際には受信側からするとそのような方法でしかメールの確からしさを確認したり、大量受信による負荷を抑制することができませんし、メール全体のエコシステムとしてそのようなポリシーの公開や適用は必要である、と前向きに捉えています。 <a href=\"#user-content-fnref-mail_provider_policy\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2025-07-05T03:56:14+09:00","message":"Post:「メール送信者認証技術の整理」\n","hash":"cd36cbe4802b5aa7cab8275bb314444d24a12b3b"}],"date_published":"2025-07-05T03:52:00+09:00","tags":["mail","smtp","spf","dkim","dmarc","bimi","email-authentication","dns"]},{"id":"https://memo.yammer.jp/posts/gmo-developers-day-2024","url":"https://memo.yammer.jp/posts/gmo-developers-day-2024","title":"GMO Developers Day 2024に登壇した","summary":"昨日、11/29, 30に開催されたGMO Developers Day 2024の「EC決済 開発責任者対談」というセッションに登壇した。 Developers Dayの登壇は昨年に続き2回目で、前回に引き続きGMOグループとして力入れてるなというのを感じる。 今年も、去年私が登壇した枠と似たようなパネルディスカッションに近い形式で、 @inamoly によるモデレータ+3人での対談を行った。事前の打ち合わせで何を話すか多少擦り合わせていたが、そのときに出てない話も本番では話していたり、対談の臨場感が現れた発表になったと思う。 対談形式の発表は特定のメッセージを強く伝えるようなものではないが","content_html":"<p>昨日、11/29, 30に開催されたGMO Developers Day 2024の「EC決済 開発責任者対談」というセッションに登壇した。</p>\n<p>Developers Dayの登壇は昨年に続き2回目で、前回に引き続きGMOグループとして力入れてるなというのを感じる。</p>\n<p>今年も、去年私が登壇した枠と似たようなパネルディスカッションに近い形式で、 <a href=\"https://x.com/inamoly\">@inamoly</a> によるモデレータ+3人での対談を行った。事前の打ち合わせで何を話すか多少擦り合わせていたが、そのときに出てない話も本番では話していたり、対談の臨場感が現れた発表になったと思う。</p>\n<p>対談形式の発表は特定のメッセージを強く伝えるようなものではないが、当日聴いていただいていた参加者の層はけっこうバラエティ豊かだったようなので、日頃考えていることや実践していることがどのようなものであるか、等身大で知ってもらうという意味で、会場の雰囲気にマッチした発表になったのではないだろうか。</p>\n<p>今年はあまり緊張せずに望めたのだけど、発表がおわってから「他の人の2倍の時間2倍の速度で話していたので情報量4倍」「身振り手振りで全身使っているのがいつもどおり」などのお声をいただき、 (それはそれでよかったのかもしれないが) もうちょっと緊張するぐらいがよかったかもしれない。</p>\n<p>昨年もそうだったのだけど、このイベントはグループ横断でやるので対談する我々も打ち合わせで初めて出会うといったところがあり、近いセグメントの他の会社でどのようにやっているのかを聞けて私も新鮮な気持ちで学びになった。</p>\n<p>聴いていただいた方ありがとうございました。</p>\n<p>アーカイブはこちら: <a href=\"https://m.youtube.com/live/WZVXaUOFIVA?t=16200s\">GMO Developers Day 2024【Day2 Track A】</a></p>\n<hr>\n<p>この記事は、<a href=\"https://adventar.org/calendars/9991\">GMOペパボ EC Advent Calendar 2024</a>の1日目、そして<a href=\"https://adventar.org/calendars/10317\">GMOペパボ エンジニア Advent Calendar 2024 (🎄会場)</a>の1日目の記事でした。</p>","_history":[{"date":"2024-12-02T00:50:45+09:00","message":"更新: 合計で4人であることが伝わるように\n","hash":"e7b6862c00d59bd40429334e11997610b685f12b"},{"date":"2024-12-02T00:31:55+09:00","message":"Update: 表現を伝えたいものに寄せる\n","hash":"aa0ef5a6e5389fcbe258ae30db33e360a69c2bc0"},{"date":"2024-12-01T23:59:05+09:00","message":"Post「GMO Developers Day 2024に登壇した」\n","hash":"b022bf64cfd067f70009da1f745542d7ac1026bf"}],"date_published":"2024-12-01T23:59:05+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/cto-in-ec-div","url":"https://memo.yammer.jp/posts/cto-in-ec-div","title":"GMOペパボ EC事業部CTOに就任しました","summary":"2024年10月1日付で、GMOペパボ株式会社 EC事業部CTOに就任しました。 事業部CTOとは 事業部CTOは、ペパボのエンジニアリングマネジメントラインのなかで、部門の技術領域の責任者として設けられていたSEL(シニアエンジニアリングリード)1を、2024年2月に再定義2した役職です。 部門ごとに異なる事業を運営するペパボは、事業部門のなかに開発組織を含む様々な職種のパートナーがおり、それぞれ様々なサービスを提供しています。事業部CTOという役職は、技術と技術組織の責任者として部門を成長に導くという点は以前のSELと変わらず、部門をひとつの会社として見立てたときのCTOの果たすべき役割を","content_html":"<p>2024年10月1日付で、GMOペパボ株式会社 EC事業部CTOに就任しました。</p>\n<h2>事業部CTOとは</h2>\n<p>事業部CTOは、ペパボのエンジニアリングマネジメントラインのなかで、部門の技術領域の責任者として設けられていたSEL(シニアエンジニアリングリード)<sup><a href=\"#user-content-fn-ctl\" id=\"user-content-fnref-ctl\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>を、2024年2月に再定義<sup><a href=\"#user-content-fn-minicto\" id=\"user-content-fnref-minicto\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>した役職です。</p>\n<p>部門ごとに異なる事業を運営するペパボは、事業部門のなかに開発組織を含む様々な職種のパートナーがおり、それぞれ様々なサービスを提供しています。事業部CTOという役職は、技術と技術組織の責任者として部門を成長に導くという点は以前のSELと変わらず、部門をひとつの会社として見立てたときのCTOの果たすべき役割を、より強く明確にしたものといえます。</p>\n<p>ところでCTOとはどのようなものでしょうか？これを端的に説明したものとしては、次の文章がわかりやすいでしょう。</p>\n<blockquote>\n<p>CTOとは、その会社が現在の成長段階で必要としている戦略的技術系幹部</p>\n<p>(エンジニアのためのマネジメントキャリアパス p217  - オライリー・ジャパン発行)</p>\n</blockquote>\n<p>これを事業部に当てはめると、いまの事業部の成長段階に求められていることを技術の面からとらえ、長期的な視点で、成果を実現するための策を立案し実行すること、その枠組みが運用された状態をつくることが求められています。</p>\n<h2>やっていき</h2>\n<p>事業部CTOとしての私の仕事は、カラーミーショップをはじめとするEC事業部の事業をより一段と成長させ、ショップオーナー様に喜んでもらい、EC事業部の目標を達成し、そしてECの多様性をひろげること、それを実現するために技術と技術者組織としてできるあらゆる戦略をたて実行すること/それを支援し実現することです。</p>\n<p>既にEC事業部には前任の<a href=\"https://twitter.com/kenchan\">@kenchan</a>を中心に積み上げてきた、システムを支える様々な技術、そして素晴らしいパートナーのみなさんをはじめとする技術者組織がありますが、現状に満足しない私たちには、次なる挑戦が待っています。</p>\n<p>EC事業部を中心にパートナーのみなさんにはこれまで以上に頼ることが増えるでしょうし、皆さんの力を借りて前に進むことになると思います。いままで支えていただき感謝しています。今後ともどうぞよろしくお願いします。</p>\n<p>バーンとやっていくぞ〜！</p>\n<h2>お隣さん</h2>\n<p>同日にホスティング事業部CTOに就任した<a href=\"https://twitter.com/takumakume\">@takumakume</a>のポストはこちら。</p>\n<ul>\n<li><a href=\"https://takumakume.github.io/blog/2024-10-01-hosting-division-cto/\">GMOペパボ株式会社 ホスティング事業部CTOに就任しました</a></li>\n</ul>\n<p>kumeさんはあらゆることをバリバリ進めていて、話していると「負けていられないぞ」という気持ちになります。</p>\n<h2>お誘い</h2>\n<p>ペパボとペパボパートナーの話ばかりしていてきになったあなたにはこちら！いま絶賛採用募集中です。</p>\n<ul>\n<li><a href=\"https://recruit.pepabo.com/\">GMOペパボ株式会社 採用サイト</a></li>\n</ul>\n<p>仕事中の私とのカジュアル面談も、とくに関係ないご飯や飲み会の誘いも歓迎してます！<a href=\"https://twitter.com/yammerjp\">XのDM</a>かなにかで連絡ください。</p>\n<p>また、<a href=\"https://recruit.pepabo.com/features/graduate/\">26卒の新卒採用</a>やってます。私も21卒で新卒で入ったので、ペパボやエンジニアリングマネジメントラインの仕事がきになるという方いたら声をかけてください、お話ししましょう！</p>\n<p>そして！特に大事なこちら！EC事業部としても採用してます。<a href=\"https://open.talentio.com/r/1/c/pepabo/pages/90202?_gl=1*1v1e78l*_ga*Nzk1MjAxMDUuMTcwNTUwNTQ3Ng..*_ga_LER6JRTV8K*MTcyNzcxNDk4NC45LjEuMTcyNzcxNTAwMy4wLjAuMA..#_ga=2.34455265.1798052879.1727713029-79520105.1705505476\">Webアプリケーションエンジニア</a>も<a href=\"https://open.talentio.com/r/1/c/pepabo/pages/90748?_gl=1*jnasu4*_ga*Nzk1MjAxMDUuMTcwNTUwNTQ3Ng..*_ga_LER6JRTV8K*MTcyNzcxNDk4NC45LjEuMTcyNzcxNTEwMC4wLjAuMA..#_ga=2.265542863.1798052879.1727713029-79520105.1705505476\">デザイナー</a>も！今がチャンス！まってます</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-ctl\">\n<p>当初2016年に設定された時はCTL(チーフテクニカルリード)という名前でした。 <a href=\"#user-content-fnref-ctl\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-minicto\">\n<p>ある種CTOに近い役割が求められていることは<a href=\"https://scrapbox.io/kenchan/GMO%E3%83%9A%E3%83%91%E3%83%9CEC%E4%BA%8B%E6%A5%AD%E9%83%A8%E3%81%AE%E3%83%81%E3%83%BC%E3%83%95%E3%83%86%E3%82%AF%E3%83%8B%E3%82%AB%E3%83%AB%E3%83%AA%E3%83%BC%E3%83%89%E3%81%AB%E5%B0%B1%E4%BB%BB%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F\">CTLができたその時から意識されていた</a>わけですが、名前としてそれを表すことで期待と責任を示したことを、ここでは「再定義」と呼んでいます。 <a href=\"#user-content-fnref-minicto\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2024-10-07T11:39:50+09:00","message":"Post: 「GMOペパボ EC事業部の事業部CTOに就任しました」\n","hash":"55962a2a4a0657f141e89352043832829451eecf"}],"date_published":"2024-10-07T11:00:00+09:00","tags":["pepabo"]},{"id":"https://memo.yammer.jp/posts/2024-08-pl-bs-cf-introduction","url":"https://memo.yammer.jp/posts/2024-08-pl-bs-cf-introduction","title":"財務3表一体理解法を読んだ(2024年8月)","summary":"8月に読んだ本のメモが下書きのまま眠っていたので投稿しておく。また当方は会計の専門家ではないので、この感想にツッコミどころがあったらこっそり教えてください。 はじめに 企業における会計のことを少しはわかっていなくてはと思い、友人に薦められた財務3表一体理解法という本を読んだ。 学生時代も入社してからも会計のことを学んでおらず、PL (Profit and Loss Statement / 損益計算書) やBS (Balance Sheet / 貸借対照表)、CF (Cash Flow Statement / キャッシュフロー計算書) というのを名前は知っていても実態は正直わかっていないという状","content_html":"<p>8月に読んだ本のメモが下書きのまま眠っていたので投稿しておく。また当方は会計の専門家ではないので、この感想にツッコミどころがあったらこっそり教えてください。</p>\n<h2>はじめに</h2>\n<p>企業における会計のことを少しはわかっていなくてはと思い、友人に薦められた財務3表一体理解法という本を読んだ。</p>\n<p>学生時代も入社してからも会計のことを学んでおらず、PL (Profit and Loss Statement / 損益計算書) やBS (Balance Sheet / 貸借対照表)、CF (Cash Flow Statement / キャッシュフロー計算書) というのを名前は知っていても実態は正直わかっていないという状態だったが、本を通して全体感を知ることができた。</p>\n<p>知りたいことがまさに書かれていて、一冊目に読む本がこれでよかった。(正確性をとるとおそらく大胆に削っているところがあると本の中で但し書きされているが) PLとは？BSとは？というレベルの会計素人が、まず最初に雰囲気を知るにはとてもよいと思うので、同じ境遇の人がいたらぜひお勧めしたい。</p>\n<h2>印象に残ったこと</h2>\n<h3>前提</h3>\n<p>冒頭に前提として、すべての会社に共通する3つの活動は「お金を集める」「投資する」「利益をあげる」の3つからなるということがかかれている</p>\n<p>これらを数字で表現するのが財務3表であるとして、財務3表の概略的な説明が冒頭になされている。</p>\n<h3>財務3表の関係</h3>\n<p>93ページには、3表がどう関連してどう動くかが示されている。その後、本の中頃では、表題の通り財務3表を一体に理解できるよう、かんたんな仕分けをいくつか、常に財務3表にどう反映され、それらがどう繋がっているのかを示しながら説明が続く。各例をもとにそれぞれの関係を常に意識させながら説明が続くので、全体感を把握しやすい。</p>\n<p>会計を専門にする気が今のところない物としては、全体としてそれらがどういう役割で、ざっくりどういう意味を持っているのかということを知りたく、それが説明されていてとても良かった。</p>\n<p>その流れというのは、ざっくりと次のようなものだ。</p>\n<ul>\n<li>PLによって資産の出入りが表現され、その積み重ねによってBSの利益剰余金が積み上がる</li>\n<li>前年度のBSをもとに今年度のPLをあて、CFをあてたら翌年のBSになる</li>\n</ul>\n<h3>そのほか印象に残ったこと(メモ)</h3>\n<ul>\n<li>前提として、PLとBSの数字は必ずしも現金の動きを表すものではない</li>\n<li>BSのBalanceというのは「残高」という語から来ていると筆者は考えている</li>\n<li>りし ... 借り方と貸し方という表現は、現代におけるそれぞれの言葉の意味に紐づくというよりも、慣習的にそうなっているという側面が強い</li>\n</ul>\n<h3>身近な会計</h3>\n<p>本の中で直接触れられているわけではないが、この本を通して内製ソフトウェア開発をしている事業会社における、ソフトウェア資産計上と原価の違いを知ることができた。<sup><a href=\"#user-content-fn-principle\" id=\"user-content-fnref-principle\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<h2>おわりに</h2>\n<p>PLといわれても学園と言わないように、BSと言われても衛星放送と思わないように、CFといわれてもコンパクトフラッシュと聞き返さないように、この本を起点に会計に関する理解を少しずつ深めていきたい。</p>\n<p>ちなみにこの本はシリーズになっていて、分析編や発展編というのもある。とても良い本だったので早速発展編を買ったのだが、買ってから中を開くと今知るべき内容かは判断がつかなかったので、積んでおいて技術書のあいまに気が向いたら読むことにする。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-principle\">\n<p>友人にこの話を聞いた時に、最初にソフトウェア資産計上の目的 (会計の原理原則として、投資家等にその会社の状況(ここでいえばソフトウェア資産)を正しく伝えるためにある) を教えてくれたことで、より理解が深まった <a href=\"#user-content-fnref-principle\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2024-09-23T00:03:04+09:00","message":"下書きに溜まっていたものを、記事として追加\n","hash":"4d4e5e542e3fdac52c900a62d9dc62dc041631ac"}],"date_published":"2024-09-22T23:44:08+09:00","tags":["本","会計"]},{"id":"https://memo.yammer.jp/posts/tech-conference-2023","url":"https://memo.yammer.jp/posts/tech-conference-2023","title":"私と技術カンファレンス 2023 (雑文)","summary":"技術カンファレンス Advent Calendar 2023、11日目の記事をお送りします。今は2023/12/31な訳ですが、今年中に出し切るということで先ほどから書き始めました。推敲していない雑文をお許しください。 私がカンファレンスにはじめてちゃんと参加したのはPHP Conference Japn 2022であった。これはスポンサー枠で登壇したもので、緊張もしたけれど思ったよりもたくさんの方に聞いていただいて嬉しかった。 社内のレビューによってとても良い発表ができたが、いっぽうで会社の代表なので、会社としての取り組みを紹介するというのが主だった。自分でプロポーザルを書いて出して自分のや","content_html":"<p><a href=\"https://qiita.com/advent-calendar/2023/tech-conference\">技術カンファレンス Advent Calendar 2023</a>、11日目の記事をお送りします。今は2023/12/31な訳ですが、今年中に出し切るということで先ほどから書き始めました。推敲していない雑文をお許しください。</p>\n<hr>\n<p>私がカンファレンスにはじめてちゃんと参加したのはPHP Conference Japn 2022であった。これはスポンサー枠で登壇したもので、緊張もしたけれど思ったよりもたくさんの方に聞いていただいて嬉しかった。</p>\n<p>社内のレビューによってとても良い発表ができたが、いっぽうで会社の代表なので、会社としての取り組みを紹介するというのが主だった。自分でプロポーザルを書いて出して自分のやったことを話したい、という気持ちを強くし、次は自分でプロポーザルを出すことにした。</p>\n<p>PHPerKaigi 2023ではLTのプロポーザルを出して、登壇できたのだけれど、とにかくこのイベントは楽しかったのを覚えている。カンファレンスは自分が普段能動的にキャッチアップするより少し外のことを知る機会になるし、会社に閉じない技術的なトピックについて話したり確認する場にもなるし、出会った人と談笑したりと、他では得られない経験を得られる。</p>\n<p>RubyKaigi 2023は、言語を作る人たちのお祭りというところで、規模もそうだが、ランタイムに関する話題がたくさんあったのが印象的だった。自分は言語を使う人なので全然ついていけない話題ばかりだけれど、学校の授業で習って教科書的なトピックだなと思っていたLALR(1)構文解析の今をしれたり、JITの今をしれたり、とても刺激的だった。Webというのはソフトウェアエンジニアリングの中でも一部の領域を扱っているだけなので、それよりも外の部分に視点を持つことを忘れずにいたい。</p>\n<p>PHPerKaigiのLTに登壇できることになったので、次はもっと長い枠の登壇をということで、PHP Conference Japan 2023にプロポーザルを出してみたけどこれは残念ながら通らず、このイベントは参加者とブース運営の人として参加した。セッションはあまり聞けていないのだけど、カンファレンスに参加し始めて1年くらいということもあって、少しずつ顔を見知った友人や知り合い、以前話したことのある方もいるというので、また話すのが楽しかったりした。(カンファレンスに限らず、今年は都合で行けなかった勉強会にも、来年は行きたい。)</p>\n<p>プロポーザルはその後も継続的に出していて、来年はいまのところ、<a href=\"https://fortee.jp/yapc-hiroshima-2024/proposal/0e545260-61e1-465e-951c-91d6afb7782c\">YAPC::Hiroshima 2024</a>と<a href=\"https://event.shoeisha.jp/devsumi/20240215/session/4834\">Developers Summit 2024</a>で採択いただけて話すことになっている。これに限らず、参加者、発表者、またもしかしたら別の形でも、カンファレンスに参加したり盛り上げたりして、会社に閉じずに、技術者として技術の向上に励んだり、楽しんだり、知見を広げたりしていきたい。</p>\n<hr>\n<p>カンファレンスという場を作ってくださっている皆さんにはいつも感謝しています。自分も少しでもより良い場所になるように、関わっていけたらと思っています。</p>\n<p>それでは、良いお年を。</p>","_history":[{"date":"2023-12-31T23:59:30+09:00","message":"fix: typo\n","hash":"d9a1ee3adc5370003ffd87335fd3e438b0350016"},{"date":"2023-12-31T23:55:43+09:00","message":"Post:「私と技術カンファレンス 2023 (雑文)」\n","hash":"cfd9ffd6df15e4e9c474ab41a29ee653bfc5606d"}],"date_published":"2023-12-31T23:51:18+09:00","tags":["技術カンファレンス"]},{"id":"https://memo.yammer.jp/posts/isucon13","url":"https://memo.yammer.jp/posts/isucon13","title":"ISUCONに初めて参加した(2023年12月)","summary":"(2024/09/22記) 去年のISUCON13に参加したときの記録が下書きのままになっていたので、いまさらですが公開します。 同期の @homirun @yukun と一緒に、ISUCON13に参加しました。 結論はこれ。 https://twitter.com/yammerjp/status/1728340237146112188 最後のスコアは1万点にギリギリ届かず満足できないけれど、何もわからんという感じにはならずやることはたくさん見えていたので、次回(が開催されるならば)ご期待ください！ やったこと 前日まで 夏頃から、毎週1時間くらい業務後にあつまって練習していた。ISUCON本","content_html":"<p>(2024/09/22記) 去年のISUCON13に参加したときの記録が下書きのままになっていたので、いまさらですが公開します。</p>\n<hr>\n<p>同期の @homirun @yukun と一緒に、ISUCON13に参加しました。</p>\n<p>結論はこれ。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">くやしい、おもろい！</p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1728340237146112188?ref_src=twsrc%5Etfw\">November 25, 2023</a></blockquote></p>\n<p>最後のスコアは1万点にギリギリ届かず満足できないけれど、何もわからんという感じにはならずやることはたくさん見えていたので、次回(が開催されるならば)ご期待ください！</p>\n<h2>やったこと</h2>\n<h3>前日まで</h3>\n<p>夏頃から、毎週1時間くらい業務後にあつまって練習していた。<a href=\"https://gihyo.jp/book/2022/978-4-297-12846-3\">ISUCON本</a>を読んで<a href=\"https://github.com/catatsuy/private-isu\">private_isu</a>をいじってみたり、APMを入 れてみたり。1時間でできることは限られているけれど、なんもわからんというところからちょっとずつ全体感をつかむこ とができた。</p>\n<p>前々日には、本番の半分くらいの時間で<a href=\"https://github.com/isucon/isucon12-qualify\">ISUCON12の予選問題</a>を解いた。ベンチマーカーのCLIの引数にIPアドレスを指定できることに気づかずベンチマーカー内の名前解決に困ったり、初手でSQLite -> MySQL移行をしようとし詰まったり、ほぼ 何もできなかった。この経験はおそらく当日に生きていて、この日に先にハマっておいたおかげで、当日無理にロードバランシングに手をつけずに済んだ感がある。</p>\n<p>前々日と当日は、渋谷某ビルの(勝手)サテライト会場で開催した。物理的に集まってホワイトボードに構成を書いたりしながら同期的に進めるのは、結構楽しさがあった。</p>\n<h3>当日午前</h3>\n<p>当日の出来事は以下のような感じ。(全部覚えていないので、自分以外のメンバーがやってくれたことは書かれていないことも結構あると思う)</p>\n<ul>\n<li>初手は競技とアプリケーションのドキュメントの読み合わせ</li>\n<li>次に、Cloud Formationで起動してそのままベンチマークを一回回してもらった</li>\n<li>最初はMySQLの中身をdumpして保全したりした。(これはあんまりいらなかったかも)</li>\n<li>Datadogをさくっと導入してくれたので、一番上に出ていた<code>/api/user/:username/statistics</code>のうち、ランク算出のN+1を直す。<code>GROUP by user_id</code>でSUM/COUNTするクエリにして、一番重そうなところを直したらボトルネックが他に移った。N+1がまだ残っているのを横目に見つつ、呼ばれる回数が少ないエンドポイントなので他を優先するために無視。</li>\n<li>裏ではPowerDNSをやめたりMySQLを分離したりタグ周りのN+1を潰したりしてくれていた</li>\n</ul>\n<h3>当日お昼頃</h3>\n<ul>\n<li>コードをローカルで編集しても試しづらいので、途中で占有できる実行環境が欲しくなり、Cloud Formationをつかって競技外のインスタンスを開発用に用意してもらって、そこで自分だけのVMを手に入れた。</li>\n<li>このあたりでサブウェイにみんなでランチを買いに行った気がする。エビアボカドを頼んだ。フットロングにはしなかった。</li>\n<li>Datadogの合計実行時間の長いクエリを上から眺めて、貼っていった。<code>ORDER BY created_at</code>がいくつかあったけど主キーがAUTO INCREMENTだったから主キーでソートすることにしたりした。</li>\n<li>ここまでのVM分離とN+1とインデックス追加で10000点ちかく行っていた気がする。(合ってるっけ) このあたりまでは結構順調だった気がする</li>\n</ul>\n<h3>当日夕方</h3>\n<ul>\n<li><code>/api/livestream/:livestream_id</code>のN+1がひどいので直そうとしたが、バグらせてしまって元に戻すなど。ベンチマーカーがエラーを吐く状況をつかめなくて、再現できずに結局最後までこの変更を入れることはできず。</li>\n<li>裏では重そうな箇所をメモリでキャッシュする戦略を試してくれていたっぽい。詳しくはみていないがキャッシュのパージタイミングがむずそうっぽかった。</li>\n<li>MySQLのパラメータチューニングや、DNSとアプリのVMの分離で、+1000点弱あがっていそうだった</li>\n</ul>\n<h2>振り返り</h2>\n<h3>よかったこと</h3>\n<p>ローカルに開発環境を用意しようとしなかったのは良かったと思う。しゅっとできないと時間が食われてしまうので。</p>\n<p>チームメンバーが自分ができないことをバンバンしゅっとやってくれてとてもありがたい限りだった。yukunがDatadogをさっと入れて、なんなら競技時間中に全然わかっていない私にDatadogの使い方を説明してくれたり、homirunにミドルウェアまわりを完全に任せっきりにしていたが勝手にいい感じにしてくれていたり。</p>\n<p>Datadogが最強すぎて、スロークエリログもエンドポイントごとのalpでの解析もみずに、Datadogみておけばいいじゃんという感じだった。これのおかげで、次何やればいいかわからんみたいなことにはならずに「明らかにここらへんをやったほうがいい」がわかる状態になれた。</p>\n<h3>改善したいこと</h3>\n<p>設定ファイルやスクリプトなどは持ち合わせていなかったので、viキーバインドでないbashターミナルや、コミットメッセージを入力するときに起動するnanoに困ったりしていた。共有環境にdotfilesをそのまま流し込むと他の人も影響を受けるので、自分だけ効くような初期化スクリプトを用意しておく方がいいかも。</p>\n<p>明らかにN+1なのはすぐにみつかるけど、それをユニットテストもローカルの開発環境もない中、短い時間でコードを一気に書き換えきるみたいなことに慣れておらず、なかなかうまく直せなかった。</p>\n<p>コードを書いてから動作確認までのフィードバックループが長くなりがちなので、たとえばGETの正常系の動作確認などでもいいから、簡単なものはさっと動作確認できる環境を整えておいた方が良かったのかも。変更前と変更後で同じcurlコマンドの結果が一致することを確認する、みたいな。</p>\n<p>後半に取り組んでいた改善は結局入れられなかったので、バグらなそうな変更方針を建てて、走りきれそうな範囲を決めて直す、というふうにしたほうがよかったかもしれない。全部直すのは時間的に絶対無理なようなので。</p>\n<h2>おわりに</h2>\n<p>とてもおもしろい会を開催してくださった運営の皆様に感謝します。一緒に戦ってくれたチームメンバーに感謝します。くやしい、そして楽しかった！</p>","_history":[{"date":"2024-10-07T11:05:44+09:00","message":"最近の話題でもないのでソート順は過去に\n","hash":"f55e09fbff82ca07950fa8a713dfd54355204f9b"},{"date":"2024-09-23T00:03:04+09:00","message":"下書きに溜まっていたものを、記事として追加\n","hash":"4d4e5e542e3fdac52c900a62d9dc62dc041631ac"}],"date_published":"2023-12-08T23:43:12+09:00","tags":["日記","isucon","backend","performance"]},{"id":"https://memo.yammer.jp/posts/team-dynamics-evolving","url":"https://memo.yammer.jp/posts/team-dynamics-evolving","title":"チームが気付き、変化する","summary":"GMOペパボ EC Advent Calenderの2日目は、yammerから、私の所属するチームについての話題を紹介します。 1日目の記事は、@kenchanの『「炭鉱のカナリア」になる』でした。自分が今年、消防車を呼べたとき、呼べなかった時はいつだっただろうか？と思い出しながら読みました。3日目の記事は@tatsumi000の、「開発環境.nvim 2023」です。Vimmerでありながら就業時間中はVSCodeのVimプラグインに甘んじている身として「1週間くらいNeoVimだけで生活してみようかな」と心が揺さぶられるトピックでした。1 私が今いるチームは2023年の年初に発足し、はじま","content_html":"<p><a href=\"https://adventar.org/calendars/8672\">GMOペパボ EC Advent Calender</a>の2日目は、yammerから、私の所属するチームについての話題を紹介します。</p>\n<p>1日目の記事は、<a href=\"https://twitter.com/kenchan\">@kenchan</a>の『<a href=\"https://scrapbox.io/kenchan/%E3%80%8C%E7%82%AD%E9%89%B1%E3%81%AE%E4%B8%AD%E3%81%AE%E3%82%AB%E3%83%8A%E3%83%AA%E3%82%A2%E3%80%8D%E3%81%AB%E3%81%AA%E3%82%8B\">「炭鉱のカナリア」になる</a>』でした。自分が今年、消防車を呼べたとき、呼べなかった時はいつだっただろうか？と思い出しながら読みました。3日目の記事は<a href=\"https://github.com/Tatsumi0000\">@tatsumi000</a>の、「<a href=\"https://blog.aespa.love/development-environment-nvim-2023\">開発環境.nvim 2023</a>」です。Vimmerでありながら就業時間中はVSCodeのVimプラグインに甘んじている身として「1週間くらいNeoVimだけで生活してみようかな」と心が揺さぶられるトピックでした。<sup><a href=\"#user-content-fn-timetravel\" id=\"user-content-fnref-timetravel\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>私が今いるチームは2023年の年初に発足し、はじまってからおよそ1年が経ちました。1年の中ではさまざまなことがありましたが、チームの中で違和感を感じるたびに、問題を発見し、解決策を見出し、一つずつ変化が加わっていったと感じています。今回は、そういった変化の中で一つ、コードレビューに関する変化を紹介します。</p>\n<p>半年ほど前、Pull Requestのコードレビューが溜まりがちだったあるとき、チームに「<a href=\"https://pyama.fun/archives/4414\">良い環境で働く大切さ、良い環境を作り出すためには</a>」という記事が持ち込まれました。\n課題感と、その参照としてこの記事のURLがチームのSlackチャンネルに投稿されたことは、コードレビューに各々が課題間を抱えていることが言語化され、共通認識となるきっかけになりました。課題にチームが気づき、変化した瞬間でした。</p>\n<p>その投稿の後、コードレビューの速度を上げるために、<a href=\"https://fujiharuka.github.io/google-eng-practices-ja/ja/review/reviewer/speed.html\">別のドキュメント</a>なども参考に、いくつかの点が整理されました。</p>\n<ul>\n<li>コードレビューは素早く行われる必要があること。少なくとも1営業日以内に返答すること。</li>\n<li>コードレビューが難しい時には、コメントを返す以外のアクションをとると良いこと。たとえば「コードレビューが難しい状態であることを伝える」「Pull Requestの内容や周辺領域の知識について口頭で説明を受ける」「ペアプログラミングをする」など。</li>\n</ul>\n<p>こういった整理と認識合わせが行われてから、コードレビューレビューの速度が改善し、滞留することが少なくなったと感じています<sup><a href=\"#user-content-fn-me\" id=\"user-content-fnref-me\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>。レビュワーが早く返答するだけでなく、レビューのしやすいPull Requestや開発手順にするといった変化を含めて、半年経った今も、上記に示された速度の基準を満たし、ボトルネックになることが少ない状態を維持できていると考えています。</p>\n<p>この変化の重要な点は、チームのSlackチャンネルに、課題に対する呟きがあったことです。チームが問題に気づいて改善するためには、まず、誰かが違和感を感じ、それを共有することが必要です。コードレビューの他にも、たとえば実際にあった以下のような変化も、誰かが課題を共有したからこそ起こったものです。</p>\n<ul>\n<li>スプリントゴールの定め方を見直す</li>\n<li>見積もり会を定期開催にする</li>\n<li>ふりかえりの進め方を変える</li>\n</ul>\n<p>チームが発足して時間が経ち、成熟してきましたが、これからも、違和感に気づき、仕事の進め方に変化をもたらせるチームでありたい/あってほしいと思っています。今日までのチームはメンバー全員がつくってきたもの<sup><a href=\"#user-content-fn-support\" id=\"user-content-fnref-support\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>で、明日からのチームもメンバー全員が作り出すものです。</p>\n<p>チームのみんな、そして一緒に働いてきたパートナーの皆さん、2023年もお世話になりました。ありがとうございました。来年もどうぞよろしくお願いします。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-timetravel\">\n<p>この記事が2日目のものなのに、3日目の記事の感想がかかれているために、時空が捻じ曲がってしまったのではないか？と心配したそこのあなた。その通りです(嘘です)。話がまとまらずに1日遅れてしまったことをどうかお許しください。 <a href=\"#user-content-fnref-timetravel\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-me\">\n<p>私自身もコードのレビューをする機会が多いので、自分の認識がアップデートされ、レビューの速度に注意を払うようになったという変化も含みます。 <a href=\"#user-content-fnref-me\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-support\">\n<p>もちろん、チーム外からのたくさんのサポートや、コラボレーションによって作られてきたものでもあります。 <a href=\"#user-content-fnref-support\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-12-03T20:27:37+09:00","message":"Update team-dynamics-evolving.md\n","hash":"b6e95f17a31d2d35d3391682a72a2e468f08c151"},{"date":"2023-12-03T20:18:13+09:00","message":"Fix: 表現が微妙だったのでなおす\n","hash":"a3f9c60aefde021a3c87d694d83cf92827d2a2ba"},{"date":"2023-12-03T20:12:58+09:00","message":"Fix: 記事のタイトルが間違っていたので修正する\n","hash":"5b25001b77aea6ac5074f2bca6849cb4b985e559"},{"date":"2023-12-03T19:50:48+09:00","message":"Post: 「チームが気付き、変化する」\n","hash":"9ad4010a7ca0ecee4dce6213304fdd69a241b8d1"}],"date_published":"2023-12-03T19:42:23+09:00","tags":["チームワーク","ソフトウェア開発","コードレビュー"]},{"id":"https://memo.yammer.jp/posts/the-mythical-man-month-essays-on-software-engineering","url":"https://memo.yammer.jp/posts/the-mythical-man-month-essays-on-software-engineering","title":"人月の神話を少し読む","summary":"人月の神話 (Frederick Phillips Brooks, Jr. 著、滝沢徹 訳、牧野祐子 訳、富澤昇 訳、丸善出版 発行)を、いくつかの章は流しながら読んだ。 この本は1975年に初版がでたもので、そろそろ発売から50年になろうとしている。記事の中に書かれている個々の事象は「お、まじか」と驚くような (しかし当時としては妥当であっただろう) How Toも多数ある。50年経つことを前提に置いて、細かい事象にはあまり深入りせずに読むことにしていた。 本の中で語られる「人」と「月」の常に等価交換できないということは、2023年の私の身の回りではありがたいことに当たり前に認識されているよ","content_html":"<p><a href=\"https://www.maruzen-publishing.co.jp/item/?book_no=294733\">人月の神話</a> (Frederick Phillips Brooks, Jr. 著、滝沢徹 訳、牧野祐子 訳、富澤昇 訳、丸善出版 発行)を、いくつかの章は流しながら読んだ。</p>\n<p>この本は1975年に初版がでたもので、そろそろ発売から50年になろうとしている。記事の中に書かれている個々の事象は「お、まじか」と驚くような (しかし当時としては妥当であっただろう) How Toも多数ある。50年経つことを前提に置いて、細かい事象にはあまり深入りせずに読むことにしていた。</p>\n<p>本の中で語られる「人」と「月」の常に等価交換できないということは、2023年の私の身の回りではありがたいことに当たり前に認識されているように思う。当たり前になっていることが、この本の功績なのだろう。</p>\n<p>本の主張の本質はそのあたりだと思うが、それ以外に本を読んだ中で気になったトピックをいくつか記す。</p>\n<blockquote>\n<p>ソフトウェア実体は、どの2つの部分をとっても似ることが無いので (少なくとも文レベルより上では)、大きさの割にはおそらく他のどの人口構造物よりも複雑なものだ。似通っている部分があれば、2つの類似部分を1つ - 外部または内部サブルーチン - にする。この点においてソフトウェアシステムは、重複要素 (部品) が、豊富なコンピュータやビルあるいは自動車などとは全く異なっている p171</p>\n</blockquote>\n<p>ソフトウェア実体は、どの2つの部分をとっても似ることが無いと言い切れるかはわからないが、同一では無いとは言えると思う。ソフトウェア製品やソフトウェアデータの良いところの一つに、複製のコストがほぼかからないという点があるが、これをプログラムの内部構造に置き換えると、同一の操作を繰り返す場合はforや、関数、オブジェクトなどで処理をまとめられてしまう。<sup><a href=\"#user-content-fn-squash-good-and-bad\" id=\"user-content-fnref-squash-good-and-bad\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>建築物や機械製品の場合は同一のパーツというのが多数含まれており、それらの組み合わせで製品が成り立つ。つまり、設計図の中に記述されるコンポーネントは重複がある。プログラムの場合は、重複がないように構造を変えてしまうことができるので、設計図の中のどれも同一のコンポーネントではない。<sup><a href=\"#user-content-fn-realy_q\" id=\"user-content-fnref-realy_q\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<blockquote>\n<p>悲しいかな、自由形式で生成された英語のコマンドを確実に解釈する機能は、コマンドが音声であろうと文字であろうとも、現在の技術を超えてしまっている。p254</p>\n</blockquote>\n<p>これは初版にはなかった章で、おそらく1995年などが文章中の「現在」にあたるが、この記述はいま大きく変わろうとしているように思う。たとえばスマートスピーカーのようなものはそれを一部示していたし、LLMの台頭により、今後のユーザインタフェースは自然言語をベースにして複雑な、プロ向けの操作も実現可能になるかもしれない。</p>\n<blockquote>\n<p>プログラマは自分の担当でないモジュールの内部については、見せられるよりも隠蔽された方が非常に効率が良いのだと言う。p265</p>\n</blockquote>\n<p>これは、例えば一例として低級言語を使う時と高級言語を使う時の違いに近いところがあるだろう。コンピュータのなかで行われている抽象化を自分のプログラムの中でも実装せよ、ということだ。高級言語でメモリアロケーションやメモリ上のデータ配置について考える必要が減るように、OSの提供するシステムコールを使うことでハードウェアの制御を考えなくて良いように、APIを介して外部サービスを使うことで、細かな挙動を気にせずに機能を利用できるように、ということと本質的には一緒に思う。自分が書くプログラムのなかで、どうやると違和感なく理解できる、使いやすいインタフェースになるかを考え、試し、うまい抽象化の方法を見つけるしかない。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-squash-good-and-bad\">\n<p>何をまとめて何をまとめないべきかはここでは考えないこととする <a href=\"#user-content-fnref-squash-good-and-bad\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-realy_q\">\n<p>ここまで書いてみて思ったが、実際のところ何が違うのかは建築物や機械製品に詳しくないのでわからないな、という気持ちになった。ソフトウェアも、サブルーチンの実体は定義が一つだが、その呼び出しは多数の箇所で記述される。非ソフトウェアのコンポーネント自体の設計図が一つで、そのコンポーネントの利用箇所が多数ある、という構造と何が違うのだろうか？わからなくなってきた。 <a href=\"#user-content-fnref-realy_q\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-07-13T14:37:06+09:00","message":"Post:「人月の神話を少し読む」\n","hash":"fde62096ce57158812023f5b6a65e58682f7da18"}],"date_published":"2023-07-13T14:40:00+09:00","tags":["本","ソフトウェアエンジニアリング"]},{"id":"https://memo.yammer.jp/posts/the-managers-path","url":"https://memo.yammer.jp/posts/the-managers-path","title":"エンジニアのためのマネジメントキャリアパスを読む","summary":"書籍「エンジニアのためのマネジメントキャリアパス」(Camille Fournier著、武舎 広幸、武舎 るみ訳、及川 卓也まえがき、オライリージャパン発行)を読んだ。 私は一介のジュニアエンジニアで、今はシニアと呼ばれるような能力を身につけることを目指しており、マネジメントのキャリアを主軸に考えているわけではない。ただ、組織に対する視座や解像度が低いと感じることがあり、将来マネジメントのキャリアを拒んでいるわけではないので、気になってこの本を読んでみた。 この本は、いちメンバーから上級のマネジメント職位に、順を追って話が進む。最初は自分自身が管理される側としてどのようにあるべきか、インターン","content_html":"<p>書籍「<a href=\"https://www.amazon.co.jp/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2%E3%83%91%E3%82%B9-%E2%80%95%E3%83%86%E3%83%83%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%89%E3%81%8B%E3%82%89CTO%E3%81%BE%E3%81%A7%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%82%B9%E3%82%AD%E3%83%AB%E5%90%91%E4%B8%8A%E3%82%AC%E3%82%A4%E3%83%89-Camille-Fournier/dp/4873118484\">エンジニアのためのマネジメントキャリアパス</a>」(Camille Fournier著、武舎 広幸、武舎 るみ訳、及川 卓也まえがき、オライリージャパン発行)を読んだ。</p>\n<p>私は一介のジュニアエンジニアで、今はシニアと呼ばれるような能力を身につけることを目指しており、マネジメントのキャリアを主軸に考えているわけではない。ただ、組織に対する視座や解像度が低いと感じることがあり、将来マネジメントのキャリアを拒んでいるわけではないので、気になってこの本を読んでみた。</p>\n<p>この本は、いちメンバーから上級のマネジメント職位に、順を追って話が進む。最初は自分自身が管理される側としてどのようにあるべきか、インターンのメンターに関する話題が取り扱われているので、自分のようなものも読んで得るものがあった。後半の高い職位に関する説明は「そういうふうにやっているのね」というのを俯瞰して流し読みしたという感じで、すぐに自分の知識として生かせるようなものではないが、解像度を読む前よりも多少高めるのに役だったと思う。</p>\n<p>これ以降は、本を読んで気になったところを、フレーズと共にいくつかピックアップして紹介する。</p>\n<h2>部下としての心得</h2>\n<p>第1章「マネジメントの基本」のなかで、マネジメントをするまえに、マネジメントをどうされるべきか、どのような立ち振る舞いが部下に求められているか/マネジメントがしやすいものかが説明されている。</p>\n<blockquote>\n<p>上司に求めることの第1ですが、それは「1対1で行うミーティング(以下「1-1」」です。 p2</p>\n</blockquote>\n<blockquote>\n<p>上司に求めることの第2は「フィードバックの提供」です。 p4</p>\n</blockquote>\n<blockquote>\n<p>自分自身が何を望んでいるのか、何を学びたいのか、何が自分を幸せにするのかを考え抜いて明らかにする責任はひとえにあなた自身が負っているのです。 p9</p>\n</blockquote>\n<p>似たような話はあとがきにも書かれている。</p>\n<blockquote>\n<p>人の管理がうまくなりたければ、自分自身を管理できるようにならなければならない。 p279</p>\n</blockquote>\n<p>本を読んだ中で、説明されている職位と自分の職位が最も一致する章だと思うが、自分自身が上長とどのようにやっていくべきかというのを改めて振り返る機会になった。1on1を、自分と上長の双方のより有意義なものにしていくために、自分が望んでいることを明確にし、そのために必要なことと現状を照らし合わせてフィードバックを得たり、それらを考えるための補助を求める、という行為をあらためて整理してやっていきたい。</p>\n<h2>メンターとしての傾聴</h2>\n<p>第2章「メンタリング」では、インターンやメンターのメンターとしての務めが書かれている。特に、メンターには傾聴が求められているとして、そのうえで以下のように触れられている。</p>\n<blockquote>\n<p>「傾聴」とは、指導相手が「口にする言葉だけを耳でとらえる行為」ではないこと。 p17</p>\n</blockquote>\n<p>メンターとしての役割を果たす時は(もっと言うと実際それに限らず人とコミュニケーションするときは)、メンティーの些細なしぐさや表情も含めて、相手が何をどのように考えているかを汲み取ってコミュニケーションしていく必要がある。</p>\n<p>上記の点を含め、メンターとしてどういうことが求められているかが文章としていくつかの項目で示されていることはとてもありがたい。自分がサポートを受ける立場のときどうであったか、自分がサポートをしたときどうであったか、これからサポートのための準備やサポートをしていく上でどうするべきであるか、というのを見つめ直すことができる。</p>\n<h2>テックリードに求められるプロジェクト管理のスキル</h2>\n<p>第3章「テックリード」では、エンジニアチームの技術上のリーダーとしてどのように立ち振る舞うかが説明されている。そのなかの一つの「プロジェクトの管理」についての説明は以下のようなものだ。</p>\n<blockquote>\n<p>プロれジェクト管理に必須である「プロジェクトを分割する作業」には、システムを設計する作業との類似点が多々あるため、プロジェクト管理のスキルを習得するという経験は、人的管理を任されることを望んでいないエンジニアにとっても有意義であるはずです。p38</p>\n</blockquote>\n<blockquote>\n<p>テックリードが最優先しなければならないのは「プロジェクトを推進するための大局的な視点を失わないこと」です。p41</p>\n</blockquote>\n<blockquote>\n<p>テックリードの果たすべきプロジェクトプランナーとしての役割は「作業をデリバリ可能な単位におおまかに分割する」というものです。p42</p>\n</blockquote>\n<p>企業としてソフトウェアを開発していくには、長いプロジェクトを俯瞰して、ある程度の進め方やスケジュールの算段が必要になる。</p>\n<p>普段の開発は、アジャイルやスクラムの枠組みの中で、設計し、作業を見積もり可能な粒度に分割し、見積もって、優先順位順に並べ替え、ベロシティを元にして、現時点でどれくらいかかるかなどがわかるように仕事を進める。</p>\n<p>とはいっても、そういう見積もりがすぐにはできないような先の見通しづらいプロジェクトや、年単位のプロジェクトの計画や管理、まだやるとは確実には決まっていない粒度の大きいプロジェクトの検討材料を集めるなどの仕事も必要で、それらは「見積もり」してやるわけにはいかない。</p>\n<p>テックリードといわれる職位の人が、そういったことに直面し、それをうまくやる術を仕事の中で身につけていっているということが説明されており、なるほどという気持ちになった。(つまり実際の方法は、本の中には書いていない。本の中で書き切れるような単純なものではないかもしれないのだろう。)</p>\n<h2>文化の構築</h2>\n<p>このの最後の章は「文化の構築」となっていて、この章も気になった。\n文化を形作る上で、意思決定のプロセスから個人的要素を排除するための具体的な方法に、ポストモーテムやアーキテクチャレビューを挙げており、それらを実践する上でのアドバイスが示されていた。</p>\n<blockquote>\n<p>事後検証の成果は、現実的な視点で取捨選択する p276</p>\n</blockquote>\n<p>問題が起きた時のポストモーテムに対する実践的なアドバイスの一つに、上記の事柄が紹介されている。起こった問題を完璧に解消できればいいが、現実にはそんなに暇ではないし、解決策が無限に時間のかかるような非現実的なものであれば形骸化してしまう。ポストモーテムが血の通ったものとなるために、現実的な視点で、効果的な次のアクションを定めていく必要がある。</p>\n<blockquote>\n<p>アーキテクチャレビューの価値は、その準備段階にある p277</p>\n</blockquote>\n<p>言語やフレームワークストレージシステムやデベロッパーツールなど、システムやツールの大きな変更に対して行うべき「アーキテクチャレビュー」の実施方針のアドバイスとして、準備段階の重要性が求められている。\nアーキテクチャレビューに限らず、誰かに説明して納得してもらうために、それを言語化して資料にまとめることは、その行為自体が自身のセルフレビューの一つになりうるし、準備段階が重要であることは納得がいく。</p>\n<p>ポストモーテムやアーキテクチャレビューに関する説明を読むことが、自分の会社の類似の事柄について、自分が取り組む上での実践的なコツのほかに、それらが企業においてどのような立ち位置でどうして重要とされているのか、そのしくみが用意されているのかを考えることのヒントとなった。</p>\n<hr>\n<p>以上。</p>","_history":[{"date":"2024-06-06T00:14:06+09:00","message":"Fix: 「エンジニアのためのマネジメントキャリアパスを読む」のtypo修正\n","hash":"eb0a605e98cb10620e7ffc1da6e0cae652da31fd"},{"date":"2023-07-11T09:20:29+09:00","message":"Fix: 見出し\n","hash":"b3b084f386857282b00c0aeaea415aaf537ddbc7"},{"date":"2023-07-11T08:53:13+09:00","message":"Post:「エンジニアのためのマネジメントキャリアパスを読む」\n","hash":"10914394519a7dbbe51d3a1dfaf5ec4271d9f126"}],"date_published":"2023-07-11T08:50:38+09:00","tags":["本","エンジニアリングマネジメント"]},{"id":"https://memo.yammer.jp/posts/software-design-202307","url":"https://memo.yammer.jp/posts/software-design-202307","title":"dotfiles管理の推しツール「yadm」の記事を寄稿しました (Software Design 連載最終回)","summary":"yadm の紹介記事を、本日発売のSoftware Design 2023年7月号に書きました。昨年12月から続けている連載「開発環境 探究の道」の最終回として、dotfilesの管理をより便利にするための方法を説明しています。 yadmについて / 記事の紹介 yadmは、シェルスクリプトで実装されたdotfiles管理ツールです。可搬性に優れ、dotfiles管理に必要な多数の機能と、gitに準じたコマンド操作体系をもっています。 私も普段からyadmを使っており、容易に導入できて、とても気に入っている1ものであり、ぜひみなさんに知っていただきたいと思って記事にしました。 記事の中では、y","content_html":"<p><a href=\"https://yadm.io\">yadm</a> の紹介記事を、本日発売の<a href=\"https://gihyo.jp/magazine/SD/archive/2023/202307\">Software Design 2023年7月号</a>に書きました。昨年12月から続けている連載「開発環境 探究の道」の最終回として、dotfilesの管理をより便利にするための方法を説明しています。</p>\n<p><img src=\"https://blob.yammer.jp/gp2s3/20230616-011135.jpg\" alt=\"Software Design 2023年1月号〜2023年7月号\"></p>\n<h3>yadmについて / 記事の紹介</h3>\n<p>yadmは、シェルスクリプトで実装されたdotfiles管理ツールです。可搬性に優れ、dotfiles管理に必要な多数の機能と、gitに準じたコマンド操作体系をもっています。\n私も普段からyadmを使っており、容易に導入できて、とても気に入っている<sup><a href=\"#user-content-fn-favorite\" id=\"user-content-fnref-favorite\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>ものであり、ぜひみなさんに知っていただきたいと思って記事にしました。</p>\n<p>記事の中では、yadmの概要と使い始める方法以外に、管理対象のファイルをより柔軟にする、sparse-checkoutとの組み合わせの例も紹介しています。\ndotfiles管理にこれから入門する人も、dotfiles管理を普段から別の方法でしている人も、ぜひこれを読んでyadmを試していただけると幸いです。</p>\n<h3>連載について</h3>\n<p>7ヶ月間にわたる連載<sup><a href=\"#user-content-fn-7month\" id=\"user-content-fnref-7month\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>も、今月が最終回です。初めての技術雑誌の連載を無事終えられたのは、たくさんの方々に支えていただいたおかげでした。全ての記事を毎月レビューしてくださった<a href=\"https://twitter.com/pyama86\">pyamaさん</a>と、編集を担当してくださった西原さんをはじめとするSoftware Design編集部の方々には大変お世話になりました。また、連載開始時に相談にのってくださった<a href=\"https://twitter.com/kenchan\">kenchanくんさん</a><sup><a href=\"#user-content-fn-kenchan\" id=\"user-content-fnref-kenchan\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>にもお世話になりました。</p>\n<p>そして、読者の感想の投稿や、Web上での言及をしてくださった方、記事を読んでくださった皆様がいるからこそ、続けることができました。本当にありがとうございました。</p>\n<p>連載は、開発環境を中心に、以下の内容を扱いました。 開発環境という言葉はひろく、人によって指す範囲が異なるため、連載では「LinuxやUNIXにおける、ソフトウェア開発をはじめとするテキストベースのファイル編集やターミナルでのコマンド実行の環境」を指すこととしています。</p>\n<table>\n<thead>\n<tr>\n<th>回</th>\n<th>号</th>\n<th>タイトル</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第1回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202301\">2023年1月号</a></td>\n<td>dotfilesを管理して、再現可能な開発環境を作る</td>\n<td>Gitとシンボリックリンクを用いたdotfilesの管理構成、設定ファイルの分割と分岐</td>\n</tr>\n<tr>\n<td>第2回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202302\">2023年2月号</a></td>\n<td>シェルをカスタマイズする</td>\n<td>シェルの文法、bashとzshの設定ファイルのカスタマイズ(エイリアス、シェル関数、プロンプト、フィルターコマンドの活用)</td>\n</tr>\n<tr>\n<td>第3回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202303\">2023年3月号</a></td>\n<td>ターミナルをカスタマイズする</td>\n<td>ターミナルエミュレータAlacritty、ターミナルマルチプレクサtmux</td>\n</tr>\n<tr>\n<td>第4回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202304\">2023年4月号</a></td>\n<td>環境構築を自動化する</td>\n<td>設定の自動化とパッケージのインストールの自動化を行うシェルスクリプトの実装</td>\n</tr>\n<tr>\n<td>第5回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202305\">2023年5月号</a></td>\n<td>テキストエディタをカスタマイズする</td>\n<td>VSCodeとVimの、基本操作と設定変更</td>\n</tr>\n<tr>\n<td>第6回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202306\">2023年6月号</a></td>\n<td>拡張機能やプラグインを使う</td>\n<td>VSCodeとVim、zsh, tmuxの拡張機能やプラグイン、Language Serverによる開発支援</td>\n</tr>\n<tr>\n<td>第7回</td>\n<td><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202307\">2023年7月号</a></td>\n<td>dotfilesの管理を発展させる</td>\n<td>dotfiles管理ツールのyadmと、その活用方法</td>\n</tr>\n</tbody>\n</table>\n<p>初回にdotfilesの説明をし、その上で、周辺のトピックへ広がるよう、進んでいきます。一方で、各号はそれぞれ独立しており、どれかの号だけでも読めるように書いています。気になるものがあれば、ぜひお読みください。(記事を読んだよ！という声を聞くと、さらに嬉しいです。)</p>\n<p>開発環境の探究はひろく深く、今回は扱わなかったツールや、私の知らないツールやHowToもたくさんあることと思います。ぜひみなさんがよいツールや方法を見つけたりつくったときは、ブログ、登壇やLT、記事、Twitter、他の人との会話、どんな手段でもそれを広げて共有いただけると嬉しいです。私はそのような話が大好きですし、きっと好きな方がたくさんいる話題です。</p>\n<h3>おわりに</h3>\n<p><a href=\"https://gihyo.jp/magazine/SD/archive/2023/202307\">Software Design 2023年7月号</a>は、私の記事以外にも、第一特集のgRPCで始めるWeb API開発や、第二特集のSvelteの話など、たくさんの技術情報が詰まっています。全国の書店もしくはWebで、ぜひお買い求めください。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-favorite\">\n<p>シンボリックリンクを使った管理の抱える問題を解消できる点などが魅力的で使い始めました。連載の中でも今回の内容が一番書きたかったもので、yadmの良さが伝われば幸いです。 <a href=\"#user-content-fnref-favorite\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-7month\">\n<p>準備なども含めると、企画が始動してから10ヶ月くらい経っています <a href=\"#user-content-fnref-7month\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-kenchan\">\n<p>今回の連載に繋がった、<a href=\"https://memo.yammer.jp/posts/software-design-202206\">2022年6月号の特集記事</a>のレビューでもお世話になりました。また、yadmはそのレビューの時にくんさんから教えていただいて使い始めたもので、今回の記事につながっています。 <a href=\"#user-content-fnref-kenchan\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-06-16T10:50:54+09:00","message":"Post: 「dotfiles管理の推しツール「yadm」の記事を寄稿しました (Software Design 連載最終回)」\n","hash":"85a899e465cc49551b25bb52ddd3fdfca43efe96"}],"date_published":"2023-06-16T10:45:00+09:00","tags":["dotfiles","yadm","SoftwareDesign"]},{"id":"https://memo.yammer.jp/posts/gawk-rubber-duck","url":"https://memo.yammer.jp/posts/gawk-rubber-duck","title":"LlamaIndexを使って、gawkプログラミングの相棒を作る","summary":"LlamaIndexを使って手を動かしてみようということで、gawkプログラマーが使える、質問回答アプリケーションを作ってみた。 gawk-rubber-duck LlamaIndexとは LlamaIndexという、LLMアプリケーションのためのフレームワークがある。 Pythonで書かれたプログラムで、内部でOpenAI APIを実行するが、その前後の処理なども行ってくれるものである。 LlamaIndexがどのようなものかの説明は、次の記事がわかりやすい。 Llamaindex を用いた社内文書の ChatGPT QA ツールをチューニングする - GMOインターネットグループ グループ","content_html":"<p>LlamaIndexを使って手を動かしてみようということで、gawkプログラマーが使える、質問回答アプリケーションを作ってみた。</p>\n<p><a href=\"https://gawk-rubber-duck.yammer.jp\">gawk-rubber-duck</a></p>\n<h2>LlamaIndexとは</h2>\n<p><a href=\"https://github.com/jerryjliu/llama_index\">LlamaIndex</a>という、LLMアプリケーションのためのフレームワークがある。\nPythonで書かれたプログラムで、内部でOpenAI APIを実行するが、その前後の処理なども行ってくれるものである。</p>\n<p>LlamaIndexがどのようなものかの説明は、次の記事がわかりやすい。</p>\n<p><a href=\"https://recruit.gmo.jp/engineer/jisedai/blog/llamaindex-chatgpt-tuning/\">Llamaindex を用いた社内文書の ChatGPT QA ツールをチューニングする - GMOインターネットグループ グループ研究開発本部（次世代システム研究室）</a></p>\n<p>記事の中程の、LlamaIndex 処理フローに丁寧に書いてある。主に以下のことをやっているようである。</p>\n<ul>\n<li>事前に与えられた知識となる文章を適切に分割し、embeddingでベクトル化しておく</li>\n<li>質問文をembeddingし、ベクトルの類似性を元に、関連の文章を取り出して、LLMに一緒に渡す。</li>\n</ul>\n<p>LlamaIndexを使うと、モデルが学習済みで無い、かつ、一度に与えられる上限を超えた沢山の文章をベースに、文章生成ができる。</p>\n<p>公式ドキュメントに<a href=\"https://gpt-index.readthedocs.io/en/latest/getting_started/starter_example.html\">チュートリアル</a>が用意されているので、<a href=\"https://zenn.dev/basd4g/scraps/e2eea84da6435d\">それを動かして雰囲気を掴んだ</a>。</p>\n<h2>gawk-rubber-duck</h2>\n<p>LlamaIndexをつかってみたいということで、一つアプリケーションを作ってみた。</p>\n<p>最近趣味でgawkのコードを書いているのだが、そのとき、gawkの公式マニュアルである、<a href=\"https://www.gnu.org/software/gawk/manual/\">The GNU Awk User's Guide</a>をよく参考にしている。このマニュアルは分量がそこそこある英語の文章で、これをLlama-Indexと組み合わせて、gawkに特化した文章生成ができたら面白いのでは無いかと思ったのが、発想のはじまり。</p>\n<p><a href=\"https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%90%E3%83%BC%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0\">ラバーダック・デバッグ</a>という言葉があるように、プログラマーの相棒といえばアヒルだろう。今回は賢いアヒルを用意したつもりでgawk rubber duckと名付け、gawkの質問に答えるWebアプリケーションとして作成/公開した。</p>\n<h2>作り方</h2>\n<p>以下、どのように作ったかを記録しておく。</p>\n<h3>インデックスの作成</h3>\n<p>まず、事前準備として、gawkの章ごとに分割されているHTML版のマニュアルをダウンロードし、HTMLタグを取り除いてプレーンテキストにする。(プレーンテキスト版も配布されてはいるが、全セクションが1つにまとまったファイルなので、意味のある単位で最初から分割されているHTML版のものを使った)</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/pipeline/download.sh\">gawk-rubber-duck/pipeline/download.sh at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/pipeline/html2txt.js\">gawk-rubber-duck/pipeline/html2txt.js at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n</ul>\n<p>次に、これをLlamaIndexに渡すと、入力が一定の粒度に分割され、それぞれがembeddingによってベクトル化された上で、JSONファイルとして出力される。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/pipeline/save.py\">gawk-rubber-duck/pipeline/save.py at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n</ul>\n<p>なお、多数の文章をOpenAI APIに渡すので、事前に金額感をつかむために、tiktokenというライブラリを使って、トークンの消費量を計算してから行った。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/pipeline/guess-token.py\">gawk-rubber-duck/pipeline/guess-token.py at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n</ul>\n<p>JSONに保存された文章やベクトルを元に、回答生成するのも数行でかける。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/pipeline/query.py\">gawk-rubber-duck/pipeline/query.py at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n</ul>\n<h3>Webアプリケーションにする</h3>\n<p>Flaskを使って、HTTPリクエストを受け付けるようにする。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/web/main.py#L38-L54\">gawk-rubber-duck/web/main.py at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n</ul>\n<p>リクエストごとにOpenAI APIを実行するので、IPアドレスベースのレートリミットを導入した。<a href=\"https://flask-limiter.readthedocs.io/en/stable/\">Flask-Limiter</a>と、記憶領域には、無料枠のある<a href=\"https://www.mongodb.com/ja-jp/atlas/database\">MongoDB Atlas</a>を、パスワード認証で使っている。</p>\n<p>できたアプリケーションはDockerでまとめて、Cloud Runに載せた。OpenAI API Keyと、MongoDBへの接続情報は、シークレットマネージャで環境変数から差し込んでいる。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/main/web/Dockerfile\">gawk-rubber-duck/web/Dockerfile at main · yammerjp/gawk-rubber-duck · GitHub</a></li>\n</ul>\n<h2>感想</h2>\n<p>実際のところ、今回のアプリケーションはひとまず作って公開してみた、という程度で、どこまで実用かはまだ未知数。</p>\n<p>LlamaIndexを使って試してみる、というのはそれこそPythonのプログラムを10行程度書けばできてしまった。入力を分割したり、ベクトル検索したりという部分も含めて何もしなくてもいいので、とりあえず試してみる、というのがとてもやりやすい。</p>\n<p>求めていた回答が出ているかといわれると、ちょっと微妙で、今回でいえば以下がみえている課題</p>\n<ul>\n<li>適切な文章を探せるか<br>\nLlamaIndexは、与えた文章を、最初にベクトル検索で絞り込むので、そのときに目的のものが絞り込めなければ、良い結果が出ないようである。例えば入力を日本語で与えると、そのままembeddingしても関係のある文章を引っ張って来れないようで(ここ間違っていたら指摘してください)、<a href=\"https://github.com/yammerjp/gawk-rubber-duck/blob/0bc8212300992fea94addef18a05e5ed3b1d3cd3/web/main.py#L46-L49\">英語に翻訳してからLlamaIndexに渡す</a>ようにしてみたりしている。</li>\n<li>文章から知見を抽出できるか<br>\n今回入力に与えたThe GNU Awk User's Guideはおそらく昔からネット上に公開されているもので、言語モデル自体がこの情報を学習していると思われる。なので、LlamaIndexで情報を与えずとも、元々多少なりとも回答してくれるので、今回の方法が効果的かは疑問がある。</li>\n<li>品質の評価ができるか<br>\n上記を含め、作ったものや仕組みがどれくらい実用に耐えうるか、方式を変えると改善しうるかというのは、評価する必要があるが、こういった具体的なユースケースにおいてどのように評価すればいいのかがわかっていない。作ってみたが、いまのところは作ってみて終わり、となっている。</li>\n</ul>\n<p>というわけで、以上、今回は作ってみたという記事。実用的はどうかは疑問があるが、デプロイまでできると一区切りした感があっていい。</p>","_history":[{"date":"2023-06-13T14:09:37+09:00","message":"Post: 「LlamaIndexを使って、gawkプログラミングの相棒を作る」\n","hash":"e63ef8313dcda5f5a64884321386f40f87bec35f"}],"date_published":"2023-06-13T14:10:00+09:00","tags":["OpenAI","llama-index","embedding","python","flask"]},{"id":"https://memo.yammer.jp/posts/union-find","url":"https://memo.yammer.jp/posts/union-find","title":"awkで実装するUnion-Findと、ABC177 D","summary":"最近、業務時間後のオフィスで「競プロもくもくわいわい会」というのをやっている。そこで@purple_jwlさんよりUnion-Findを教えていただいたので、それをawkで実装して、ABC177のD問題を解いてみる。 Union-Findとは ここでは深く解説しないが、Union-Findについては、以下のサイトなどが参考になる。 Union-Find とは - アルゴ式 Union-Find はグループ分けを効率的に管理する、根付き木を用いたデータ構造です。 Union-Find を用いると、次の各クエリ(要求)を高速に処理できます。 N 個の要素 0,1,⋯,N−1 があり、初期状態ではそ","content_html":"<p>最近、業務時間後のオフィスで「競プロもくもくわいわい会」というのをやっている。そこで<a href=\"https://twitter.com/purple_jwl\">@purple_jwl</a>さんよりUnion-Findを教えていただいたので、それをawkで実装して、<a href=\"https://atcoder.jp/contests/abc177/tasks/abc177_d\">ABC177のD問題</a>を解いてみる。</p>\n<h2>Union-Findとは</h2>\n<p>ここでは深く解説しないが、Union-Findについては、以下のサイトなどが参考になる。</p>\n<p><a href=\"https://algo-method.com/descriptions/132\">Union-Find とは - アルゴ式</a></p>\n<blockquote>\n<p>Union-Find はグループ分けを効率的に管理する、根付き木を用いたデータ構造です。\nUnion-Find を用いると、次の各クエリ(要求)を高速に処理できます。</p>\n<p>N 個の要素 0,1,⋯,N−1 があり、初期状態ではそれぞれ異なるグループに属しています。\n各クエリでは次のどちらかの操作を行います。</p>\n<ul>\n<li>issame(x,y) : 要素 x,y が同じグループに属するかを調べる。</li>\n<li>unite(x,y) : 要素 x を含むグループと要素 y を含むグループとを併合する。</li>\n</ul>\n</blockquote>\n<p>複数のグループを統合して1つのグループにする操作(上記の<code>unite</code>)と、複数の要素が同じ要素に属しているかを確認する操作(上記の<code>issame</code>)ができるもので、これを使うことで、グループ分けの問題を解くことができる。ABCだとD問題などで出てくるらしい。</p>\n<h2>Union-Findのawk実装</h2>\n<p>これを、awkで実装すると以下のようになる。<sup><a href=\"#user-content-fn-vec\" id=\"user-content-fnref-vec\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<pre><code class=\"hljs language-awk\"><span class=\"hljs-comment\"># Union-Findの内部のデータ構造は、各グループごとの木構造である</span>\n<span class=\"hljs-comment\"># ある根を他の根の子にすることがUnion、ある頂点の根を求めることがFindにあたる。</span>\n<span class=\"hljs-comment\"># Findした結果が同じ頂点なら、同じ木に属するとわかる</span>\n\n<span class=\"hljs-comment\"># グラフは、次の変数に保持する</span>\n<span class=\"hljs-comment\"># - uf_parent[x] ... 値xの親となる値</span>\n<span class=\"hljs-comment\"># - uf_size[x] ... xが根のとき、その木の頂点数</span>\n\n<span class=\"hljs-comment\"># 新しい頂点を登録。辺はなく、自身が根になる</span>\n<span class=\"hljs-keyword\">function</span> uf_add(x) {\n  uf_parent[x] = x\n  uf_size[x] = <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-comment\"># uf_parentを再帰的にたどり、rootの値を返す</span>\n<span class=\"hljs-keyword\">function</span> uf_root(x) {\n  <span class=\"hljs-keyword\">if</span> (uf_parent[x] == x) {\n    <span class=\"hljs-comment\"># 根</span>\n    return x\n  }\n  <span class=\"hljs-comment\"># 再帰的に辿りながら、木の深さが浅くなるように辺を付け替えて高速化 (パス圧縮)</span>\n  return uf_parent[x] = uf_root(uf_parent[x])\n}\n \n<span class=\"hljs-comment\"># xとyを同じ木に統合する</span>\n<span class=\"hljs-keyword\">function</span> uf_unite(x, y,        rootX, rootY) {\n  rootX = uf_root(x)\n  rootY = uf_root(y)\n  <span class=\"hljs-keyword\">if</span> (rootX == rootY) {\n    <span class=\"hljs-comment\"># 既に同じ木ならば、何もしない</span>\n    return <span class=\"hljs-number\">0</span>\n  }\n  <span class=\"hljs-comment\"># 片方の根を、もう片方の根の子にする</span>\n  <span class=\"hljs-comment\">#   木の深さが浅くなるよう、深い木の根の子として、浅い木の根を生やすことで高速化 (ランク結合)</span>\n  <span class=\"hljs-comment\">#     ここでは、ランクではなく木に含まれる頂点数を測って深さの代わりとしているが、</span>\n  <span class=\"hljs-comment\">#     これで本当に高速化されるのかは定かではない</span>\n  <span class=\"hljs-comment\">#     次のページなどが参考になるかもしれない</span>\n  <span class=\"hljs-comment\">#     ref: https://37zigen.com/union-find-complexity-1/</span>\n  <span class=\"hljs-keyword\">if</span> (uf_size[rootX] > uf_size[rootY]) {\n    <span class=\"hljs-comment\"># rootXを根とする</span>\n    uf_parent[rootY] = rootX\n    uf_size[rootX] += uf_size[rootY]\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\"># rootYを根とする</span>\n    uf_parent[rootX] = rootY\n    uf_size[rootY] += uf_size[rootX]\n  }\n  return <span class=\"hljs-number\">1</span>\n}\n</code></pre>\n<h2>Union-Findのawk実装を実行してみる</h2>\n<p>この実装の挙動は、以下のBEGIN句を動かすと想像しやすいだろう。</p>\n<pre><code class=\"hljs language-awk\"><span class=\"hljs-comment\"># 先ほどのUnion-Findの実装は同じなので省略</span>\n<span class=\"hljs-keyword\">BEGIN</span> {\n  uf_add(<span class=\"hljs-number\">1</span>)\n  uf_add(<span class=\"hljs-number\">2</span>)\n  uf_add(<span class=\"hljs-number\">3</span>)\n  uf_add(<span class=\"hljs-number\">4</span>)\n  uf_add(<span class=\"hljs-number\">5</span>)\n  uf_add(<span class=\"hljs-number\">6</span>)\n\n  uf_unite(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)\n  uf_unite(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\n  uf_unite(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)\n\n  printf <span class=\"hljs-string\">\"uf_parent[1]: %d\\n\"</span>, uf_parent[<span class=\"hljs-number\">1</span>]\n  printf <span class=\"hljs-string\">\"uf_parent[2]: %d\\n\"</span>, uf_parent[<span class=\"hljs-number\">2</span>]\n  printf <span class=\"hljs-string\">\"uf_parent[3]: %d\\n\"</span>, uf_parent[<span class=\"hljs-number\">3</span>]\n  printf <span class=\"hljs-string\">\"uf_parent[4]: %d\\n\"</span>, uf_parent[<span class=\"hljs-number\">4</span>]\n  printf <span class=\"hljs-string\">\"uf_parent[5]: %d\\n\"</span>, uf_parent[<span class=\"hljs-number\">5</span>]\n  printf <span class=\"hljs-string\">\"uf_parent[6]: %d\\n\"</span>, uf_parent[<span class=\"hljs-number\">6</span>]\n  printf <span class=\"hljs-string\">\"\\n\"</span>\n\n  printf <span class=\"hljs-string\">\"uf_root(1): %d\\n\"</span>, uf_root(<span class=\"hljs-number\">1</span>)\n  printf <span class=\"hljs-string\">\"uf_root(2): %d\\n\"</span>, uf_root(<span class=\"hljs-number\">2</span>)\n  printf <span class=\"hljs-string\">\"uf_root(3): %d\\n\"</span>, uf_root(<span class=\"hljs-number\">3</span>)\n  printf <span class=\"hljs-string\">\"uf_root(4): %d\\n\"</span>, uf_root(<span class=\"hljs-number\">4</span>)\n  printf <span class=\"hljs-string\">\"uf_root(5): %d\\n\"</span>, uf_root(<span class=\"hljs-number\">5</span>)\n  printf <span class=\"hljs-string\">\"uf_root(6): %d\\n\"</span>, uf_root(<span class=\"hljs-number\">6</span>)\n}\n</code></pre>\n<p>実行結果は以下のようになる</p>\n<pre><code class=\"hljs language-text\">uf_parent[1]: 2\nuf_parent[2]: 2\nuf_parent[3]: 4\nuf_parent[4]: 4\nuf_parent[5]: 4\nuf_parent[6]: 6\n\nuf_root(1): 2\nuf_root(2): 2\nuf_root(3): 4\nuf_root(4): 4\nuf_root(5): 4\nuf_root(6): 6\n</code></pre>\n<p>この時の木構造は以下のようになっている。</p>\n<p><img src=\"https://blob.yammer.jp/union-find-example-1-2-3-4-5-6.png\" alt=\"mermaid graph TD; 2-->1; 4-->3; 4-->5; 6;\"></p>\n<h2>ABC177 D問題を解く</h2>\n<p><a href=\"https://atcoder.jp/contests/abc177/tasks/abc177_d\">D - Friends - Atcoder Beginner Contest 177</a></p>\n<p>Union-Findの練習問題としてお勧めされた問題。問題文中のグループではなく、友達関係を辺としてUnion-Findに落とし込み、木ごとの頂点数の最大値が答えになる。</p>\n<pre><code class=\"hljs language-awk\"><span class=\"hljs-comment\"># 先ほどのUnion-Findの実装は同じなので省略</span>\n\nNR==<span class=\"hljs-number\">1</span> {\n  N=<span class=\"hljs-variable\">$1</span>\n  <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">1</span>; i&#x3C;=N; i++) {\n    uf_add(i)\n  }\n}\n\nNR><span class=\"hljs-number\">1</span> {\n  uf_unite(<span class=\"hljs-variable\">$1</span>, <span class=\"hljs-variable\">$2</span>)\n}\n \n<span class=\"hljs-keyword\">END</span> {\n  max = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> uf_size) {\n    <span class=\"hljs-keyword\">if</span> (max &#x3C; uf_size[i]) {\n      max = uf_size[i]\n    }\n  }\n  print max\n}\n</code></pre>\n<hr>\n<p>というわけで、awkでもD問題が解けることが示されてしまいました。言語ではなく、解く人の能力が求められる、ということですね (頑張りましょうという自分へのメッセージ)。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-vec\">\n<p>ここでは<code>uf_parent</code>と<code>uf_size</code>という配列をハードコーディングしているが、これらの代わりに<code>vec[\"parent\"]</code>、<code>vec[\"size\"]</code>などとして、<code>vec</code>を各関数の第一引数に渡せるようにすると、Union-Findのデータ構造を、複数扱えるようになる。 <a href=\"#user-content-fnref-vec\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-06-06T02:33:41+09:00","message":"Fix: typo 再起->再帰\n","hash":"a53ed13824fd9358ac5d9587647b8f3b4829b93f"},{"date":"2023-06-06T02:23:50+09:00","message":"Post: 「awkで実装するUnion-Findと、ABC177 D」\n","hash":"ba61fa9dc73b4da897bcbc02d6a37c84c2729f51"}],"date_published":"2023-06-06T02:15:00+09:00","tags":["競技プログラミング","AtCoder","ABC","Union-Find","awk"]},{"id":"https://memo.yammer.jp/posts/embedding-and-vector-similarity-matching","url":"https://memo.yammer.jp/posts/embedding-and-vector-similarity-matching","title":"OpenAI API Embeddingsを使った、関連記事の表示・検索","summary":"このブログに、お試しで2つの機能を追加してみた。 ひとつは、関連記事の表示。もう1つは、検索。 どちらもOpenAI API Embeddingsを使って、記事の文章をベクトル化し、Pineconeを使ってベクトルの類似度の近しいものを得ている。 以下は、これをどのようにして作ったか、どのようにして動いているのかを説明する。 構成 作ったものの全体像は以下の図のとおり。 以下のようなことをやっている。出てくる要素は、「要素技術とロール」の項で後述する。 STEP1: インデックス作成 すべての記事に対して、それぞれ、記事全文をOpenAI API Embediingsに渡してベクトル化し、それ","content_html":"<p>このブログに、お試しで2つの機能を追加してみた。\nひとつは、<a href=\"#related-articles\">関連記事の表示</a>。もう1つは、<a href=\"/search\">検索</a>。\nどちらも<a href=\"https://platform.openai.com/docs/guides/embeddings/what-are-embeddings\">OpenAI API Embeddings</a>を使って、記事の文章をベクトル化し、<a href=\"https://www.pinecone.io\">Pinecone</a>を使ってベクトルの類似度の近しいものを得ている。</p>\n<p>以下は、これをどのようにして作ったか、どのようにして動いているのかを説明する。</p>\n<h2>構成</h2>\n<p>作ったものの全体像は以下の図のとおり。</p>\n<p><img src=\"http://blob.yammer.jp/embedding-and-vector-similarity-matching.png\" alt=\"OpenAI API EmbeddingsとPinecone APIに対し、手元のPCもしくはCloudFlare Workersからリクエストを発行する。記事を書いたら、記事内容をOpenAI API Embeddingsでベクトル化してPineconeに保存する(STEP 1)。次に、ある記事のベクトルをもとに、関連記事をPineconeから取得する(STEP 2)。Webページからの検索クエリは、CloudFlare Workersが受け取り、OpenAI API Embeddingsでベクトル化してから、Pineconeで類似するベクトルを得て、記事情報に変えて表示している。\"></p>\n<p>以下のようなことをやっている。出てくる要素は、「要素技術とロール」の項で後述する。</p>\n<ul>\n<li><u>STEP1: インデックス作成</u>\nすべての記事に対して、それぞれ、記事全文をOpenAI API Embediingsに渡してベクトル化し、それをPineconeに登録する</li>\n<li><u>STEP2: 関連記事の探索</u>\nある記事のベクトルをPineconeに渡し、それと類似度の高いベクトルを得る。そのベクトルの表す記事を、関連記事としてページ生成時に埋め込む。</li>\n<li><u>STEP3: キーワード検索</u>\nユーザが検索したキーワードは、CloudFlare Workersが受け取り、OpenAI API Embeddingsでベクトル化してから、Pineconeに渡して類似度の高いベクトルを得る。そのベクトルの表す記事を、検索結果として表示する。</li>\n</ul>\n<h2>要素技術とロール</h2>\n<p>作ったといっても、次の2つのサービスのAPIを叩いているだけである。</p>\n<ul>\n<li>OpenAI API Embedding</li>\n<li>Pinecone API</li>\n</ul>\n<p>これらへ、以下の2つの箇所からHTTPリクエストを発行している。</p>\n<ul>\n<li>CloudFlare Workers</li>\n<li>手元のPC (Macbook)</li>\n</ul>\n<h3>OpenAI API Embeddings</h3>\n<p>OpenAI API Embeddingsの使い方は簡単。例えば「今日はいい天気です」をベクトル化するならば、以下のようになる。</p>\n<pre><code class=\"hljs language-shell\">$ export OPENAI_API_KEY=ここにAPIキーを入れる\n$ curl https://api.openai.com/v1/embeddings \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"input\": \"今日はいい天気です\",\n    \"model\": \"text-embedding-ada-002\"\n  }'\n{\n  \"data\": [\n    {\n      \"embedding\": [\n        0.0011353685,\n        0.0045190547,\n        -0.0039041303,\n        ...1536次元の実数のベクトルが出力される。長いので省略\n      ],\n      \"object\": \"embedding\",\n      \"index\": 0\n    }\n  ],\n  \"object\": \"list\",\n  \"model\": \"text-embedding-ada-002-v2\",\n  \"usage\": {\n    \"prompt_tokens\": 8,\n    \"total_tokens\": 8\n  }\n}\n</code></pre>\n<p>あとは、ここで得られたベクトル同士の類似度を計算して、近しいものほど、より関連があるとして出力すればよい。</p>\n<h3>Pinecone API</h3>\n<p>類似したベクトルを探すのは、今回の例であれば総当たりで計算しても良いが<sup><a href=\"#user-content-fn-kishida-hatena\" id=\"user-content-fnref-kishida-hatena\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>、マネージドサービスを使うことにする。最初にみたのはGoogle CloudのVetex AI Matching Engineだったが、個人で小規模に使うには高いので、無料枠のある<a href=\"https://www.pinecone.io\">Pinecone</a>を使うことにした。</p>\n<p>まずIndexを1つ作る。次に、記事ごとのID (今回はURL末尾。この記事でいえば<code>embedding-and-vector-similarity-matching</code>)をキーにして、先ほど得たベクトルを登録していく。すべて登録すると、関連記事や検索結果を得る準備が整う。</p>\n<p>関連記事を得るには、ある記事のベクトルをPineconeに渡して、類似のベクトル(とそれに紐づく記事ID)を得れば良い。キーワードや文章による検索は、文字列を予めOpenAI API Embeddingに通してベクトル化してから、類似のベクトル(と記事ID)を得ればよい。</p>\n<h3>CloudFlare Workers</h3>\n<p>検索ページ <code>https://memo.yammer.jp/search</code> から受けた検索クエリを元に、OpenAI API EmbeddingsとPineconeへリクエストを発行するのに使っている。このブログはNext.jsを使っているが、SSGなので、APIキーを隠すためになんらかのバックエンドが必要だった。</p>\n<p>ブラウザから実行される公開されたエンドポイントなので、IPアドレスベースのRate Limitを実装した。<a href=\"https://steemit.com/blog/@justyy/a-simple-rate-limiter-for-cloudflare-workers-serverless-api-based-on-kv-stores\">CloudFlare KVベースの実装を説明したブログ記事</a>があったので、これをそのまま真似た。作ったものの中身はGitHubにある。(<a href=\"https://github.com/yammerjp/memo-yammer-jp-similarity-matching\">yammerjp/memo-yammer-jp-similarity-matching</a>)</p>\n<p>OpenAI APIもPinconeもNode.js用のクライアントライブラリがあるが、CloudFlare Workers内では<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a>を直接使ってリクエストを発行している。余談だが、curlの実行例をChatGPTに渡したらFetch APIの実装をやってくれて便利だった。</p>\n<h3>手元のPC (Macbook)</h3>\n<p>現在は、以下の2つのことを手元のMacbookでやっている。継続的に使うようならGitHub Actionsに載せる予定。</p>\n<ul>\n<li>記事の内容をベクトル化 (<a href=\"https://github.com/yammerjp/memo.yammer.jp/blob/1c2f55be7fb2fdeaba409ff7e189c6bc3d533c55/bin/embedding.js\"><code>bin/embedding.js</code></a>)してPineconeに登録する (<a href=\"https://github.com/yammerjp/memo.yammer.jp/blob/1c2f55be7fb2fdeaba409ff7e189c6bc3d533c55/bin/embedding.js\"><code>bin/genIndex.js</code></a>)</li>\n<li>関連記事を得る (<a href=\"https://github.com/yammerjp/memo.yammer.jp/blob/1c2f55be7fb2fdeaba409ff7e189c6bc3d533c55/bin/embedding.js\"><code>bin/queryRelatedArticles.js</code></a>)</li>\n</ul>\n<p>上記の2つは、すべての記事に対して処理を実行するスクリプトになっている。本当はすべての記事に対してやる必要はなく、差分更新すればいいのだが、Gitで記事管理しているSSGのサイトは、差分更新と相性が悪いので、どのようにやるか考えあぐねている。Pinecone以外に何らかのデータストアが外部に欲しい。</p>\n<h2>おわりに</h2>\n<p>便利なものが揃っていて、それらを繋ぎ込むだけで割と簡単に作れてしまった。</p>\n<p>関連記事は、記事によっては<sup><a href=\"#user-content-fn-this\" id=\"user-content-fnref-this\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>、結構いい結果が出ているようにみえる。検索も、まあまあいい感じではある。ただ、検索ワードを検索欄に自分で入力するUIは、単語ベースの完全一致の検索を想起するので「記事のどこかに検索ワードが出てくるのではないか」「だとしたらどこに出てくるのか」などが気になってしまう。何か他のものと組み合わせるのがよいのかもしれない。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-kishida-hatena\">\n<p>同様のことをやっている@kisさんの先行事例では、Javaで内積を計算する処理を自前で書いているようです。 <a href=\"https://nowokay.hatenablog.com/entry/2023/04/03/173313\">GPTのEmbeddingを使った近いエントリを探す処理がVector APIなどで10倍高速になった - きしだのHatena</a> <a href=\"#user-content-fnref-kishida-hatena\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-this\">\n<p>この記事の関連記事は微妙だが、これはそもそもあんまり似た記事を過去に書いていなかったのだと思う。 <a href=\"#user-content-fnref-this\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-06-05T01:40:02+09:00","message":"Update: 関連記事は「記事よっては」いい結果が出ている\n","hash":"f6639bfe488048eebb0e4f64959da443b4e57aa9"},{"date":"2023-06-05T01:35:17+09:00","message":"Post: 「OpenAI API Embeddingsを使った、関連記事の表示・検索」\n","hash":"13e7aec259798e6de8d3e7be5810d830452bab39"}],"date_published":"2023-06-05T01:35:00+09:00","tags":["OpenAI","Pinecone","検索","Embedding"]},{"id":"https://memo.yammer.jp/posts/rtx","url":"https://memo.yammer.jp/posts/rtx","title":"rtxはじめました","summary":"ランタイム管理ツールasdfと互換性のある、rtxを使い始めた。 asdfのプラグインエコシステムに乗っかっていて、できることはasdfと基本的には同じのようだが、はやい1などのメリットがある(後述)。 切り替え 切り替えは以下のような手順で進めた。dotfilesの差分はこんな感じ yammerjp/dotfiles 6a6951c。 シェルの設定ファイル(.zshrcなど)に書かれているasdfの読み込みをやめる 私の場合はsheldonのプラグインにしていたので、~/.config/sheldon/plugins.tomlの記述をひとまずコメントアウトした。 rtxをいれる Apple ","content_html":"<p>ランタイム管理ツール<a href=\"https://asdf-vm.com\">asdf</a>と互換性のある、<a href=\"https://github.com/jdxcode/rtx\">rtx</a>を使い始めた。</p>\n<p>asdfのプラグインエコシステムに乗っかっていて、できることはasdfと基本的には同じのようだが、はやい<sup><a href=\"#user-content-fn-fast\" id=\"user-content-fnref-fast\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>などのメリットがある(後述)。</p>\n<h2>切り替え</h2>\n<p>切り替えは以下のような手順で進めた。dotfilesの差分はこんな感じ <a href=\"https://github.com/yammerjp/dotfiles/commit/6a6951c1abc8f7227351c5857ad459127bbd7fc5\">yammerjp/dotfiles 6a6951c</a>。</p>\n<ol>\n<li>シェルの設定ファイル(.zshrcなど)に書かれているasdfの読み込みをやめる</li>\n</ol>\n<p>私の場合はsheldonのプラグインにしていたので、~/.config/sheldon/plugins.tomlの記述をひとまずコメントアウトした。</p>\n<ol start=\"2\">\n<li>rtxをいれる</li>\n</ol>\n<p>Apple SiliconのmacOSを使っていたら以下のような感じ。</p>\n<pre><code class=\"hljs language-shell\">$ curl https://rtx.pub/rtx-latest-macos-arm64 > ~/.local/bin/rtx\n$ chmod u+x ~/.local/bin/rtx\n# ~/.local/bin/はPATHが通っている前提\n</code></pre>\n<ol start=\"3\">\n<li>rtxの読み込みをシェルの設定ファイルに書く</li>\n</ol>\n<p>複数端末で同じシェルの設定を書いているので、rtxをインストールしている端末だけに反映させたい。\n以下のような内容を<code>.zshrc</code>に追記</p>\n<pre><code class=\"hljs language-zsh\">if (which rtx > /dev/null); then\n  eval \"$(rtx activate zsh)\"\nfi\n</code></pre>\n<ol start=\"4\">\n<li>rtxの設定ファイルを配置</li>\n</ol>\n<p><code>~/.config/rtx/config.toml</code>に、以下のような内容のファイルを置く</p>\n<pre><code class=\"hljs language-toml\">[tools]\nawscli = ['latest']\ngo = ['latest']\n# heroku-cli = ['latest']\nnodejs = ['latest', 'lts']\nruby = ['latest', '2.7.8']\nphp = ['latest', '7.4.33']\nterraform = ['latest', '1.0.5', '1.3.1', '1.3.3', '1.3.4', '1.3.6', '1.3.7']\n[settings]\njobs = 4\nexperimental = true\n</code></pre>\n<ol start=\"5\">\n<li>各種ランタイムをインストール</li>\n</ol>\n<p><code>rtx i</code>とすれば、設定ファイルを見て足りないものを全部インストールしてくれるらしい</p>\n<pre><code class=\"hljs language-shell\">$ source ~/.zshrc\n$ rtx i\n</code></pre>\n<h2>いいところ</h2>\n<ul>\n<li>設定ファイルがXDG Base Directoryに従っている。すっきりしていい。</li>\n<li><code>rtx i</code>とだけ実行すればいいので良いので楽。わかりやすい。</li>\n<li>設定ファイルに複数バージョンを記述できる。</li>\n<li>インストールが早い。並列で実行してくれる。</li>\n<li>シェルの起動時に、設定ファイルにあるのに未インストールのものがあったら警告してくれたりする。</li>\n</ul>\n<h2>なやみ</h2>\n<p>rtxに限らないが、他のツールを使うための基盤となるツールが増えていくと、それのセットアップが面倒になるという問題をはらんでいる。rtxはRust製なので、OSとCPUに合わせたバイナリを手に入れなければならない。</p>\n<p>shelldonに, rtxに, ... 気をつけていても、だんだん増えていく。asdfはシェルスクリプトでできていて、どの端末でも切り替えなく入れられるのでその点はいいのだけど、rtxはさきに書いたメリットがあるので使っていきたいところ。</p>\n<p>妥協案として、dotfilesリポジトリにバイナリをcommitしてしまって、yadmの<a href=\"https://yadm.io/docs/alternates\">alternate files</a>で環境ごとに実行ファイルを切り替えつつ使う、みたいにすると楽なのかもしれないとも思った。私の用途ではarm64のDariwin、x86_64のLinux、arm64のLinuxがあれば十分なはず。</p>\n<p>この場合、バージョンが上がるごとに違うバイナリをcommitすることになるので、dotfilesリポジトリの容量が増えてセットアップ時のダウンロード容量が増えるけど、そこはshallow cloneするなりしていくといい、のだろうか？...。長期的には微妙だろう。</p>\n<p>セットアップ用のシェルスクリプトを育ててもいいが、環境や状況によって必要なものの最低ラインが変わるので、区分けやセットアップ手順が煩雑になっていく。なるべくシンプルに、でも便利にするラインのせめぎ合いである。\n手動で<code>brew install</code>なり<code>curl > </code>なりを、コマンド一つ打てばいいというのはその通りなんですが、開発環境の構築はそれの積み重ねなんですね〜</p>\n<hr>\n<p>最後はrtxにあんまり関係ない話を書いてしまったが、なにはともあれrtxはいまのところ(まだ1日目)快適に使えている、もっとはやく入れればよかった。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-fast\">\n<p>この記事に書かれている「はやい」「早い」はすべて体感です <a href=\"#user-content-fnref-fast\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-05-31T02:15:13+09:00","message":"Post: 「rtxはじめました」\n","hash":"96871b644299ebf0e3eefd959f2e13de70938ec5"}],"date_published":"2023-05-31T02:00:00+09:00","tags":["開発環境","shell","rtx","asdf"]},{"id":"https://memo.yammer.jp/posts/docs-for-developers","url":"https://memo.yammer.jp/posts/docs-for-developers","title":"エンジニアのためのドキュメントライティングを少し読む","summary":"前回に引き続き、全部読まない読書の感想とメモを書いていく。前回記事では1週間で読み切るといいつつ、気づけば2週間経っていることには一旦目を瞑りたい。 2冊目は「エンジニアのためのドキュメントライティング」。 ユーザの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング - Amazon 一週間読書の方法 本の感想に入る前に、どのように一週間読書をやっているかを紹介する。なお、ここで扱う書籍は技術書を中心としたもので、小説などは当てはまらない。 目次から読むところを選ぶ 全部読むことが目的ではなく、短い時間で読みたいところを読むのが目的である。そこで、最初から読み始めない","content_html":"<p><a href=\"/posts/working-effectively-with-legacy-code\">前回</a>に引き続き、全部読まない読書の感想とメモを書いていく。前回記事では1週間で読み切るといいつつ、気づけば2週間経っていることには一旦目を瞑りたい。</p>\n<p>2冊目は「エンジニアのためのドキュメントライティング」。</p>\n<p><a href=\"https://www.amazon.co.jp/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%A8%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E3%81%AE%E6%88%90%E5%8A%9F%E3%82%92%E5%B0%8E%E3%81%8F-%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0-%E3%82%B8%E3%83%A3%E3%83%AC%E3%83%83%E3%83%89%E3%83%BB%E3%83%90%E3%83%BC%E3%83%86%E3%82%A3/dp/4800590833\">ユーザの問題解決とプロダクトの成功を導く エンジニアのためのドキュメントライティング - Amazon</a></p>\n<h2>一週間読書の方法</h2>\n<p>本の感想に入る前に、どのように一週間読書をやっているかを紹介する。なお、ここで扱う書籍は技術書を中心としたもので、小説などは当てはまらない。</p>\n<h3>目次から読むところを選ぶ</h3>\n<p>全部読むことが目的ではなく、短い時間で読みたいところを読むのが目的である。そこで、最初から読み始めないようにしている。ついつい最初から読み始めてしまい、読み切るまでなかなか次の本にいけなくなることを避けるのが狙いである。</p>\n<p>目次のページをざっと眺めて、いくつか章を決めて書き留めておく。そして、決めた章のページに飛んで、そこから読み始める。この時、必ずしも数字の若い章から読み始める必要はなくて、読めそうなら一番読みたいところからどこでも読み始めて良い。</p>\n<p>最初に決めた章を読み切るか、読むのに一定時間が経ったら(ここで言えば1週間)、その本は完全理解()したとして終わりにし、次の本にいく。</p>\n<p>今回でいえば、3, 6, 9章を中心に読んだ。</p>\n<h3>まとめを活用する</h3>\n<p>途中の章から読むといっても、前後の文脈がないと難しいときもある。そういう時は、他の章の末尾にある「まとめ」だけを読む。数ツイート分くらいの分量でまとめてくれているので、他の章を読むための概要と文脈が把握できて、読み進めやすくなる。</p>\n<p>ここでまとめを読むのはあくまで次の章を読むためで、その章の知識を吸収することはまとめでだけでは大抵難しいことには気をつけておきたい。</p>\n<h3>メモをとって、感想をまとめる</h3>\n<p>必須ではないが、感想や学んだことをまとめておきたいので、読みながらページと気になったフレーズをメモしておく(付箋でもよさそう)。読み終わったら、このブログ記事のようにまとめる。</p>\n<p>必須にしてしまうと、読むスピードを落としたり、読む障壁になったりするので、メモや感想は必須とはしない。</p>\n<p>読みながら感想を書くのも、読む速度を律速してしまうので、単語や1文くらいに留める。一週間後には読み終えるので、その場で丁寧にメモしなくても思い出せるだろう(思い出せなかったら大事ではないだろう)とする。</p>\n<hr>\n<p>このような方法で読んでいる。他の方がどのように読書しているかも知りたいので、ぜひアンサーブログで教えていただけると嬉しい。</p>\n<p>以降は実際に読んだ書籍の感想が続く。</p>\n<h2>書籍「エンジニアのためのドキュメントライティング」の感想</h2>\n<p>免責</p>\n<ul>\n<li>上述の通り、この感想記事は本の全部を読んだわけではありません、適宜読み飛ばしながら読んだ人の感想です。</li>\n<li>ドキュメントライティングについて読んだはずなのに、この記事の文章は微妙だな、と思ったら、チラシ裏のブログ記事として見逃してください。</li>\n</ul>\n<h3>全体を通して</h3>\n<p>この本は、全体を通して、ドキュメントを書くときの標準的な方法を、最初から最後まで網羅的に説明している本にみえた(斜め読みだが)。自分の行為が言語化されて体系的に示されるというのは大変よい。これを通して、作業を客観的に捉えられるようになるだろう。</p>\n<p>普段やっていることは言語化されて再認識できた。逆にあんまり得意でないところは、書かれていることを順番にやることで、ドキュメントライティング力を底上げしてきたい。</p>\n<h3>白紙からの脱却</h3>\n<p>白紙を脱してドキュメントを書き始める方法として、以下のような方法が示されている。</p>\n<blockquote>\n<p>これまでに集めた情報をドキュメントの冒頭にリストアップするところから、ドキュメントを作成開始できます。</p>\n<ul>\n<li>読み手</li>\n<li>目的</li>\n<li>コンテンツパターン\n(p72)</li>\n</ul>\n</blockquote>\n<p>文章を書くとき、白紙の状態から何を書くかまでのアウトラインを決めるところが腰が重い。このフェーズでは「文章を書くぞ」ではなく「リストアップするぞ」と思うことにして、書き始めのハードルを下げるのが大切だと思った。</p>\n<h3>どんな書き手でも</h3>\n<p>書き手によらず執筆は難しいものであると、以下のように述べられている。</p>\n<blockquote>\n<p>どんな書き手でも行き詰まります。執筆は創造的で難しい仕事であるため、ときに継続が難しくなりま。行き詰まるのは執筆が下手だからではないのです！アウトライン濁声の最初の段階だったとしても、ドラフトを完成させる途中のどこかであったとしても、行き詰まるのは執筆プロセスの一部です。\n(p85)</p>\n</blockquote>\n<p>このあとに続けて、いくつかのTipsが紹介されている。例えば以下のようなものである。</p>\n<ul>\n<li>完璧であることを意識せずにとにかく考えを書き出す</li>\n<li>TODOコメントを活用し、書きづらいところは飛ばす</li>\n<li>冒頭ではなく書きやすいところから書く</li>\n<li>メディアを変える (テキストエディタを変えてみたり、ホワイトボードに書き起こしたり、音声文字起こしを試してみたりする)</li>\n</ul>\n<p>「どんな書き手でも行き詰まります。」という言葉はとても勇気づけられる。自分自身、文章を書いていてうまく書けずに行き詰まったとき、「自分はあまり執筆が得意でないのかもしれない」と自分の能力の問題にしてしまうことがある。真偽はおいておいて、それは自分が求めているクオリティを一発で導き出そうとしているのが問題なのではないかと思う。</p>\n<p>一発で完璧な完成形を作る必要はない。ソフトウェア開発と同様に、少しずつ改善することで文章を仕上げていけば良いという前提で、執筆に向き合っていきたい。同時にそれは時間がかかることであるので、はやく書き始めるのが大事、大事ですね！</p>\n<p>そこそこのボリュームのある文章を書くとき、箇条書きや各章のタイトルの一覧みたいなものを作って書き始めるのだけど、文章の肉付きがないまま箇条書きを完璧にしていくのは結構難しくて、結構行ったり来たり (文章を書いてみて、やっぱり箇条書きに戻る) ということがよくある。書いてみないとわからないということもあるので、まずは脳内をとにかく書き出して、納得いかない個々の部分を直していくという作業に落とし込んでやっていきたい。</p>\n<h3>最初のドラフトを完成させる</h3>\n<p>記事の下書きとしてひととおりの文章がかけた時に、全体をチェックする方法として、いかのようなものが挙げられている。</p>\n<blockquote>\n<p>完了したかどうか判断するために、次の質問を自分に問いかけてみてください。</p>\n<ul>\n<li>大見出しはドキュメントのゴールを要約しているか？</li>\n<li>複数の見出しによってドキュメントは十分に要約されているか？</li>\n<li>ドラフトは最初から最後まで読み手のニーズに答えているか？</li>\n<li>情報の流れは読み手にとって理解しやすいものか？</li>\n<li>フリクションログで見つけた課題は解決されているか？</li>\n<li>何らかのドキュメントパターンやテンプレートに正しく従っているか？</li>\n<li>全手順が動作することをテストし確かめたか？\n(p91)</li>\n</ul>\n</blockquote>\n<p>ドラフト段階の記事が書き上がるのはとても大きなマイルストーンである。そこまで来れば自分で読み直したりレビューを貰ったりして個々の箇所を改善してけば、文章が完成できる。</p>\n<p>ついつい一通り文章がかけると舞い上がってしまって「できた」という気持ちになってしまう。しかし上に書かれたような項目をチェックリストで用意しておいて、このタイミングで満たされているかを確認しておくことで、次のステップで後戻りを減らせるだろう。とてもよいテクニックに思うので実践していきたい。</p>\n<h2>おわりに</h2>\n<p>というわけで、1(2)週間読書の第二回でした。2回目があってよかった。忙しさを理由に気づいたらついつい2週間になっていたが、来週こそは1週間で区切りたい。</p>","_history":[{"date":"2023-04-21T09:59:57+09:00","message":"Update: 読み直して気になった重複を取り除く\n","hash":"67ce822777ea0137b3aa7a0a9f79f39b5f6eb78d"},{"date":"2023-04-21T09:56:21+09:00","message":"Post: 「エンジニアのためのドキュメントライティングを少し読む」\n","hash":"ffbefd7db3bbb65055bdf5d83704baabeb1d82ce"}],"date_published":"2023-04-21T09:55:17+09:00","tags":["本","テクニカルライティング","一週間読書"]},{"id":"https://memo.yammer.jp/posts/working-effectively-with-legacy-code","url":"https://memo.yammer.jp/posts/working-effectively-with-legacy-code","title":"レガシーコード改善ガイドを少し読む","summary":"1週間だけ読む取り組み 一冊の本を一週間で読めるだけ読むというのをやってみる。 買った本は積まれる一方だし、買いたい本のURLもPocketに溜まるばかり。そしていざ本を読み始めると、最初から頑張って全部読みがちである。そういった習慣を変えるために、1週間で読むのをやめて強制的に次の本に行くという方法を試してみる。 一週間やってみて、全然読みきれないと感じた。ゾーンに入ってバーンと読んでしまえば今回の本などは読み切れるのかもしれないが、そうやって気合いを入れるのではなくて、趣味のプログラミングや雑誌の原稿や仕事のキャッチアップなどをする日々に馴染む範囲で日常的にどんどん読んでいきたいので、この","content_html":"<h2>1週間だけ読む取り組み</h2>\n<p>一冊の本を一週間で読めるだけ読むというのをやってみる。\n買った本は積まれる一方だし、買いたい本のURLもPocketに溜まるばかり。そしていざ本を読み始めると、最初から頑張って全部読みがちである。そういった習慣を変えるために、1週間で読むのをやめて強制的に次の本に行くという方法を試してみる。</p>\n<p>一週間やってみて、全然読みきれないと感じた。ゾーンに入ってバーンと読んでしまえば今回の本などは読み切れるのかもしれないが、そうやって気合いを入れるのではなくて、趣味のプログラミングや雑誌の原稿や仕事のキャッチアップなどをする日々に馴染む範囲で日常的にどんどん読んでいきたいので、この取り組みをやり始めるわけである。</p>\n<p>書籍に載るような文章を書く手間を考えると、本の作者には適当な読み方をして申し訳ない面もある。しかし世の中には読みきれないほどの本があるし、読まないより読む方がいいだろう。</p>\n<h2>レガシーコード改善ガイドを少し読んだ感想</h2>\n<p>今回は一冊目、レガシーコード改善ガイド。本に示されたトピックをいくつか紹介しながら感想を述べる。</p>\n<p><a href=\"https://www.shoeisha.co.jp/book/detail/9784798116839\">https://www.shoeisha.co.jp/book/detail/9784798116839</a></p>\n<h3>変更の基本的な流れ</h3>\n<p>レガシーコードの変更には一連の手順がある。それは次のような手順であると紹介されている。</p>\n<blockquote>\n<ol>\n<li>変更点を洗い出す</li>\n<li>テストを書く場所を見つける</li>\n<li>依存関係を排除する</li>\n<li>テストを書く</li>\n<li>変更とリファクタリングを行う</li>\n</ol>\n<p>(p21)</p>\n</blockquote>\n<p>既存の振る舞いをテストコードにより保護し、デグレしていないことを保証しつつリファクタリングや変更を加える手順である。\n普段やっていること/やろうとしていることではある<sup><a href=\"#user-content-fn-pray\" id=\"user-content-fnref-pray\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>が、改めて言語化されて本の前半で整理されていて再確認になった。</p>\n<h3>検出と分離、接合部と許容点</h3>\n<p>書籍の中では、「検出」「分離」「接合部」「許容点」という語が定義されている。普段なんとなく「この変数の値を検証したい」「この部分を切り出せば良いのではないか」「ここで分割できるな」「ここでモックすればいいな」などと考えているが、これらに言葉が与えられることの意義は大きい。言葉が与えられることで考えがよりわかりやすく整理されて表現され、脳を占有する思考のメモリ領域が圧縮できる。</p>\n<h4>検出と分離</h4>\n<blockquote>\n<p>コードの計算した値にアクセスできない時に、それを検出するために依存関係を排除する(p25)</p>\n</blockquote>\n<blockquote>\n<p>コードをテストハーネスに入れて実行することすらできない時、分離するために依存関係を排除する (pp25-26)</p>\n</blockquote>\n<p>例えば長いトランザクションスクリプトでは、一つのメソッドの中のある変数の挙動をテストしたいことがある。そういったもののコード実行時の挙動を\"検出\"するためにテストコードを書く。テストコードを書くために依存関係を排除しなければならないこともあるだろう。</p>\n<p>例えば実装が特定のソフトウェア外部との接続に依存している場合もあるだろう(ネットワーク通信やファイルシステム、ハードウェアなど)。そういった時には、テストのために、偽装オブジェクト/モックオブジェクトを作ってそれらを利用できるようにすることで\"分離\"する必要がある。</p>\n<h4>接合部と許容点</h4>\n<blockquote>\n<p>接合部(seam)とは、その場所を直接編集しなくても、プログラムの振る舞いを変えることのできる場所である。 (p41)</p>\n</blockquote>\n<blockquote>\n<p>どの接合部も許容点(enabling point)を持つ。許容点では、どの振る舞いを使うかを決定できる。(p41)</p>\n</blockquote>\n<p>オブジェクト指向<sup><a href=\"#user-content-fn-objective\" id=\"user-content-fnref-objective\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>の考えを取り入れた言語では、メソッドをオーバーライドしたり、インタフェースに異なる実装を与えると、コードの字面を一切変えずに挙動を変えることができる。例として、次にPHPのコードを示す。</p>\n<pre><code class=\"hljs language-php\">class Renderer\n{\n  function render(PrintableDevice $device) {\n    $device->print();\n  }\n}\n</code></pre>\n<p>ここで<code>print()</code>メソッドがどのように振る舞うかは、<code>$device</code>インスタンスが何かによって変わる。ここで<code>print()</code>メソッドの呼び出しを接合部、<code>render</code>メソッドの引数による<code>$device</code>の引き渡しを許容点とと呼べる。</p>\n<p>たとえば外部通信をするような依存を持つコードをテストの中だけで実行しないようにできれば、そのコードをテストできる。依存関係を整理するときは、どこかを接合部や許容点とし、本番環境との振る舞いを変えてロジックをテストするコードを書くことになる。</p>\n<h3>もうウンザリです。何も改善できません</h3>\n<p>「もうウンザリです。何も改善できません」は第24章のタイトル。この章は<a href=\"https://twitter.com/UVB_76\">@UVB_76</a>さんにおすすめいただいた箇所で、とてもポエミーで勇気づけられる内容が書かれている。\n2ページくらいですぐに読めるし、本の中の文章をそのまま読むからこそ感じられることがあると思うのでぜひ原文を読んでいただきたい。</p>\n<p>この章では、プログラムを書くことは本来楽しいことや、レガシーコードを抱えていることに落胆せず、毎日挑戦的に仕事を楽しむ方法を思い出させてくれる。やりがいを見つけ、テストによる保護でひどい状況を制御することで前進できると語ってくれている。現時点で私は落胆しているわけではない<sup><a href=\"#user-content-fn-my-work\" id=\"user-content-fnref-my-work\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>のだけど、それでも勇気づけられたし、落胆しそうになった時にまた読みたい。</p>\n<h3>次に読みたいところ</h3>\n<p>テストがかけてしまえば、それにより保護されることで安全に変更を加えることができるだろうが、今の自分には既存のコードを切り分けてテストを書くまでのプラクティスや知識が足りていないところがあると思うので、そういった実践的な部分や内容をより深掘りして読みたい。</p>\n<h2>終わりに</h2>\n<p>「次に読みたいところ」に書いたとおり、次の本に行く前にまだまだ読みたいところだけれど、そうやるとダラダラ読んでしまうだろうから、次の本に行こうと思う。\n最初なのでブログを書くのにも気合が入ってしまった。次からはもう少し肩の力を抜いて、なるべく負荷にならない範囲で記録を残していきたい。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-pray\">\n<p>といいつつ、横着して、この本が横にある時に「編集して祈る」をやりそうになり、同僚とそのことを笑っていました。結局テストを書きました。肝に銘じます。(「編集して祈る」は書籍の中でテストを書いてリファクタリングや変更を繰り返す方法と対比され、よくない方法として紹介されている言葉です。) <a href=\"#user-content-fnref-pray\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-objective\">\n<p>オブジェクト指向とはなんぞやというのは脇に置いておきます。許してください。 <a href=\"#user-content-fnref-objective\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-my-work\">\n<p>レガシーという言葉は結構気を使う単語で、私の仕事がレガシーにまみれているような誤解を与えそうなので一応補足を書いておきます。もちろん大きかったり歴史の長いソフトウェアやサービスでは相対的に手が届きづらくなるコンポーネントや巨大化したコンポーネントも扱うけれども、それらが一定コントロールされた/したうえで最新の手法を取り入れつつチャレンジングな仕事ができる環境にいると思っています。 <a href=\"#user-content-fnref-my-work\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-04-07T10:20:29+09:00","message":"Fix: 「本への参照URLを後ろの方にもっていく」\n","hash":"ce37ffb9ff3d312dac7d4a61a4ead3a5bda33c80"},{"date":"2023-04-07T10:10:01+09:00","message":"Post: 「レガシーコード改善ガイドを少し読む」\n","hash":"91c1b24ba23c6ae026a15e7eaa7e631d8bbf98d3"}],"date_published":"2023-04-07T09:41:21+09:00","tags":["雑記","ソフトウェア開発","本","一週間読書"]},{"id":"https://memo.yammer.jp/posts/phperkaigi2023-day2","url":"https://memo.yammer.jp/posts/phperkaigi2023-day2","title":"PHPerKaigi2023が最高だった","summary":"昨日のPHPerKaigi2023最終日、自分はLTをしたのですが、登壇以外にもたくさんの体験をして本当に濃い一日でした。 Day1のブログ: PHPerKaigi2023に参加しています - memo.yammer.jp LTで登壇 LTでペンライトを振るのも振られるのも楽しんだり。 登壇した内容は、PHP Conference 2022で出題したクイズの裏話として、当時の問題を振り返りながら、何を考えて作っていたか/作るならどうすべきかでした。 クイズのことを覚えていた方もたくさんいらっしゃったようで、嬉しい限りです。 https://twitter.com/yammerjp/status","content_html":"<p>昨日のPHPerKaigi2023最終日、自分はLTをしたのですが、登壇以外にもたくさんの体験をして本当に濃い一日でした。</p>\n<p>Day1のブログ: <a href=\"https://memo.yammer.jp/posts/phperkaigi2023-day1\">PHPerKaigi2023に参加しています - memo.yammer.jp</a></p>\n<h3>LTで登壇</h3>\n<p>LTでペンライトを振るのも振られるのも楽しんだり。\n登壇した内容は、PHP Conference 2022で出題したクイズの裏話として、当時の問題を振り返りながら、何を考えて作っていたか/作るならどうすべきかでした。</p>\n<p>クイズのことを覚えていた方もたくさんいらっしゃったようで、嬉しい限りです。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">LTの発表資料です！答えは最後のスライドにて<br>「クイズを作ってPHPに親しむ」<a href=\"https://t.co/ef8QQPi3we\">https://t.co/ef8QQPi3we</a><a href=\"https://twitter.com/hashtag/phperkaigi?src=hash&#x26;ref_src=twsrc%5Etfw\">#phperkaigi</a> <a href=\"https://twitter.com/hashtag/a?src=hash&#x26;ref_src=twsrc%5Etfw\">#a</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1639520377784397824?ref_src=twsrc%5Etfw\">March 25, 2023</a></blockquote></p>\n<!--\n\nhttps://speakerdeck.com/yammerjp/make-quizzes-and-get-familiar-with-php\n\n-->\n<h3>ランチ</h3>\n<p>Day1の夜にみたツイートを発端に、初めてお話しするPHPerの方々とランチに行きました。盛り上がっている勢いとコミュニティの暖かさと言い出した人と乗ってきた人、それらが揃って生まれたありがたい時間でした。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/phperkaigi?src=hash&#x26;ref_src=twsrc%5Etfw\">#phperkaigi</a> 明日のお昼ご一緒出来るペチパーの方いらっしゃいませんか！(当方初ペチパー会議です)</p>— たま (@tama_php) <a href=\"https://twitter.com/tama_php/status/1639206526215946242?ref_src=twsrc%5Etfw\">March 24, 2023</a></blockquote></p>\n<h3>聞いた発表</h3>\n<p>今日聞いた発表はこちら。感想は別の記事かフィードバックで書くことにします。</p>\n<ul>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/98ad84b9-df03-4449-ab25-377761945005\">実例から学ぶ変化に強いテーブル設計 - 責務の分解とRDBMSの上手い使い方</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/e68c1ed6-8fb4-4ff9-9d99-99214d9dba8d\">いろいろなフレームワークの仕組みを index.php から読み解こう</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/ec6b9d08-f32e-4071-a81b-0ccdc0fc644f\">PHPの配列の内部実装について学びたくなった。</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/52f6eb96-bcff-4fcb-9439-2a5d7cb2cfde\">【実録】「PHP_CodeSniffer」で始める快適コードレビューライフ</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/d3fc9ca1-1342-4a91-9113-7c934d072751\">他言語と比較して今こそ理解しよう！目指せ、列挙型マスター！　～なりたいな ならなくちゃ 絶対なってやる！～</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/4f172d63-d9e2-42c2-9805-7a0b94191abe\">PsySHを使った効率的なデバッグ方法について</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/56e27797-b4fa-49d2-9352-0f2660451dc3\">PHP8.xの新機能を使ってよい良いコードを書こう！</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/e490a63f-abd9-498b-a729-05e1d3ecef66\">可能な限り確実にmkdirを成功させるには</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/033ee700-0a8e-44c5-9d30-2cb7e073712f\">あなたはPhpStormくんのショートカットキーを何個知っている？</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/9e758cbe-9a7a-4d3f-83a9-64f8a2d9a42d\">初めてIT勉強会を開催するなら知っておくべき5選！〜PHP勉強会@東京や社内勉強会の運用からの知見〜</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/d9c2fd8a-b421-4b25-98eb-dccb1e6ef00d\">PHPマジックメソッドクイズ！</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/e98b7956-6652-4fd5-817b-8df9ba1dd9e1\">フレームワークが存在しない時代からのレガシープロダクトを、Laravelに”載せる”実装戦略</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/b7176a73-8b73-4a4d-9f94-603c68bc3d88\">PHPのARM向け最適化の中身を見てみた</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/07411094-2fc1-4abd-904f-9470454531e6\">PHPerチャレンジ解説LT - サイボウズ株式会社</a></li>\n</ul>\n<p>このほか、すこしの時間ですがポスターセッションも読ませていただきました！</p>\n<h3>カンファレンスの廊下と懇親会</h3>\n<p>カンファレンスの廊下や懇親会、さらに2次会で、たくさんの人とお話ししました。いや本当にここに書ききれないくらいたくさんの出会いがあって、とても楽しい時間でした。自分から話しかけると、思っているより気さくに話に応じていただいたり、自分のあだ名をみて声をかけていただけることもあって、しょうもない話から本音の話までたくさんおはなしできました。</p>\n<h3>PHPerKaigiコミュニティと「熱」</h3>\n<p>PHPerKaigi参加以前、他のイベントに行った時にPHPerKaigiの札をかけている人に憧れを抱いたり、PHPerKaigiの話を熱く語っている人を見て「カンファレンスにここまで熱くなれるのいいなあ」と思っていました。</p>\n<p>初めて参加し、その熱のわけを体感しました。「これがPHPerKaigiなのか」ということを強く感じました。そう設計されているからか、コミュニティの人々の方向性からか、その両方からか、「自分が見ているだけ」「聞いているだけ」というのとは全く違った、双方向のコミュニケーションの生まれる、経験したことのない体験でした。</p>\n<p>物理的なカンファレンスが、PHPerKaigiが、こんなに濃いものなのかと感じた背景には、21卒でコロナ禍に働き始めたのでオンラインでの体験が当たり前になっていたことも関係しているかもしれません。</p>\n<p>あわせて読みたい:<a href=\"https://soudai.hatenablog.com/entry/2023/03/25/170030\">PHPerKaigi2023で感じた、たった1つの真実 - そーだいなるらくがき帳</a></p>\n<h3>精進</h3>\n<p>技術的には、自分の至らなさを感じる場面が沢山ありました。ただ、至らないと感じれるくらいには目線が広がったとも思えるので、日々精進していくしか無いという気持ちです。中身の伴う質の高いアウトプットをできるように、技術力を高めて仕事や趣味で活かし鍛えていくというのを地道にやっていかねば。</p>\n<hr>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">楽しい時間とたくさんの出会いをありがとうございました！ <a href=\"https://twitter.com/hashtag/phperkaigi?src=hash&#x26;ref_src=twsrc%5Etfw\">#phperkaigi</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1639648139501260801?ref_src=twsrc%5Etfw\">March 25, 2023</a></blockquote></p>","_history":[{"date":"2023-03-26T17:51:00+09:00","message":"Post: 「PHPerKaigi2023が最高だった」\n","hash":"95aa2265624e6d31239502a251b9990af2ceceed"}],"date_published":"2023-03-26T17:45:00+09:00","tags":["カンファレンス","PHP","PHPerKaigi","日記"]},{"id":"https://memo.yammer.jp/posts/phperkaigi2023-day1","url":"https://memo.yammer.jp/posts/phperkaigi2023-day1","title":"PHPerKaigi2023に参加しています","summary":"昨日から始まっているPHPerKaigi、昨日はオンライン、今日は物理で参戦しています。 https://twitter.com/yammerjp/status/1639071029611089920?s=61&t=i0aLgTjxKQNCLbbldPH3gA 初めてのPHPerKaigiですが、各発表やLTの独特の空気感がとても新鮮で、とても楽しんで参加できました。 PHPer界隈のTwitterでよく見るぞ、という方の話を聞けたり、なんなら物理的に話すなどできて、カンファレンスよいなあという気持ちに浸っています。 聞いたセッションはこちら。それぞれ細かい感想はフィードバックやまた別の記事で","content_html":"<p>昨日から始まっているPHPerKaigi、昨日はオンライン、今日は物理で参戦しています。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">これは、PHPerが増殖していると噂の謎の駅... <a href=\"https://twitter.com/hashtag/phperkaigi?src=hash&#x26;ref_src=twsrc%5Etfw\">#phperkaigi</a> <a href=\"https://t.co/uSM1BqewIx\">pic.twitter.com/uSM1BqewIx</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1639071029611089920?ref_src=twsrc%5Etfw\">March 24, 2023</a></blockquote></p>\n<p>初めてのPHPerKaigiですが、各発表やLTの独特の空気感がとても新鮮で、とても楽しんで参加できました。</p>\n<p>PHPer界隈のTwitterでよく見るぞ、という方の話を聞けたり、なんなら物理的に話すなどできて、カンファレンスよいなあという気持ちに浸っています。</p>\n<p>聞いたセッションはこちら。それぞれ細かい感想はフィードバックやまた別の記事で書くことにしますが、どれも面白く楽しく聞かせていただきました！</p>\n<ul>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/280706e0-7158-4237-8202-c9d64330b96f\">PHPで学ぶ\"Cacheの距離\"の話</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/90c0d39b-108b-4104-b93e-f7e0711003c6\">Win Testing Trophy Easily / テスティングトロフィーを獲得する</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/7e212cb2-be37-43e8-b6ee-5236d259fcbf\">時間を気にせず普通にカンニングもしつつ ISUCON12 本選問題を PHP でやってみる</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/95e4dd94-5fc7-40fe-9e1a-230e36404cbe\">詳説「参照」：PHP 処理系の実装から参照を理解する</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/86b0f058-2b05-4a06-a7d3-825aec7997bb\">PHP Parserで学ぶPHP</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/b9414c59-cb8f-4654-84c7-ade44744295e\">安全にプロセスを停止するためにシグナル制御を学ぼう！</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/d3084a8f-89b5-48d6-8a81-59c460b3b3e0\">Rector ではじめる \"運用を止めない\" PHP アップグレード</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/dc54af9b-f879-47b6-9737-12ae6e84bf1d\">CodeCrafters にチャレンジして PHP で Redis を作ってみる</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/4a67cc68-83f0-492d-86ca-54304fc256c8\">パフォーマンスを改善せよ！大規模システム改修の仕事の進め方</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/b84ab856-7c83-46a8-829e-84adbc1e7921\">不幸を呼び寄せる命名の数々　 ～君はそもそも何をされてる方なの？～</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/f4d1dc93-718b-44c7-8be2-edd66a253e630\">PHPで構築したWordPressをObservabilityツールで見てみる</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/8e702c28-702b-4033-a16b-1481147be718\">stdClassって一体何者なんだ？！</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/f90ff566-8535-4a0e-8ff2-99f3c8cc3f66\">特徴、魅力を知って、各PHPフレームワークを使いこなそう！</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/f06e249f-ed18-4fde-b072-32b94131bc7f\">セキュリティテストでより安心できるリリースにしよう</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/5d3c8e21-b7f1-44c5-9088-f0c7769452f7\">PeachPieを使ってPHPを.NETで動かしてみた</a></li>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/87d825dd-eba2-4fe9-8945-cf83d8b845e5\">mpyw共同登壇：“推測するな、計測せよ“をNew Relic x Laravelで実践</a></li>\n</ul>\n<p>明日はLTに登壇します！今日の盛り上がりに少しビビっている面もありますが、うろたえずにやっていくぞ！もし時間があればぜひ聞きに来てください。</p>\n<ul>\n<li><a href=\"https://fortee.jp/phperkaigi-2023/proposal/d2d5fcfe-1661-4901-81d0-df071fa63bab\">クイズを作ってPHPに親しむ</a></li>\n</ul>\n<p>内容は、PHP Conference2022のPHPクイズの裏話という側面もあります。知らない方も楽しめるように、それを知っている方はもっと楽しめるように作ったつもりです。</p>\n<p>それでは会場で、オンラインで、また明日お会いしましょう！\n1日会場にいる予定なので、知っている方も初めてお会いする方もどなた様も話しかけてくれると嬉しいです。</p>\n<hr>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">これが噂の… <a href=\"https://twitter.com/hashtag/phperkaigi?src=hash&#x26;ref_src=twsrc%5Etfw\">#phperkaigi</a> <a href=\"https://twitter.com/hashtag/a?src=hash&#x26;ref_src=twsrc%5Etfw\">#a</a> <a href=\"https://t.co/rkX26kAwXe\">pic.twitter.com/rkX26kAwXe</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1639174451249160192?ref_src=twsrc%5Etfw\">March 24, 2023</a></blockquote></p>\n<p>LT、謎の盛り上がりだったな..</p>","_history":[{"date":"2023-03-26T17:51:00+09:00","message":"Post: 「PHPerKaigi2023が最高だった」\n","hash":"95aa2265624e6d31239502a251b9990af2ceceed"},{"date":"2023-03-24T23:28:28+09:00","message":"Post: 「PHPerKaigi2023に参加しています」\n","hash":"1735754e407371b59294b92336ffaedd5a0a2624"}],"date_published":"2023-03-24T23:23:11+09:00","tags":["カンファレンス","PHP","PHPerKaigi","日記"]},{"id":"https://memo.yammer.jp/posts/software-design-202303","url":"https://memo.yammer.jp/posts/software-design-202303","title":"ターミナルをカスタマイズする Software Design連載 開発環境 探求の道 第3回","summary":"本日2/17発売の月刊誌 Software Design 2023年3月号に、連載第3回目の記事を寄稿しました。 今回は「ターミナルをカスタマイズする」と題して、Alactirryとtmuxの基本的な使い方を紹介しています。UnixやLinuxの技術者がふれる時間の長いターミナルを使いこなすことで、快適に作業できることを目指す内容です。 ぜひ書店でお買い求めください。 ","content_html":"<p>本日2/17発売の月刊誌 <a href=\"https://gihyo.jp/magazine/SD/archive/2023/202303\">Software Design 2023年3月号</a>に、連載第3回目の記事を寄稿しました。</p>\n<p>今回は「ターミナルをカスタマイズする」と題して、Alactirryとtmuxの基本的な使い方を紹介しています。UnixやLinuxの技術者がふれる時間の長いターミナルを使いこなすことで、快適に作業できることを目指す内容です。</p>\n<p>ぜひ書店でお買い求めください。</p>\n<p><img src=\"https://blob.yammer.jp/software-design-202303.jpg\" alt=\"Software Design 2023年3月号\"></p>","_history":[{"date":"2023-02-17T11:14:37+09:00","message":"Create software-design-202303.md\n","hash":"3916c55c5fa81592d6052287175bf3dfb88d85cc"}],"date_published":"2023-02-17T11:20:00+09:00","tags":["SoftwareDesign","dotfiles","ターミナル","Alacritty","tmux","開発環境"]},{"id":"https://memo.yammer.jp/posts/smart-keyboard-folio","url":"https://memo.yammer.jp/posts/smart-keyboard-folio","title":"Smart Keyboard Folio を買った(2023年2月)","summary":"(2024/09/22記)2023年2月ごろに、Smarty Keyboard Folioを買って、その感想を書いた記事が下書きに残っていたので公開する。最近はあんまり持ち歩いていないんだけど、一時期はだいたいiPadだけを持ち歩いていて、とても気に入って使っていた。dotfilesの連載記事の寄稿も、何割かはiPad + Smarty Keyboard Folioを使ってsshしてVimで書いていたはず。結構快適だった。 iPad Air 4の機動力を上げたくて、Smart Keyboard Folioを買った。 購入の動機 コンパクトな自作キーボードをiPadと一緒に持ち歩いて作業するとい","content_html":"<p>(2024/09/22記)2023年2月ごろに、Smarty Keyboard Folioを買って、その感想を書いた記事が下書きに残っていたので公開する。最近はあんまり持ち歩いていないんだけど、一時期はだいたいiPadだけを持ち歩いていて、とても気に入って使っていた。dotfilesの連載記事の寄稿も、何割かはiPad + Smarty Keyboard Folioを使ってsshしてVimで書いていたはず。結構快適だった。</p>\n<hr>\n<p>iPad Air 4の機動力を上げたくて、Smart Keyboard Folioを買った。</p>\n<h2>購入の動機</h2>\n<p>コンパクトな自作キーボードをiPadと一緒に持ち歩いて作業するということはときどき試していた。しかし、どうしてもiPadと分離しているので、ケーブルを接続するのが煩雑だし、膝の上などの不安定な場所では広げづらく、これらの点ではノートパソコンの使い勝手にかなわないと感じていた。<sup><a href=\"#user-content-fn-self-built\" id=\"user-content-fnref-self-built\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>これらの課題感を解消する目的で買ったのが、Smart Keyboard Folioである。特にiPad Air4はカメラが1つしかないので、2018年ごろに発売された第一世代のものが使え、定価より安く買えるとのことだった。</p>\n<h2>いいところ</h2>\n<ul>\n<li>ケーブルを繋げずに外部キーボードが使える</li>\n<li>iPadと磁石で結合しているので、机の上などの安定した箇所でなくてもつかえる</li>\n<li>薄い</li>\n<li>軽くてコンパクト</li>\n</ul>\n<p>iPadと磁石でしっかりくっつくということはとてもよい。他の一般のキーボードにはない利点で、膝の上で使ううえではとても役に立つ。</p>\n<p>キーボードが薄いので、パームレストなしで良いところもよい。</p>\n<p>キーボード自体が軽くてコンパクトなこともよい。iPadがはいるボディバッグを持っているのだが、これと合わせて出かけるのが楽しみだ。</p>\n<h2>満足できないところ</h2>\n<ul>\n<li>キータッチが重い (特にスペースキーが押しづらい)</li>\n<li>パームレストが無い</li>\n<li>キーボードがたわむ</li>\n<li>配列のカスタマイズの幅</li>\n<li>ESCキーがない</li>\n</ul>\n<p>買ってみたはいいものの、膝の上でのタイピング体験はあまり良くない。一番はキータッチが気に入らない。結構硬いのでしっかり押し込まないと反応しない。特にスペースキーが如実で、押したつもりなのに反応していないこともある。他のキーを押していても指先が疲れる感じがある。</p>\n<p>パームレストが無いことも気になる。膝の上にノートパソコンを載せてタイピングしているときは、実はパームレストに手のひらを乗せることでキーボードを固定していた。なので、安定感に欠ける。</p>\n<p>さらに、キーボード自体がたわむのも気になる。膝の上に乗せた時の安定感が、やはりノートパソコンに比べて欠けてしまう。</p>\n<p>キー配列のなかで、Escキーが無いことも気になるが、これはユースケースが特殊なので仕方がないだろう。iPadには修飾キーをリマップする機能が付いているので、いくらかカバーできるものの、CtrlとEscとShiftとTabキーを押しやすい位置に配置するにはキーやリマップ機能が足りない。これは自作キーボードと比較してしまうとしょうがない部分ではある。</p>\n<p>これらのいくらかは事前に展示されている商品を試すなどして薄々わかっていたところではあるが、キーのリマップなどは、US配列とVimで使ってみないとわからないところもあるので、まあこんなもんかなという感じ。</p>\n<h2>おわりに</h2>\n<p>いろいろ書いたが、やはり収まりの良さとコンパクト感はすばらしいし、使い心地は慣れれば解決する側面もあると思うので、しばらく持ち歩いて使ってみることとしたい。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-self-built\">\n<p>自作キーボード自体はとても気に入っています。iPadを不安定な場所で使うというユースケースには、一般に外付けのキーボードは合わないということでした。 <a href=\"#user-content-fnref-self-built\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2024-10-07T11:05:44+09:00","message":"最近の話題でもないのでソート順は過去に\n","hash":"f55e09fbff82ca07950fa8a713dfd54355204f9b"},{"date":"2024-09-23T00:03:04+09:00","message":"下書きに溜まっていたものを、記事として追加\n","hash":"4d4e5e542e3fdac52c900a62d9dc62dc041631ac"}],"date_published":"2023-02-01T23:43:02+09:00","tags":["iPad","keyboard","ガジェット"]},{"id":"https://memo.yammer.jp/posts/software-design-202302","url":"https://memo.yammer.jp/posts/software-design-202302","title":"シェルをカスタマイズする Software Design連載 開発環境 探求の道 第2回","summary":"本日発売の月刊誌Software Design 2023年2月号に、連載記事の第2回を寄稿しました。 開発環境 探求の道 連載「開発環境 探求の道」は、UnixやLinux上で、自分好みの開発環境をつくり、探求する道を紹介する連載です。 連載の中では、テキストエディタやシェルやターミナルに関するツールを紹介し、インストールからカスタマイズまで、手元で試せるような記事となっています。 シェルをカスタマイズする 第2回「シェルをカスタマイズする」では、bashとzshの設定ファイルを編集するのが主な内容となっています。 関連してgitのエイリアス機能やfzfにも触れます。 シェルの設定ファイルを編","content_html":"<p>本日発売の月刊誌<a href=\"https://gihyo.jp/magazine/SD/archive/2023/202302\">Software Design 2023年2月号</a>に、連載記事の第2回を寄稿しました。</p>\n<h2>開発環境 探求の道</h2>\n<p>連載「開発環境 探求の道」は、UnixやLinux上で、自分好みの開発環境をつくり、探求する道を紹介する連載です。\n連載の中では、テキストエディタやシェルやターミナルに関するツールを紹介し、インストールからカスタマイズまで、手元で試せるような記事となっています。</p>\n<h2>シェルをカスタマイズする</h2>\n<p>第2回「シェルをカスタマイズする」では、bashとzshの設定ファイルを編集するのが主な内容となっています。\n関連してgitのエイリアス機能やfzfにも触れます。</p>\n<p>シェルの設定ファイルを編集したことがない方や、コピペして貼り付けたことはあるが、中に書かれていることが実はよくわかっていないという方をはじめとして、シェルに興味のある方にぜひ読んでいただきたい内容です。</p>\n<p>記事の中ではシェルスクリプトの文法も含めて紹介しており、記載した設定例をもとに、自分の環境にあうように設定を自分でカスタマイズする第一歩になればと思って記事を書きました。</p>\n<h2>おわりに</h2>\n<p>Software Design 2023年2月号は「開発環境 探求の道」以外にも、多数の連載や特集があります。今号の第一特集はドメイン設計に関するもので、第二特集はログに関するものです。</p>\n<p>どちらも気になるので、私も読むのを楽しみにしています。ぜひ、お近くの書店またはWebサイトからお買い求めください。</p>","_history":[{"date":"2023-01-18T22:13:45+09:00","message":"Post:「シェルをカスタマイズする Software Design連載 開発環境 探求の道 第2回」\n","hash":"aea2d657c92535cebb0091eb4a6de019bdd41c0c"}],"date_published":"2023-01-18T22:20:00+09:00","tags":["SoftwareDesign","dotfiles","Shell","bash","zsh","開発環境"]},{"id":"https://memo.yammer.jp/posts/how-to-install-alacritty","url":"https://memo.yammer.jp/posts/how-to-install-alacritty","title":"Ubuntu DesktopにAlacrittyをインストールする","summary":"Alacrittyは、公式ではLinux向けのバイナリが配布されていないので、どこかから入手するか、自分でビルドする必要があります。 以下では、Ubuntu Desktop 22.04上でビルドし、インストールする方法を紹介します。なお、この記事の内容は2023/01/16時点のものです。また、公式に提供されているインストール用ドキュメントを参考にしています。 簡易的に利用するとき ビルドされた実行ファイルをPATHの通った場所に配置するのみで良い場合は、こちらの方法を実行します。デスクトップのランチャー上にアイコンを表示したり、マニュアルをインストールした場合は、後述の「本格的に利用する」を","content_html":"<p><a href=\"https://alacritty.org\">Alacritty</a>は、公式ではLinux向けのバイナリが配布されていないので、どこかから入手するか、自分でビルドする必要があります。</p>\n<p>以下では、Ubuntu Desktop 22.04上でビルドし、インストールする方法を紹介します。なお、この記事の内容は2023/01/16時点のものです。また、<a href=\"https://github.com/alacritty/alacritty/blob/master/INSTALL.md\">公式に提供されているインストール用ドキュメント</a>を参考にしています。</p>\n<h3>簡易的に利用するとき</h3>\n<p>ビルドされた実行ファイルをPATHの通った場所に配置するのみで良い場合は、こちらの方法を実行します。デスクトップのランチャー上にアイコンを表示したり、マニュアルをインストールした場合は、後述の「本格的に利用する」を参考にしてください。</p>\n<pre><code class=\"hljs language-shell\"># Alacrittyのビルドに必要なaptパッケージをインストールする\n$ sudo apt-get install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 curl\n# https://rustup.rs/ に従い、Rustの開発ツールをインストールする\n# 実行するとインストールオプションを選択する画面が現れるので、「1) Proceed with installation (default)」を選択する (1を入力後にエンターを押す)\n$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n# cargoコマンドを利用するために、シェルの設定ファイルを再読み込みする\n$ source ~/.bashrc\n$ cargo install alacritty\n</code></pre>\n<p>完了したら、シェル上でコマンド<code>alacritty</code>を実行することで、Alacrittyを起動できます。</p>\n<p><img src=\"https://blob.yammer.jp/how-to-install-alacritty-run.png\" alt=\"コマンドでAlacrittyを起動する\"></p>\n<h3>本格的に利用するとき</h3>\n<p>マニュアルをインストールしたり、デスクトップのランチャー上にアイコンを表示したい場合は、以下の手順でインストールします。</p>\n<h4>(必須) ビルド・インストールする</h4>\n<p>シェル上で以下のコマンドを順番に実行してください。ビルドに必要なツールをインストールし、ソースコードを入手してから、ビルドします。</p>\n<pre><code class=\"hljs language-shell\"># Alacrittyのビルドに必要なaptパッケージをインストールする\n$ sudo apt-get install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 curl git\n\n# https://rustup.rs/ に従い、Rustの開発ツールをインストールする\n#   実行するとインストールオプションを選択する画面が現れるので、1を入力後にEnterキーを押す\n#   (「1) Proceed with installation (default)」を選択する)\n$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# cargoコマンドを利用するために、シェルの設定ファイルを再読み込みする\n$ source ~/.bashrc\n\n# Alacrittyのソースコードを入手する\n$ git clone https://github.com/alacritty/alacritty.git ~/alacritty\n$ cd ~/alacritty\n\n# バイナリをPATHの通った場所に配置する\n$ cp target/release/alacritty /usr/local/bin \n</code></pre>\n<p><code>/usr/local/bin</code>に配置できたら、シェル上で<code>alacritty</code>コマンドを起動すると、Alacrittyが起動し、ウィンドウが現れることが確認できます</p>\n<p><img src=\"https://blob.yammer.jp/how-to-install-alacritty-run.png\" alt=\"コマンドでAlacrittyを起動する\"></p>\n<h4>(任意) デスクトップのランチャー上にアイコンを表示する</h4>\n<p>デスクトップのランチャー上にAlacrittyを表示するには、シェル上で、以下のコマンドを順番に実行してください。</p>\n<pre><code class=\"hljs language-shell\"># デスクトップのランチャー上にアイコンを表示し、GUI環境でクリックするだけで起動できるようにする\n$ cd ~/alacritty\n$ sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg\n$ sudo desktop-file-install extra/linux/Alacritty.desktop\n$ sudo update-desktop-database\n</code></pre>\n<p>完了すると、GUIキー (キーボードによっては、WindowsキーやCommandキー) を押下したあと、<code>Alacritty</code>とタイプすると、Alacrittyのアイコンが表示されます。クリックするとAlacrittyが起動します。</p>\n<p><img src=\"https://blob.yammer.jp/how-to-install-alacritty-icon.png\" alt=\"Alacrittyのアイコンが表示される\"></p>\n<h4>(任意) マニュアルをインストールする</h4>\n<p>Alacrittyのマニュアルをインストールするには、シェル上で、以下のコマンドを順番に実行してください。</p>\n<pre><code class=\"hljs language-shell\"># manコマンドで、Alacrittyのマニュアルを閲覧できるようにする\n$ cd ~/alacritty\n$ sudo mkdir -p /usr/local/share/man/man1\n$ gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null\n$ gzip -c extra/alacritty-msg.man | sudo tee /usr/local/share/man/man1/alacritty-msg.1.gz > /dev/null\n</code></pre>\n<p>完了すると、コマンド<code>man alacritty</code>で、Alacrittyのマニュアルを閲覧できます。</p>\n<p><img src=\"https://blob.yammer.jp/how-to-install-alacritty-man.png\" alt=\"Alacrittyのマニュアルが閲覧できる\"></p>\n<h3>(任意) bash補完を利用可能にする</h3>\n<p><code>alacritty</code>コマンドをbash上で実行するとき、Tabキーで補完をするには、以下のコマンドを順番に実行してください。</p>\n<pre><code class=\"hljs language-shell\"># bash上で、alacrittyコマンドの補完をできるようにする\n$ mkdir -p ~/.bash_completion\n$ cp extra/completions/alacritty.bash ~/.bash_completion/alacritty\n$ echo \"source ~/.bash_completion/alacritty\" >> ~/.bashrc\n</code></pre>\n<p>完了すると、bash上で<code>alacritty </code>と入力した後にTabキーを押すと、補完候補が表示されるようになります。</p>\n<p><img src=\"https://blob.yammer.jp/how-to-install-alacritty-completion.png\" alt=\"Alacrittyのbash補完が表示される\"></p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2023-01-16T02:01:42+09:00","message":"Post: 「Ubuntu DesktopにAlacrittyをインストールする」\n","hash":"89de476984ab857b4c56fb780d0fa43bf509f833"}],"date_published":"2023-01-16T01:54:41+09:00","tags":["Ubuntu","Linux","Alacritty"]},{"id":"https://memo.yammer.jp/posts/software-design-202301","url":"https://memo.yammer.jp/posts/software-design-202301","title":"連載「最強の開発環境 探求の道」をSoftware Designではじめます","summary":"本日、12月16日(金)発売のSoftware Design 2023年1月号より、表題のとおり「最強の開発環境 探求の道」という連載をはじめます。 全国の書店やネットで購入いただけますので、よろしければお手にとって読んでいただけると嬉しいです。 連載の内容とねらい 連載では、LinuxやUNIXの環境における、シェル、ターミナル、エディタ、dotfilesなどの使い方やカスタマイズを扱います。 これらに興味がある方におすすめです。 また、コマンドラインの環境に詳しくない/なんとなく使っているが、これから使いこなせるようになりたい方にも読んでいただきたい内容となっています。 記事の中では実際に","content_html":"<p>本日、12月16日(金)発売の<a href=\"https://gihyo.jp/dp/ebook/2022/978-4-297-12740-4\">Software Design 2023年1月号</a>より、表題のとおり「最強の開発環境 探求の道」という連載をはじめます。\n全国の書店やネットで購入いただけますので、よろしければお手にとって読んでいただけると嬉しいです。</p>\n<h2>連載の内容とねらい</h2>\n<p>連載では、LinuxやUNIXの環境における、シェル、ターミナル、エディタ、dotfilesなどの使い方やカスタマイズを扱います。\nこれらに興味がある方におすすめです。\nまた、コマンドラインの環境に詳しくない/なんとなく使っているが、これから使いこなせるようになりたい方にも読んでいただきたい内容となっています。</p>\n<p>記事の中では実際に試せる設定例も示しますし、その解説も、できる限りあわせて行います。\n開発環境の目的や用途は十人十色ですので、自分にあったものを構築できるよう、設定の内容を理解していただけるよう努めます。\n設定をコピペして動かすのももちろんよいのですが、その内容を理解すると、ご自身で応用でき、カスタマイズの幅が広がるでしょう。</p>\n<p>1月号から数回にわたって、トピックごとに開発環境の構成要素を説明する形で連載を進めます。\n初回は、Gitを用いたdotfilesの管理構成の構築です。</p>\n<p>LinuxやUnixの開発環境を構築するとき、dotfilesを管理していればカスタマイズがより捗ります。\n連載の次回以降に扱うカスタマイズも、初回の管理構成のうえで試すことで、Gitによる履歴管理の恩恵に預かれるでしょう。\nこれから設定を書く方も、すでに何らかの設定がある方も、dotfilesをGitで管理して、自分好みの開発環境の探求の道を一緒に歩んでいきましょう。</p>\n<p><img src=\"https://blob.yammer.jp/software-design-202301.jpg\" alt=\"Software Design 2023年1月号\"></p>\n<h2>おわりに</h2>\n<p>私の連載ももちろん読んでいただきたいですが、ほかにも連載記事が多数収録されています。\n私自身、前号に続く他の連載記事を読むのが楽しみです。\n「魅惑の自作シェルの世界」の第2回や「再発見！ デスクトップLinux入門」の最終回などを始めとして、じっくり読ませていただきます。</p>\n<p>連載だけでなく、特集「アルゴリズムを使いこなしたい」「PostgreSQL 15の最新機能」や、特別付録の仕事猫ステッカー第2弾も魅力的ではありませんか。\nぜひお近くの書店で手にとってみてください。</p>","_history":[{"date":"2022-12-16T09:53:49+09:00","message":"Post: 「連載「最強の開発環境 探求の道」をSoftware Designではじめます」\n","hash":"ab703518c0abab7fa7bd99e46687c25e98c3b546"}],"date_published":"2022-12-16T09:50:00+09:00","tags":["SoftwareDesign","dotfiles","Shell","bash","zsh","開発環境"]},{"id":"https://memo.yammer.jp/posts/20221214","url":"https://memo.yammer.jp/posts/20221214","title":"日報 インターネット出張公開版","summary":"GMOペパボ EC Advent Calendar 2022の14日目は、「日報 インターネット出張公開版」です。私やんまーが、12/14の日報を書きます。 13日目はよぴさんの「半分営業半分コンサルみたいな職種からEC業界に転職して感じたこと　〜よぴ的営業マインド語りも添えて〜」でした。 記事の中に出てきた「お客さんの理想とサービスでできることの限界の中間地点を一緒に模索する」という表現が印象的で、営業という仕事に対するよぴさんの熱さを感じました！ さて、14日目アドベントカレンダーは、日報についてです。 私の勤めるGMOペパボ社内では、書きたい人々が思い思いに日報を書く文化があります。 社","content_html":"<p><a href=\"https://adventar.org/calendars/7443\">GMOペパボ EC Advent Calendar 2022</a>の14日目は、「日報 インターネット出張公開版」です。私やんまーが、12/14の日報を書きます。</p>\n<p>13日目はよぴさんの「<a href=\"https://note.com/kusomigi5170/n/n48fd187eb8ef\">半分営業半分コンサルみたいな職種からEC業界に転職して感じたこと　〜よぴ的営業マインド語りも添えて〜</a>」でした。\n記事の中に出てきた「お客さんの理想とサービスでできることの限界の中間地点を一緒に模索する」という表現が印象的で、営業という仕事に対するよぴさんの熱さを感じました！</p>\n<p>さて、14日目アドベントカレンダーは、日報についてです。\n私の勤めるGMOペパボ社内では、書きたい人々が思い思いに日報を書く文化があります。\n社内のNotionには「みんなの日記」というデータベースがあり、そこに日報や日記が書かれることが多いです。\n私も、毎日ではありませんが、ときおりNotionに日報を書いています。</p>\n<div style=\"width: 60%; margin: 0 auto\">\n<div>\nあわせて読みたい: <a href=\"https://careerhack.en-japan.com/report/detail/1511\">GMOペパボが全社員300名で使うNotion活用術｜リモートワークでも情報共有をスムーズに！</a>\n</div>\n<div>\n<img alt=\"https://careerhack.en-japan.com/report/detail/1511\" src=\"https://blob.yammer.jp/daily-report-20221214-notion.jpg\">\n</div>\n</div>\n<h2>日報のフォーマット</h2>\n<p>私の場合は新卒研修で使っていたフォーマットが馴染んでいるので、そのときの項目を反映した書いたテンプレートを用意しています。\nテンプレートがあると書き出しが楽になるので助かっています。いまは、各項目の全ては埋めなくとも良いことにして、時間をかけすぎずに書きたいことや伝えたいことにフォーカスしています。</p>\n<pre><code class=\"hljs language-markdown\">&#x3C;!-- 日報のテンプレート -->\n\n## いまの気持ち\n## やったこと\n## わかったこと\n## 次にやること\n</code></pre>\n<div style=\"width: 60%; margin: 0 auto\">\n<div>\nあわせて読みたい: <a href=\"https://diary.shu-cream.net/2021-01-05:%20%E3%82%B7%E3%83%A3%E3%82%A6%E3%83%88%E3%82%A2%E3%82%A6%E3%83%88\">2021-01-05: シャウトアウト - けんちゃんくんさんのWeb日記</a>\n</div>\n<div>\n<img alt=\"https://diary.shu-cream.net/2021-01-05:%20%E3%82%B7%E3%83%A3%E3%82%A6%E3%83%88%E3%82%A2%E3%82%A6%E3%83%88\" src=\"https://blob.yammer.jp/daily-report-20221214-format.jpg\">\n</div>\n</div>\n<h2>2022/12/14の日報</h2>\n<p>それではここから日報です。</p>\n<h3>今の気持ち</h3>\n<p>物理出社を活かしてたくさんの人と喋った日だったので、皆さんのパワーを感じる日でした！</p>\n<p>特に、新卒同期の homirunとの「やっていく会」では、データの整合性に関するアイデアをもらって、今後の実装のイメージが湧いたのでとても有意義な時間でした。\n「やっていく会」は、最近週次ではじめた取り組みで、homirunと二人で行っている雑談会兼相談会です。\n事前に議題は決めず、お互いトピックがあればその場に持ち寄る方式で進めています。</p>\n<p>我々は、同じサービスを、異なる事業部から、異なる観点で開発運用しています。私はWebアプリケーションエンジニアとして、homirunはSREとして、それぞれの強みの領域や、持つ知見が異なります。\nチームの垣根を超えてお互いの知見を共有する機会を強制的に作ることで、私はインフラレイヤでわからないところや気になるところを助けてもらったり、逆にhomirunにアプリケーションレイヤの話をしたりしています。</p>\n<p>2人で草の根的に始めた取り組みは、お互いに効果が生まれていると感じます。\nタスクの困りポイントの解消や、懸念の先回りした発見などに役立っています。\n今後は、この取り組みを少し広げ、他の人も呼ぶなどして、レイヤやチーム、事業部を超えた連携のきっかけとしたいと目論んでいます。</p>\n<h3>やったこと</h3>\n<ul>\n<li>参画中のプロジェクトの開発 (コードを書いたり)</li>\n<li>参画中のプロジェクトの定例ミーティング</li>\n<li>エンジニアの人々とカレー屋さんでランチ</li>\n<li>「やっていく会」</li>\n<li>隣のチームとテスタブルなコードに関する雑談</li>\n</ul>\n<img src=\"https://blob.yammer.jp/daily-report-20221214-curry.jpg\" alt=\"これはお昼のカレーです\">\n<div style=\"text-align: center; margin-top: 0\">\nこれはお昼のカレーです\n</div>\n<h3>わかったこと</h3>\n<p>(省略)</p>\n<h3>次にやること</h3>\n<p>(省略)</p>\n<h3>シャウトアウト</h3>\n<p>参画中のプロジェクトメンバーの皆さん、いつも話しすぎてしまう私に付き合ってくださったり、仕事を巻き取ってくださったり、とても感謝しています。これからもよろしくお願いします。</p>\n<p>「やっていく会」でアイデアをくれた<a href=\"https://twitter.com/h0mirun_deux\">homirun</a>、感謝です。</p>\n<p>ランチをSlackで呼びかけてくださった<a href=\"https://twitter.com/inoway46\">inoway</a>さん、とても良い時間になりました。ありがとうございます。</p>\n<p><a href=\"https://twitter.com/UVB_76\">ikaruga</a>さんと<a href=\"https://github.com/its532\">symmonds</a>さん、夕方に雑に乗り込んでいったあと、私の触っていないロールの話を聞けたり、テスタブルなコードについて議論できて、勉強になりました。ありがとうございました。</p>\n<h2>おわりに</h2>\n<p>こうして振り返ると、出社ならではのコミュニケーションを活かせた一日でした。\nそして、皆さんに助けられながら、日々仕事が出来ているのだと改めて感じます。</p>\n<p>ところで、この記事をGMOペパボで一緒に働きたいと思ったあなた！\nGMOペパボでは、新しい仲間を募集しています。募集中の職種や、詳しい社内の環境や制度に関しては <a href=\"https://recruit.pepabo.com/\">GMOペパボ株式会社 採用サイト</a>をご覧ください。<a href=\"https://recruit.pepabo.com/features/graduate/\">エンジニア新卒採用に関する情報をまとめたページ</a>も公開中です！</p>\n<p>以上で、アドベントカレンダー14日目を終わります。一日遅れてしまったことをここでお詫びします。</p>\n<p>15日目はしべさんです！</p>\n<div style=\"padding-top: 16px; text-align: center\">\n  <iframe src=\"https://adventar.org/calendars/7443/embed\" width=\"100%\" height=\"450\" frameborder=\"0\" loading=\"lazy\"></iframe>\n</div>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-12-15T22:11:26+09:00","message":"使っている日報のフォーマットからシャウトアウトの項目を削除\n","hash":"279e850a93e027520d2390282ab1f356ba9407bf"},{"date":"2022-12-15T14:56:19+09:00","message":"fix typo\n","hash":"23c5b0f2aa8f35a28116c2a15694c90009d6a4ec"},{"date":"2022-12-15T09:47:58+09:00","message":"Post: 「日報 インターネット出張公開版」\n","hash":"075731485cedbb9263f8dc6e997a4d6a64af646f"}],"date_published":"2022-12-15T10:00:00+09:00","tags":["日記","ペパボ","Webサービス開発"]},{"id":"https://memo.yammer.jp/posts/jpro","url":"https://memo.yammer.jp/posts/jpro","title":"jpro: JavaScriptで書くJSON processor","summary":"この記事は、🎅GMOペパボエンジニア Advent Calendar 2022の2日目のものです。 みなさんは、JSON processorを使っていますか？ええ、jqのようなツールのことです。世は大JSON時代、値を抽出したり、変換したりする機会も多いことでしょう。 ところで、jqの抽出クエリやコマンドラインオプション、さらっと書けますか？私はあんまり得意じゃないです。そこで、JavaScriptで書けるJSON processor「jpro」 をつくりました。 使ってみる 実際に使ってみましょう。Node.jsとnpmが使える環境ならば、事前のインストールなしに、「npx jpro」で実","content_html":"<p>この記事は、<a href=\"https://adventar.org/calendars/7722\">🎅GMOペパボエンジニア Advent Calendar 2022</a>の2日目のものです。</p>\n<p>みなさんは、JSON processorを使っていますか？ええ、<a href=\"https://github.com/stedolan/jq\"><code>jq</code></a>のようなツールのことです。世は大JSON時代、値を抽出したり、変換したりする機会も多いことでしょう。</p>\n<p>ところで、<code>jq</code>の抽出クエリやコマンドラインオプション、さらっと書けますか？私はあんまり得意じゃないです。そこで、<a href=\"https://github.com/yammerjp/jpro\">JavaScriptで書けるJSON processor「<code>jpro</code>」</a> をつくりました。</p>\n<h2>使ってみる</h2>\n<p>実際に使ってみましょう。Node.jsとnpmが使える環境ならば、事前のインストールなしに、「<code>npx jpro</code>」で実行できます<sup><a href=\"#user-content-fn-npx\" id=\"user-content-fnref-npx\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>。以下では、私が最近書いた記事のタイトル5つを、<a href=\"https://rsss.yammer.jp/v0/json_feed\">JSON Feed</a>から抽出しています。</p>\n<p><img src=\"https://blob.yammer.jp/jpro-feed-titles.gif\" alt=\"jproを使って、著者の、最近の記事5つを抽出する\"></p>\n<h2>抽出クエリはJavaScriptで書く</h2>\n<p>記事タイトルの「JavaSciriptで書く」とは、JSONの抽出・変換クエリをJavaScriptで書けることを指しています。<code>jpro</code>の引数に指定する抽出クエリは、次のようなJavaScriptコード片です。</p>\n<pre><code class=\"hljs language-javaScript\">.items.slice(0,5).map(p=>p.title)\n</code></pre>\n<p>与えたコード片は、暗黙に、「<code>output = input</code>」に続くものとして解釈されます。\nつまり、次のようなコードとして実行されます。</p>\n<pre><code class=\"hljs language-javaScript\">output = input.items.slice(0,5).map(p=>p.title)\n</code></pre>\n<p>ここで出てくる変数<code>input</code>は、標準入力のJSONをパースしたJavaScript Objectです。変数<code>output</code>は、標準出力されるJSONのもとになるJavaScript Objectです。\n<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice</code></a>と<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map</code></a>はそれぞれ配列のメソッド、<code>p=>p.title</code>は<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">アロー関数</a>です。</p>\n<p>JavaScriptの文法をそのまま使って「標準入力のうち、itemsキーの値である配列のうち、はじめから5つを取り出し、さらに、titleというキーのみを抽出する」ということが書けます。</p>\n<h2>JSON以外の入出力もできる</h2>\n<p>さらに、先ほどのコード片には出てこなかった<code>stdin</code>や<code>stdout</code>という変数を用いると、JSON以外の入出力も行えます。たとえば以下の例では、JSONではなく、行ごとの文字列を出力しています。</p>\n<pre><code class=\"hljs language-shell\">$ curl -s https://rsss.yammer.jp/v0/json_feed \\\n  | npx jpro ';stdout=input.items.slice(0,5).map(p=>p.title).join(\"\\n\")'\nAsahi Linuxを使う\nFitbit Charge 5を買った\nPython実践機械学習システム100本ノックの準備\n印象に残った仕事の話をきく話\nHerokuからCloud Run + Litestreamへ移行した\n</code></pre>\n<p><code>jpro</code>のクエリで使える、用意された変数は以下のとおりです。</p>\n<table>\n<thead>\n<tr>\n<th>変数</th>\n<th>役割</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>標準入力のJSONをパースしたJavaScript Object</td>\n</tr>\n<tr>\n<td><code>output</code></td>\n<td>標準出力のJSONに変換されるJavaScript Object</td>\n</tr>\n<tr>\n<td><code>stdin</code></td>\n<td>JSONとしてパースする前の標準入力</td>\n</tr>\n<tr>\n<td><code>stdout</code></td>\n<td>標準出力される文字列 (<code>null</code>と<code>undefined</code>以外の値が代入されれば、<code>output</code>の代わりに、<code>stdout</code>の値が標準出力される)</td>\n</tr>\n</tbody>\n</table>\n<h2>おわりに</h2>\n<p><code>jq</code>はJSONの抽出を主目的にした記法を持ち、<code>jpro</code>よりも短いクエリで記述できる場合が多いでしょう。一方、<code>jpro</code>はJavaScriptコードをevalするというシンプルなつくり<sup><a href=\"#user-content-fn-implemention\" id=\"user-content-fnref-implemention\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>であり、JavaScriptの文法がそのまま使えます。ちょっと凝ったことをするときも、JavaScriptを知っていれば、比較的簡単に書けることと思います。</p>\n<p>コマンドラインでJSONを抽出するとき、記法に悩む必要はありません。やりたいことがすぐにできることは、素早さに繋がり、価値になります。<code>jpro</code>が、JSON抽出のひとつの選択肢になれば幸いです。</p>\n<h2>🎅 / 🎄 GMOペパボエンジニア Advent Calendar 2022</h2>\n<p>この記事は、<a href=\"https://adventar.org/calendars/7722\">🎅GMOペパボエンジニア Advent Calendar 2022</a>の2日目のものでした。今年のペパボエンジニアには🎅(サンタ会場)のほかにも、<a href=\"https://adventar.org/calendars/7784\">🎄(ツリー会場)</a>があります。</p>\n<p>昨日は、よしこさんの未経験転職したい人へのエッセイ、あつい記事でした。</p>\n<p><a href=\"https://note.com/yoshikouki/n/n81b44928b656\">エンジニアの未経験転職を希望する方へ未経験転職した経験から伝えたいこと｜yoshikouki｜note</a></p>\n<p>明日は、inowayさんの記事です！</p>\n<p><a href=\"https://inoway46.hatenablog.com/entry/2022/12/03/141106\">【入社エントリー】ペパボカレッジを全力でおすすめしてみる - 脈絡はありません</a></p>\n<p>追記: プログラミングが楽しくなった、アウトプット量が増えた、というところが印象的でした！</p>\n<div style=\"padding-top: 16px; text-align: center\">\n  <iframe src=\"https://adventar.org/calendars/7722/embed\" width=\"100%\" height=\"450\" frameborder=\"0\" loading=\"lazy\"></iframe>\n  <div>\n      iframeでカレンダーを埋め込めるようなので追加してみました\n  </div>\n</div>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-npx\">\n<p>「<a href=\"https://www.npmjs.com/package/jpro\"><code>npm install -g jpro</code></a>」を実行し、システムにインストールすることもできます。このほうが、コマンドの起動が速いようです。 <a href=\"#user-content-fnref-npx\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-implemention\">\n<p><a href=\"https://github.com/yammerjp/jpro/blob/eb8dea10be51879517ab3bc36a8a2164829e7f2d/index.js\"><code>jpro</code>の実装</a>はいたって単純です。コードはいかなるnpm packageにも依存しておらず、たったの62行、しかもその2/3はヘルプメッセージです。やっていることは主に、先ほど示した4つの変数の準備と、クエリのeval、出力だけです。実装よりも、この記事の執筆の方が時間がかかっています。 <a href=\"#user-content-fnref-implemention\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-12-03T15:44:45+09:00","message":"フォーマットを整える\n","hash":"4f5e1de11351ed8d3e13ab9c9098f1e90be28e9a"},{"date":"2022-12-03T15:39:12+09:00","message":"アドベントカレンダーをiframeで埋め込む\n","hash":"08572205fbaae8e9457bf582a1232553faf3f0fc"},{"date":"2022-12-03T15:29:49+09:00","message":"inowayさんの記事へのリンクを追加\n","hash":"24ed08542d4838f4ae7d5f6e83050ab2b9e4d683"},{"date":"2022-12-02T09:28:18+09:00","message":"fix typo\n","hash":"7275a14b9e2663164555f69ad2ce4a88531677f1"},{"date":"2022-12-02T09:16:21+09:00","message":"Post: 「jpro: JavaScriptで書けるJSON processor」\n","hash":"6210e8adc63f64668f0ffec91e43c7f338c4fe80"}],"date_published":"2022-12-02T09:18:00+09:00","tags":["JSON","JavaScript","CLI","Shell"]},{"id":"https://memo.yammer.jp/posts/asahi-linux","url":"https://memo.yammer.jp/posts/asahi-linux","title":"Asahi Linuxを使う","summary":"Apple Silicon搭載のPC上でLinuxをブートするという魅力的なプロジェクト、Asahi Linuxを手元のMacBook (2020, M1, 256GB SSD, 16GB Memory) で動かしてみた。 MacBookはハードウェアとしてすごく良く出来ていると思うが、ときどきLinux Desktopだったらもっといいなと感じることもあり、Asahi Linuxのことが気になっていた。 現在リリースされているのはα版。 一部のハードウェアが動かなかったりするものの、自己責任の範囲で、手軽にデュアルブート環境を構築できる。 感想 FirefoxとAlacrittyが動くことが","content_html":"<p>Apple Silicon搭載のPC上でLinuxをブートするという魅力的なプロジェクト、Asahi Linuxを手元のMacBook (2020, M1, 256GB SSD, 16GB Memory) で動かしてみた。</p>\n<p>MacBookはハードウェアとしてすごく良く出来ていると思うが、ときどきLinux Desktopだったらもっといいなと感じることもあり、Asahi Linuxのことが気になっていた。\n現在リリースされているのはα版。\n一部のハードウェアが動かなかったりするものの、自己責任の範囲で、手軽にデュアルブート環境を構築できる。</p>\n<h2>感想</h2>\n<p>FirefoxとAlacrittyが動くことがわかって、ブラウザを開きつつ、一通りコマンドが叩ける環境ができた。\n普段使いしても趣味用の個人端末であれば、そんなに困らなそう。\nM1 MacBookの上でLinuxを動かすというだいぶチャレンジングに見えるプロジェクトだけど、手元の環境は、いまのところとても安定していてびっくりした。\n気になるところでいうと、現在動かないが使えると嬉しいハードウェアは以下の通り。</p>\n<h3>スリープ</h3>\n<p>スリープが現時点で出来ないのは残念。しかし、M1 Macbookの電池持ちが良すぎて、家の中で使う分には画面オフでも十分使えそう。\n一日外に持ち出したりはまだしていないので、そのときは気になるかもしれない。</p>\n<h3>DisplayPort on USB Type-C</h3>\n<p>外部モニタへの出力もできたら嬉しい。しかし、モニタに出力するなら普通のamd64のデスクトップマシンを使えばいいのではと考えれば、なくてもなんとかなる気持ちになる。</p>\n<h3>スピーカー</h3>\n<p>スピーカーも動けば嬉しいが、不意にYoutubeを開いたりせずに済むので、実は使えないほうが生産性に寄与すると思うことにする。</p>\n<p>ほかにもWebカメラなど動かないものはあるけれど、気になるのは実はこれくらい。結構ふつうに使えてしまってすごいなあという気持ちになっている。</p>\n<h2>OSのインストール</h2>\n<p>公式サイトの案内のとおり、curlで得たシェルスクリプトを走らせると、ウィザード形式で順に進む。</p>\n<p><a href=\"https://asahilinux.org/2022/03/asahi-linux-alpha-release/\">https://asahilinux.org/2022/03/asahi-linux-alpha-release/</a></p>\n<p>事前にドキュメントに目を通しておいて、かつウィザードの注意文言に従って進めれば問題なさそうだった。\nインストールの進め方は以下の動画で紹介されている。</p>\n<p><div class=\"embed-youtube embed-wrapper\" style=\"text-align: center;\"><iframe class=\"embed-youtube\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SoszrV0TG3U?feature=oembed\"></iframe></div></p>\n<p>私が試した限りでは、一つだけ詰まりポイントがあった。\n前半でSSDに新たなパーティションを追加するところがあるのだけど、そこでコケて先に進めなかった。</p>\n<pre><code>11-12 22:28 root         ERROR    Process execution failed\nTraceback (most recent call last):\n  File \"/private/tmp/asahi-install/main.py\", line 852, in &#x3C;module>\n    InstallerMain().main()\n  File \"/private/tmp/asahi-install/main.py\", line 704, in main\n    while self.main_loop():\n  File \"/private/tmp/asahi-install/main.py\", line 824, in main_loop\n    return self.action_resize(parts_resizable)\n  File \"/private/tmp/asahi-install/main.py\", line 635, in action_resize\n    self.dutil.resizeContainer(target.name, val)\n  File \"/private/tmp/asahi-install/diskutil.py\", line 208, in resizeContainer\n    self.action(\"apfs\", \"resizeContainer\", name, size, verbose=2)\n  File \"/private/tmp/asahi-install/diskutil.py\", line 38, in action\n    subprocess.run([\"diskutil\"] + list(args), check=True)\n  File \"/private/tmp/asahi-install/Frameworks/Python.framework/Versions/3.9/lib/python3.9/subprocess.py\", line 528, in run\n    raise CalledProcessError(retcode, process.args,\nsubprocess.CalledProcessError: Command '['diskutil', 'apfs', 'resizeContainer', 'disk0s2', '178919571456']' returned non-zero exit status 1.\n11-12 22:28 root         INFO     MSG: If you need to file a bug report, please attach the log file:\n11-12 22:28 root         INFO     MSG:   /private/tmp/asahi-install/installer.log\n</code></pre>\n<p>調べてみるとこれは結構よくある問題らしく、インストール前にディスクユーティリティからFirst Aidを実行しておくといいらしい。</p>\n<p><a href=\"https://support.apple.com/ja-jp/HT210898\">https://support.apple.com/ja-jp/HT210898</a></p>\n<p>First Aidを実行してから、再度スクリプトを走らせると順調にインストールできた。</p>\n<h2>初期設定</h2>\n<p>Arch Linuxをあまり使ったことないので、ちょっと探りながら以下のようなことをやった。なお、ソフトウェアのインストールは、\nArch Linux向けの非公式パッケージである<a href=\"https://wiki.archlinux.jp/index.php/Arch_User_Repository\">AUR</a>にバイナリが上がっているけどamd64のみ対応、というのがぼちぼちあるみたい。そこらへんは自分でビルドしたりバイナリを手に入れたりすると良さそう。</p>\n<h3>ホームディレクトリ配下のディレクトリを英名にする</h3>\n<p>ホームディレクトリ配下に作られるディレクトリ <code>デスクトップ</code> などを <code>Desktop</code> などの英語表記へ変更する。Ubuntuなどもそうだけれど、言語設定を日本語にしたとき、毎度変更していると思う。\n最初から言語設定で英語を選択しておいても良かったかもしれない。</p>\n<p><a href=\"https://wiki.archlinux.jp/index.php/XDG_%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA\">https://wiki.archlinux.jp/index.php/XDG_%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA</a></p>\n<pre><code class=\"hljs language-shell\">$ LANG=C xdg-user-dirs-update --force\n$ mv ~/デスクトップ/* ~/Desktop\n$ rmdir ドキュメント デスクトップ 画像 ビデオ テンプレート ダウンロード 公開 音楽\n</code></pre>\n<h3>KDEシステム設定を好みのものに</h3>\n<p>KeyboardのCap LockをCtrlにする。入力デバイス > キーボード > 詳細 > キーボードオプションを設定 > Caps Lock behavior > Make Caps Lock an additional Ctrl</p>\n<p>電源ボタンを押すとロックをかける。電源管理 > ボタンイベント設定 > 電源ボタンが押されたとき > スクリーンをロック を選択</p>\n<h3>最新のパッケージにする</h3>\n<pre><code class=\"hljs language-shell\">$ pacman -Syu\n</code></pre>\n<h3>yadmをinstallして、dotfilesを初期化</h3>\n<pre><code class=\"hljs language-shell\">$ sudo pacman -S yadm\n# まだSSHキーがないので、httpsでcloneする\n$ yadm clone https://github.com/yammerjp/dotfiles.git\n$ yadm remote remove origin\n$ yadm remote add origin git@github.com:yammerjp/dotfiles.git\n</code></pre>\n<h3>SSHキーを発行して、GitHubに登録しておく</h3>\n<pre><code class=\"hljs language-shell\">$ ssh-keygen-me\n# https://github.com/yammerjp/dotfiles/blob/650d39e02fcb0b698f03acac8fca722acab35666/.config/zsh/alias.zsh#L29-L31\n# https://github.com/settings/ssh/new\n</code></pre>\n<h3>IMEを設定する</h3>\n<pre><code class=\"hljs language-shell\">$ pacman -S fcitx5-im fcitx5-mozc\n</code></pre>\n<p><code>/etc/environment</code>に以下を追記</p>\n<pre><code>GTK_IM_MODULE=\"fcitx5\"\nQT_IM_MODULE=\"fcitx5\"\nXMODIFIERS='@im=fcitx5'\n</code></pre>\n<p>再ログインすると、タスクトレイにIMEの項目が出現する</p>\n<h3>1Passwordにログイン</h3>\n<p><a href=\"https://addons.mozilla.org/ja/firefox/addon/1password-x-password-manager/\">https://addons.mozilla.org/ja/firefox/addon/1password-x-password-manager/</a></p>\n<h3>Alacritty, xclip, tmuxをインストール</h3>\n<pre><code class=\"hljs language-shell\">$ sudo pacman -S alacritty xclip tmux\n</code></pre>\n<h3>yayをインストール</h3>\n<p>AURのパッケージを管理するのに使えるツール</p>\n<pre><code class=\"hljs language-shell\">$ cd /tmp\n$ git clone https://aur.archlinux.org/yay-bin.git\n$ cd yay-bin\n$ makepkg -si\n</code></pre>\n<h3>ghをインストール</h3>\n<pre><code class=\"hljs language-shell\">$ yay -S github-cli\n</code></pre>\n<h3>ghqをインストール</h3>\n<pre><code class=\"hljs language-shell\">$ cd /tmp\n$ wget https://github.com/x-motemen/ghq/releases/download/v1.3.0/ghq_linux_arm64.zip\n$ unzip ghq_linux_arm64.zip\n$ mv ghq_linux_arm64/ghq ~/.local/bin/\n</code></pre>\n<h3>好みのフォントであるHackGenNFをインストール</h3>\n<pre><code class=\"hljs language-shell\">$ wget https://github.com/yuru7/HackGen/releases/download/v2.7.1/HackGen_NF_v2.7.1.zip\n$ unzip HackGen_NF_v2.7.1.zip\n$ mv HackGen_NF_v2.7.1 HackGenNF\n$ sudo mv HackGenNF /usr/share/fonts\n$ fc-cache -fv\n</code></pre>\n<h3>asdfでnodejsとrubyとphpをインストール</h3>\n<pre><code class=\"hljs language-shell\">$ git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2\n$ source ~/.zshrc #事前にasdfのロード処理を書き込み済みだった\n$ asdf plugin add nodejs\n$ asdf install nodejs lts\n$ asdf global nodejs lts\n$ node --version\n\n$ asdf plugin add ruby\n$ asdf install ruby latest\n$ asdf global ruby latest\n$ ruby --version\n\n$ asdf plugin add php\n# 依存が結構ある\n# ref: https://github.com/asdf-community/asdf-php/blob/master/.github/workflows/workflow.yml#L30\n$ sudo pacman -S autoconf base-devel gd bison curl gettext git gd libcurl-openssl-1.0 libedit mlocate oniguruma postgresql-libs mysql re2c\n$ sudo updatedb\n$ asdf install php latest\n$ asdf global php latest\n$ php --version\n\n$ asdf plugin add golang\n$ asdf install golang latest\n$ asdf global golang latest\n$ go version\n</code></pre>\n<h2>おわりに</h2>\n<p>自宅ではしばらくAsahi Linuxを使ってみることにする。\nちなみに、この文章もAsahi Linux上のAlacritty + NeoVimから書いている。</p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-12-22T16:11:31+09:00","message":"Fix: Youtube埋め込み時に、画面全体が崩れる問題を避ける\n","hash":"8216580686fcb8ec5f7ed9bf9f3d5117a3c5a1e5"},{"date":"2022-11-15T08:54:39+09:00","message":"Fix: 読み直して気になったところをなおす\n","hash":"ad59d81961ed1fd5817008b24d0e419e8aeef1bd"},{"date":"2022-11-15T02:05:07+09:00","message":"Post: 「Asahi Linuxを使う」\n","hash":"8a32f8f234bef94b702ae3d6ef8525756b17239e"}],"date_published":"2022-11-15T01:55:00+09:00","tags":["Linux","dotfiles","MacBook","macOS","AppleSilicon","Setup"]},{"id":"https://memo.yammer.jp/posts/fitbit-charge-5","url":"https://memo.yammer.jp/posts/fitbit-charge-5","title":"Fitbit Charge 5を買った","summary":"スマホをFelica非搭載のものに乗り換えるために、Suicaを使える機器が欲しくてFitbit Charge 5を買った。 決済ができれば十分という条件で、なるべく安いスマートウォッチ(スマートバンド)を探して、この機種に帰着した。 買ってから2週間くらい経ったので感想を書いてみる。 🤔決済 まず、Suicaについて。 腕につける端末でSuicaを使えるのは体験がよい。 改札だったり、お店だったりで支払うとき、とても楽だし、スムーズでいい感じ。 ただし、気になるポイントもいくつかある。 一つは、オートチャージできないのが残念 (これは事前にわかっていた)。もともとオートチャージを使っていな","content_html":"<p>スマホをFelica非搭載のものに乗り換えるために、Suicaを使える機器が欲しくてFitbit Charge 5を買った。\n決済ができれば十分という条件で、なるべく安いスマートウォッチ(スマートバンド)を探して、この機種に帰着した。\n買ってから2週間くらい経ったので感想を書いてみる。</p>\n<h2>🤔決済</h2>\n<p>まず、Suicaについて。\n腕につける端末でSuicaを使えるのは体験がよい。\n改札だったり、お店だったりで支払うとき、とても楽だし、スムーズでいい感じ。</p>\n<p>ただし、気になるポイントもいくつかある。\n一つは、オートチャージできないのが残念 (これは事前にわかっていた)。もともとオートチャージを使っていないので、なくても許容できるが、あったほうが気を使わずに済むので嬉しかった。</p>\n<p>また、チャージに待たされるのが気になりポイント。\nチャージはFitbitアプリのみから行えるが、1分くらい待たされるのが結構長く感じる。Felica搭載のAndroid端末でSuicaチャージするときはいつも結構待たされると感じているが、それ以上に長い。</p>\n<p>Visaタッチがうまく使えないのも少し残念。\nFitbit Charge 5は、Suica以外にも、一部のデビットカードでをVisaタッチを利用できる。\nたまたま対応カードを持っていたので設定したが、これは今のところうまく動かない。\nお店で数回試してみたものの無反応で、別の物理カードでVisaタッチして払ってしまっている。\n事前の設定や操作のやり方が間違っているのか、登録したカード<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>が古いものだからなのか、私のもっている端末が不良品だからなのか、何が原因かわかっていない。</p>\n<p>ただ、身の回りではSuicaさえあればわりとなんとかなってしまうので、支払い方法も統一できるしまあいいか、ということでSuicaだけ使っている。\nこれで特に不満はない。</p>\n<h2>🤔アラーム</h2>\n<p>起きれた時はいい感じ。\n指定した30分のうち、睡眠の浅いタイミングでアラームを鳴らしてくれる「スマートアラーム」という機能がある。\nタイミングがいいときは浅い眠りのときに手首の振動で起きられるのだけど、振動していないのか、私が気づかないのか、起きれないときもある。\n気づかないときもあるということは、いまのところはこれにすべてを頼るというのは厳しい。\nとはいえ、起きれるときの体験は結構よくて、ぬるっと起きれる。</p>\n<h2>🤔ヘルスケアとフィットネストラッキング</h2>\n<p>使いこなせていない。\nFitbitといえばヘルスケア系の機能が充実しているイメージがあるが、私の場合は、とりあえず手首につけているというだけの状態である。\n歩数が気軽に見れたり、睡眠のトラッキングをしてくれたりするのは便利だが、あるから使っている、という程度である。他の機能も含め、使いこなせている感じは全然ない。</p>\n<h2>😆重量</h2>\n<p>軽い。\nもともと腕時計をつけたりするのはそんなに好んでいないのだけれど、この端末は気にならない。バンドの位置を緩めにしておけば一日中つけていられるし、寝ているときもつけたままで問題ない。</p>\n<h2>😆充電</h2>\n<p>電池持ちがすこぶる良い。\n公称では1週間くらいもつらしく、試していないが本当にそれくらいいけそうにみえる。\n私の場合は、シャワーを浴びるときだけ、洗面所に置いている充電器で充電している。これを毎日やっていればフル充電されて困らない。\nなぜこんなにバッテリーが持つのか、ただただ感心してしまう。</p>\n<h2>まとめ</h2>\n<p>腕につけるSuicaとして買って、概ねその用途で使っていて満足している。</p>\n<p>本当はフィットネストラッキングを活用できるくらい運動をすればよいのだが、あまり身体を動かせておらず、その部分をまるまる享受できてない。\nFitbit Charge 5の機能に、1時間の歩数が250歩未満だと身体を動かすようバイブで促されるというのがある。まずはそれに従うところからやっていかねば。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>JNB時代のファミマTカード付きのデビットカード <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2022-11-15T09:27:44+09:00","message":"Fix: typo\n","hash":"16cd29a62b224420681d3d8d285c5147cee17c28"},{"date":"2022-11-15T09:11:55+09:00","message":"Update fitbit-charge-5.md\n","hash":"d7ef542845b7dbd7531d0c2132921e3fd2ba3141"},{"date":"2022-11-15T02:05:07+09:00","message":"Post:「Fitbit Charge 5を買った」\n","hash":"2f2b61d7cb2a3522cfedc33a7dab87689f4f9bc3"}],"date_published":"2022-11-15T01:54:00+09:00","tags":["ガジェット","Suica"]},{"id":"https://memo.yammer.jp/posts/python-ml-100-knocks-setup","url":"https://memo.yammer.jp/posts/python-ml-100-knocks-setup","title":"Python実践機械学習システム100本ノックの準備","summary":"Python実践機械学習システム100本ノックを手元で動かしながら読んでみている。 Docker環境でJupyter Notebookを動かすサンプルコードがダウンロードできるが、そのままではビルドに失敗するので、requirements.txtにあるバージョンを書き換えるなどして動くように整えた。 jupyter==1.0.0 numpy==1.21.0 pandas==1.5.1 openpyxl==3.0.4 scikit-learn==1.1.3 matplotlib==3.3.2 japanize-matplotlib==1.1.2 seaborn==0.11.0 ipywidget","content_html":"<p><a href=\"https://www.amazon.co.jp/Python%E5%AE%9F%E8%B7%B5%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0100%E6%9C%AC%E3%83%8E%E3%83%83%E3%82%AF-%E4%B8%8B%E5%B1%B1%E8%BC%9D%E6%98%8C-ebook/dp/B0928FD1P8/ref=sr_1_1?keywords=Python%E5%AE%9F%E8%B7%B5%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0100%E6%9C%AC%E3%83%8E%E3%83%83%E3%82%AF&#x26;qid=1668239148&#x26;qu=eyJxc2MiOiIyLjI4IiwicXNhIjoiMS44OSIsInFzcCI6IjEuOTIifQ%3D%3D&#x26;s=digital-text&#x26;sr=1-1\">Python実践機械学習システム100本ノック</a>を手元で動かしながら読んでみている。</p>\n<p>Docker環境でJupyter Notebookを動かすサンプルコードがダウンロードできるが、そのままではビルドに失敗するので、requirements.txtにあるバージョンを書き換えるなどして動くように整えた。</p>\n<pre><code>jupyter==1.0.0\nnumpy==1.21.0\npandas==1.5.1\nopenpyxl==3.0.4\nscikit-learn==1.1.3\nmatplotlib==3.3.2\njapanize-matplotlib==1.1.2\nseaborn==0.11.0\nipywidgets==7.5.1\nipympl==0.5.8\nxlrd==1.2.0\n</code></pre>\n<p>あわせて、Dockerfileとdocker-compose.ymlをやりやすい形に書き換えた。\nディレクトリ構成は以下のようにしている。</p>\n<pre><code>.\n├── .env\n├── .env.example\n├── .gitignore\n├── Dockerfile\n├── Makefile\n├── README.md\n├── docker-compose.yml\n├── requirements.txt\n└── src\n    └── samples\n        ├── 01\n        │   ├── 1章_分析に向けた準備を行う10本ノック.ipynb\n        │   ├── 1章_分析に向けた準備を行う10本ノック_answer.ipynb\n        │   ├── m_area.csv\n        │   ├── m_store.csv\n        │   ├── tbl_order_202004.csv\n        │   ├── tbl_order_202005.csv\n        │   └── tbl_order_202006.csv\n        ...\n</code></pre>\n<pre><code class=\"hljs language-Makefile\"># Makefile\n.PHONY: build-image run build-image:\n        bash -c 'docker-compose build --build-arg UID=\"`id -u`\" --build-arg GID=\"`id -g`\"'\nrun:\n        docker-compose up -d\n</code></pre>\n<pre><code class=\"hljs language-Dockerfile\"><span class=\"hljs-comment\"># Dockerfile</span>\n<span class=\"hljs-keyword\">FROM</span> ubuntu:<span class=\"hljs-number\">22.04</span>\n\n<span class=\"hljs-keyword\">RUN</span> apt-get update &#x26;&#x26; apt-get install -y \\\n    python3 \\\n    python3-pip \\\n    curl \\\n    git \\\n  &#x26;&#x26; rm -rf /var/lib/apt/lists/*\n\n<span class=\"hljs-keyword\">ARG</span> USERNAME=app\n<span class=\"hljs-keyword\">ARG</span> GROUPNAME=app\n<span class=\"hljs-keyword\">ARG</span> UID=<span class=\"hljs-number\">1000</span>\n<span class=\"hljs-keyword\">ARG</span> GID=<span class=\"hljs-number\">1000</span>\n\n<span class=\"hljs-keyword\">RUN</span> groupadd -g $GID $GROUPNAME &#x26;&#x26; \\\n  useradd -m -s /bin/bash -u $UID -g $GID $USERNAME\n\n<span class=\"hljs-keyword\">USER</span> $USERNAME\n<span class=\"hljs-keyword\">WORKDIR</span> /home/$USERNAME/\n\n<span class=\"hljs-keyword\">ENV</span> PATH $PATH:/home/$USERNAME/.local/bin\n\n<span class=\"hljs-keyword\">COPY</span> ./requirements.txt /home/$USERNAME/requirements.txt\n<span class=\"hljs-keyword\">RUN</span> pip3 install -r /home/$USERNAME/requirements.txt\n\n<span class=\"hljs-keyword\">ENV</span> PYTHONIOENCODING utf-<span class=\"hljs-number\">8</span>\n<span class=\"hljs-keyword\">ENV</span> LANG C.UTF-<span class=\"hljs-number\">8</span>\n<span class=\"hljs-keyword\">ENV</span> LC_ALL C.UTF-<span class=\"hljs-number\">8</span>\n</code></pre>\n<pre><code class=\"hljs language-yaml\"># docker-compose.yml\n# docker-compose.yml\nversion: '3.5'\n\nservices:\n    jupyter_notebook:\n        build:\n            context: .\n            args:\n              - UID:1000\n              - GID:1000\n              - USERNAME:app\n              - GROUPNAME:app\n            dockerfile: ./Dockerfile\n        volumes:\n            - ./src:/home/app/src\n        ports:\n            - \"8888:8888\"\n        environment:\n            TZ: \"Asia/Tokyo\"\n        networks:\n            - default\n        command: jupyter notebook --ip=0.0.0.0 --port=8888 --allow-root --no-browser --NotebookApp.notebook_dir='/home/app/src' --NotebookApp.token=''\n</code></pre>\n<p>本文はまだ最初の方しか試せていないが、読みやすいし、Jupyter Notebook上で試せるのでテンポよく進んでいい感じ。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-11-15T02:05:07+09:00","message":"Post: 「Python実践機械学習システム100本ノックの準備」\n","hash":"a388ef4c6c6604af94d767af367811a8828c595f"}],"date_published":"2022-11-15T01:53:00+09:00","tags":["Python","機械学習","本"]},{"id":"https://memo.yammer.jp/posts/talking-about-your-own-impressive-work","url":"https://memo.yammer.jp/posts/talking-about-your-own-impressive-work","title":"印象に残った仕事の話をきく話","summary":"とある飲み会で、下のツイートにある質問の「(今まで携わった|最近やった)仕事の中で、印象に残ったもの」というテーマの話を、とある方が振ってくれて、聞いたり話したりしていた。 https://twitter.com/n_book_/status/1591101355162497024 この質問がめちゃくちゃよかった。 周りの人がどんな仕事をしているか、というのを把握する機会はあれど、それをどういう印象で受け止めているのかや、仕事の中でのおもしろポイント、その人が価値に感じていることを知れる機会というのは案外少ないかもしれない。 同じ仕事の内容でも人によって捉え方が違うだろうし、仕事の内容を知るだ","content_html":"<p>とある飲み会で、下のツイートにある質問の「(今まで携わった|最近やった)仕事の中で、印象に残ったもの」というテーマの話を、とある方が振ってくれて、聞いたり話したりしていた。</p>\n<p><a href=\"https://twitter.com/n_book_/status/1591101355162497024\">https://twitter.com/n_book_/status/1591101355162497024</a></p>\n<p>この質問がめちゃくちゃよかった。\n周りの人がどんな仕事をしているか、というのを把握する機会はあれど、それをどういう印象で受け止めているのかや、仕事の中でのおもしろポイント、その人が価値に感じていることを知れる機会というのは案外少ないかもしれない。\n同じ仕事の内容でも人によって捉え方が違うだろうし、仕事の内容を知るだけでなくて「どう考えているのか」というのを聞けるのがよい。\n話を聞くのが楽しいしおもしろかった。</p>\n<p>また、話す立場としても、自分自身で仕事の内容をどう捉えているのか振り返るいい機会だった。\nツイートの通りしばらく時間が立ってから自問自答するのもよいだろうし、他の人の話もきいてみたい。</p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2022-11-15T02:04:56+09:00","message":"Post:「印象に残った仕事の話をきく話」\n","hash":"1eb62ad9d0bdace272bc70a6f475456e5f84a7dc"}],"date_published":"2022-11-15T01:52:00+09:00","tags":["雑記"]},{"id":"https://memo.yammer.jp/posts/cloud-run-litestream","url":"https://memo.yammer.jp/posts/cloud-run-litestream","title":"HerokuからCloud Run + Litestreamへ移行した","summary":"はじめに Herokuの無料枠が終了することにあわせて、個人で動かしているRailsアプリケーションを他の場所へ移行する。 いままで無料で使わせていただいたこと感謝しつつも、月千円ほど払うほどのアプリケーションでもないので、ほぼ無料で移行できそうな場所を探すことにした。1 コンテナをホスティングできるGoogle Cloud Runは従量課金制だが、個人で使う分にはほぼ無料なので、これを選ぶことにする。 Cloud Runで使うRDBは一般にはGoogle Cloud SQLが推奨されていそうだが、ここでは安さのためにSQLite3 + Litestream + Google Cloud St","content_html":"<h2>はじめに</h2>\n<p><a href=\"https://blog.heroku.com/next-chapter\">Herokuの無料枠が終了</a>することにあわせて、個人で動かしているRailsアプリケーションを他の場所へ移行する。\nいままで無料で使わせていただいたこと感謝しつつも、月千円ほど払うほどのアプリケーションでもないので、ほぼ無料で移行できそうな場所を探すことにした。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>コンテナをホスティングできるGoogle Cloud Runは従量課金制だが、個人で使う分にはほぼ無料なので、これを選ぶことにする。\nCloud Runで使うRDBは一般にはGoogle Cloud SQLが推奨されていそうだが、ここでは安さのためにSQLite3 + Litestream + Google Cloud Storage(以下GCS)を使うこととしたい。</p>\n<h2>実装の方向性</h2>\n<p><a href=\"https://litestream.io\">Litestream</a>は、SQLite3のデータベースを、オブジェクトストレージやNFS、SFTPのストレージにレプリケーションできるOSSのソフトウェア。</p>\n<p>今回はコンテナの起動時にデータベースをGCSから復元し、コンテナの実行中はGCSへレプリケーションしつづける動作を実装する。\nDockerコンテナのエントリポイントに設定するシェルスクリプトのなかで、アプリケーションの起動前に処理を加えて対応する。</p>\n<p>コンテナの同時実行数は0~1にしている。\n0にしていいのかは微妙だが、個人でしか使っていないうえ、大して重要なデータを扱っているわけでもないのでひとまずこれで様子を見ることにする。</p>\n<h2>移行の手順</h2>\n<p>ざっくり以下の手順で進めた。</p>\n<h3>SQLite3化</h3>\n<p>まず、PostgreSQLからSQLite3へ移行する。\nRailsに用意されたコマンド <code>./bin/rails db:system:change --to=sqlite3</code> を実行するだけで、環境問わずSQLite3で動くように修正された。</p>\n<p>あわせてDocker化しておく。\n適当なDockerfile (とdocker-compose.yml) を書いて、手元のPCのDocker上で立ち上がるようにした。</p>\n<h3>LitestreamとGCSの利用</h3>\n<p>Litestreamのレプリケーション先にGCSを利用するので、GCSのセットアップをする。\nまず、GCSにバケットを作り、接続情報を用意する。\n権限を絞るためにサービスアカウントを作成し、取得した認証情報のJSONを保存しておく。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<details>\n<summary>\n2023/01/17追記: くのきみさんから教えていただき、Cloud RunとLitestreamの組み合わせの場合、GCSの認証情報はよしなに取得してくれるようです。この記事で行っているような認証情報の設定は不要であることがわかりました。\n</summary>\n<blockquote>\n<p>On a Compute Engine VM or Cloud Run service, Litestream will automatically pick up the credentials associated with the instance from the instance’s metadata server.\n<a href=\"https://litestream.io/guides/gcs/\">https://litestream.io/guides/gcs/</a></p>\n</blockquote>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/yammerjp?ref_src=twsrc%5Etfw\">@yammerjp</a> <br>参考になりました！それはそれとしてGCSに必要なクレデンシャルはCloud Runインスタンスから拾ってくれるらしいので、自分で設定する必要はなさそうな気がしました <a href=\"https://t.co/WorBOBanVl\">https://t.co/WorBOBanVl</a><a href=\"https://t.co/kPx31i4S4C\">https://t.co/kPx31i4S4C</a></p>— くのきみ (@knokmki612) <a href=\"https://twitter.com/knokmki612/status/1614856237774168064?ref_src=twsrc%5Etfw\">January 16, 2023</a></blockquote></p>\n<p>くのきみさん、情報提供ありがとうございます。</p>\n<hr>\n</details>\n<p>つぎに、Dockerコンテナ起動時にLitestreamによる復元とレプリケーションを設定する。</p>\n<p>Dockerfileでは、Litestreamのインストールと設定ファイルの設置を行っている。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup></p>\n<pre><code class=\"hljs language-Dockerfile\"><span class=\"hljs-comment\"># Dockerfile</span>\n<span class=\"hljs-keyword\">FROM</span> rubylang/ruby:<span class=\"hljs-number\">3.0</span>.<span class=\"hljs-number\">1</span>-focal\n\n<span class=\"hljs-keyword\">RUN</span> mkdir /app\n<span class=\"hljs-keyword\">WORKDIR</span> /app\n\n<span class=\"hljs-comment\"># Google Cloud Storageへの接続情報を保存するファイルのパスを事前に指定しておく。</span>\n<span class=\"hljs-comment\"># コンテナイメージにこのファイルを含める必要はない。</span>\n<span class=\"hljs-keyword\">ENV</span> GOOGLE_APPLICATION_CREDENTIALS /app/.gcs-credentials.json\n\n<span class=\"hljs-keyword\">ENV</span> TZ Asia/Tokyo\n<span class=\"hljs-keyword\">RUN</span> apt update \\\n &#x26;&#x26; apt install -y sqlite3 \\\n &#x26;&#x26; apt-get clean \\\n &#x26;&#x26; rm -rf /var/lib/apt/lists/*\n\n<span class=\"hljs-comment\"># Litestreamのバイナリを設置する。</span>\n<span class=\"hljs-keyword\">ADD</span> https://github.com/benbjohnson/litestream/releases/download/v0.3.8/litestream-v0.3.8-linux-amd64-static.tar.gz /tmp/litestream.tar.gz\n<span class=\"hljs-keyword\">RUN</span> tar -C /usr/local/bin -xzf /tmp/litestream.tar.gz\n\n<span class=\"hljs-keyword\">ADD</span> Gemfile /app/Gemfile\n<span class=\"hljs-keyword\">ADD</span> Gemfile.lock /app/Gemfile.lock\n<span class=\"hljs-keyword\">RUN</span> bundle install\n\n<span class=\"hljs-keyword\">COPY</span> . /app\n\n<span class=\"hljs-comment\"># Litestreamの設定ファイルを設置する。</span>\n<span class=\"hljs-keyword\">COPY</span> ./litestream.yml /etc/litestream.yml\n</code></pre>\n<pre><code class=\"hljs language-yaml\"># litestream.yml\ndbs:\n  - path: /app/db/production.sqlite3\n    replicas:\n      - url: gcs://____YOUR_BACKET_NAME____/db/production.sqlite3\n  - path: /app/db/staging.sqlite3\n    replicas:\n      - url: gcs://____YOUR_BACKET_NAME____/db/staging.sqlite3\n</code></pre>\n<p>entrypoint.shでは、データベースを復元してからレプリケーションを開始する。\nあわせて以下も実装している。</p>\n<ul>\n<li>開発環境や初回起動時は、データベースの復元の代わりに、マウントされたファイルを使う、もしくは<code>rake db:migrate:reset</code>する。</li>\n<li>ポート番号は<code>$PORT</code>を優先して利用する。<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup></li>\n<li>接続情報は環境変数に集約する。LitestreamはGCSへの接続情報として<code>$GOOGLE_APPLICATION_CREDENTIALS</code>にJSONファイルへのパスが入ることを期待する。コンテナイメージに接続情報を含めないために、JSONをbase64でエンコードして環境変数に保存しておき、起動時に書き出す。</li>\n</ul>\n<p>entrypoint.sh</p>\n<pre><code class=\"hljs language-bash\">#!/bin/bash -e\n\n# entrypoint.sh\n\nif [ \"$RAILS_ENV\" = \"\" ]; then\n  DATABASE_FILE=\"db/development.sqlite3\"\nelse\n  DATABASE_FILE=\"db/$RAILS_ENV.sqlite3\"\nfi\nDATABASE_FILE_FULLPATH=\"/app/$DATABASE_FILE\"\nDATABASE_FILE_BACKET_FULLPATH=\"gcs://____YOUR_BACKET_NAME____/$DATABASE_FILE\"\n\n\n# PORT番号は$PORTを優先する\nif [ \"$PORT\" = \"\" ]; then\n  PORT=8080\nfi\nEXEC_COMMAND=\"bundle exec rails server -p $PORT -b 0.0.0.0\"\n\n\nif [ \"$RAILS_ENV\" = \"production\" ] || [ \"$RAILS_ENV\" = \"staging\" ] ; then\n  USE_LITESTREAM=\"true\"\nelse\n  USE_LITESTREAM=\"false\"\nfi\n\n\n# Litestreamを使う場合は、データベースをGCSから復元する\nif [ \"$USE_LITESTREAM\" = \"true\" ] ; then\n  # GCSの接続情報を環境変数から読み込み、base64デコードしてからファイルに書き込む\n  # (事前に、接続情報をbase64エンコードして環境変数に設定しておく)\n  if [ \"$GOOGLE_APPLICATION_CREDENTIALS\" = '' ] || [ \"$GOOGLE_APPLICATION_CREDENTIALS_BASE64\" = '' ] ; then\n    echo \"Need to set \\$GOOGLE_APPLICATION_CREDENTIALS and \\$GOOGLE_APPLICATION_CREDENTIALS_BASE64\"\n    exit 1\n  fi\n  echo \"$GOOGLE_APPLICATION_CREDENTIALS_BASE64\" | base64 --decode > \"$GOOGLE_APPLICATION_CREDENTIALS\"\n\n  # GCSからデータベースを復元する\n  litestream restore -v -if-replica-exists -o \"$DATABASE_FILE_FULLPATH\" \"$DATABASE_FILE_BACKET_FULLPATH\"\nfi\n\n# データベースを初期化する (初回起動時は復元されたファイルがないため)\nif ! [ -f \"$DATABASE_FILE_FULLPATH\" ] &#x26;&#x26; [ \"$ALLOW_RESET_DATABASE\" = 'true' ]; then\n  rake db:migrate:reset\n  # ここで初期化用のSQLを流してもよい\n  # if [ -f \"$SETUP_SQL_PATH\" ]; then\n  #   cat \"$SETUP_SQL_PATH\" | sqlite3 \"$DATABASE_FILE_FULLPATH\"\n  # fi\nfi\n\nif ! [ -f \"$DATABASE_FILE_FULLPATH\" ]; then\n  echo \"$DATABASE_FILE_FULLPATH is not found...\"\n  exit 1\nfi\n\n\nif [ \"$USE_LITESTREAM\" = \"true\" ] ; then\n  # Litestreamによってレプリケーションしながら、アプリケーションを起動する\n  exec litestream replicate -exec \"$EXEC_COMMAND\" -config /etc/litestream.yml\nelse\n  # shellcheck disable=SC2090\n  exec $EXEC_COMMAND\nfi\n</code></pre>\n<h3>アプリケーションのデプロイ</h3>\n<p>Staging環境をつくって、ひとまずは<code>gcloud</code>コマンドで手動でデプロイしたあとに、GitHubのリポジトリと紐付けて自動デプロイがなされるように設定した。</p>\n<p>Cloud RunとLitestream関係ないが、<code>RAILS_ENV=production</code>として動かすためやコンテナ上で動かすための設定(<code>RAILS_LOG_TO_STDOUT</code>や<code>RAILS_SERVE_STATIC_FILES</code>など)をいくつか調整した。</p>\n<h3>データの移行</h3>\n<p>HerokuのPostgreSQLからのデータの移行は、<code>pg_dump</code>を用いた。</p>\n<pre><code class=\"hljs language-shell\"># 接続先の認証情報を得る\n$ heroku pg:credentials:url --app APPNAME\n# 認証情報を使って、データベースの内容をINSERT文形式で取得する。\n$ pg_dump --data-only --no-owner --no-privileges --disable-dollar-quoting --no-acl --inserts -h HOSTNAME -U USERNAME DBNAME > data.sql\n</code></pre>\n<p>得られた<code>data.sql</code>をちょこちょこ編集して、SQLite3で読み込めるINSERT文だけにする。\nSQLを流し込むのはローカルPC上で実施した。\n<code>entrypoint.sh</code>を一時的にすこし変えて、<code>rake db:migrate:reset</code>のあとに<code>data.sql</code>を流し込むようにしておく。</p>\n<p>さきほどの<code>entrypoint.sh</code>を使えば、環境変数に応じてローカルPC上でも本番環境のデータベースをレプリケーションできる。\n<code>RAILS_ENV=production</code>としてコンテナを立ち上げて、データが挿入されているのを確認したら移行はおわり。</p>\n<h3>感想</h3>\n<p>Cloud Run + Litestream + GCSはコールドスタート時は少し時間がかかるが、Herokuの無料枠とさして変わらないかむしろ早いかもしれない。<sup><a href=\"#user-content-fn-5\" id=\"user-content-fnref-5\" data-footnote-ref aria-describedby=\"footnote-label\">5</a></sup>\nそれ以外の動作は結構サクサクしていていい感じ。</p>\n<p>ローカルでも気軽に同じ構成で動かせたりして結構よいので、Cloud RunでLitestreamを使うテンプレートを用意したい気持ちになった。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>お金がかかってもよい場合のホスト先はRenderやFly.io、もしくはHerokuのEco Dynoなどがありそう。<a href=\"https://blog.jnito.com/entry/2022/10/04/104100\">Herokuの新しい有料プランのまとめと、無料プラン終了後の個人的な移行方針について - give IT a try</a> <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>参考: <a href=\"https://christina04.hatenablog.com/entry/access-gcs-bucket-with-iam-policy\">特定のGCSバケットにのみアクセスできるサービスアカウントの作り方 - Carpe Diem</a> <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p> 参考: <a href=\"https://zenn.dev/oubakiou/articles/382839bfc65931\">Cloud RunとLitestreamで激安GraphQL/RDBサーバーを動かす</a> <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>Cloud Runでは環境変数<code>PORT</code>を参照することがおすすめされている。<a href=\"https://cloud.google.com/run/docs/migrating?hl=ja\">既存のサービスを移行する  |  Cloud Run のドキュメント  |  Google Cloud</a> <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-5\">\n<p>データ量が大変少ない単純なアプリケーションだからということもあるだろう。 <a href=\"#user-content-fnref-5\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2023-01-17T05:25:07+09:00","message":"Update: CloudRun上ではGCSの認証情報を明示的に指定する必要はない旨を追記\n","hash":"ed5a482ee9d60071265c81317bc10814c8ce4b48"},{"date":"2022-10-12T10:28:29+09:00","message":"Fix: 改めて投稿時刻のタイムゾーン\n","hash":"7ad827589047582be7a41a7272fa29bb12311d81"},{"date":"2022-10-12T10:25:43+09:00","message":"Fix: 投稿時刻のタイムゾーン\n","hash":"fe28509e2f6e27c4f84d83e4f618ec689de2bdfc"},{"date":"2022-10-12T10:23:19+09:00","message":"Fix: developmentはレプリケーションしない\n","hash":"7f9d26160da49d7c74332bc46cc1c28dce5404a9"},{"date":"2022-10-12T10:13:48+09:00","message":"Update: 読み直して気になったところを修正\n","hash":"c7206abc03c8ffc52ec0b86fc2999d8bacc7daf4"},{"date":"2022-10-12T00:57:38+00:00","message":"Post:「HerokuからCloud Run + Litestreamへ移行した」\n","hash":"56fdbc1f841df4cde2389df2cc081992f47ce378"}],"date_published":"2022-10-12T10:15:00+09:00","tags":["CloudRun","heroku","docker","SQLite","Litestream","雑記"]},{"id":"https://memo.yammer.jp/posts/cloudfront-functions-redirect","url":"https://memo.yammer.jp/posts/cloudfront-functions-redirect","title":"CloudFront Functionsで指定したURLにリダイレクトさせる","summary":"CloudFront Functionsというサービスがあり、軽量のJavaScriptコードをデプロイしてCloudFrontディストリビューションに紐づけることができるらしい。 他のサーバレスの実行環境との比較は以下の記事が参考になる。 CloudFront Functions の導入 – 任意の規模において低レイテンシーでコードをエッジで実行 | Amazon Web Services ブログ エッジで爆速コード実行！CloudFront Functionsがリリースされました！ | DevelopersIO ちょうどdotfilesリポジトリのセットアップ用スクリプトを取得できるエンド","content_html":"<p>CloudFront Functionsというサービスがあり、軽量のJavaScriptコードをデプロイしてCloudFrontディストリビューションに紐づけることができるらしい。\n他のサーバレスの実行環境との比較は以下の記事が参考になる。</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/jp/blogs/news/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/\">CloudFront Functions の導入 – 任意の規模において低レイテンシーでコードをエッジで実行 | Amazon Web Services ブログ</a></li>\n<li><a href=\"https://dev.classmethod.jp/articles/amazon-cloudfront-functions-release/\">エッジで爆速コード実行！CloudFront Functionsがリリースされました！ | DevelopersIO</a></li>\n</ul>\n<p>ちょうどdotfilesリポジトリのセットアップ用スクリプトを取得できるエンドポイントを用意したかったので、今回はCloudFront Functionsで他のURLへの302リダイレクトを発行するエンドポイントを作成してみる。</p>\n<p>まずは、AWSコンソールのCloudFrontのページへ行き、左側のメニューから「関数」を選択する。</p>\n<p><img src=\"https://blob.yammer.jp/cloudfront-functions-01.png\" alt=\"関数の作成\"></p>\n<p>「関数を作成」を選択すると、サンプルコード付きのCloudFront Functionsの関数(実行できる一単位)が一つ作成される。</p>\n<p>今回はリダイレクトしたいので、以下のようなコードに書き換える。</p>\n<pre><code class=\"hljs language-javascript\">function handler(event) {\n    var response = {\n            statusCode: 302,\n            statusDescription: 'Found',\n            headers: {\n                \"location\": { \"value\": 'https://raw.githubusercontent.com/yammerjp/dotfiles/master/setup.sh' }\n            }\n    };\n    return response;\n}\n</code></pre>\n<p>テストタブでは関数を動作させてどんなレスポンスが返るかをみることができる。</p>\n<p><img src=\"https://blob.yammer.jp/cloudfront-functions-redirect-test.png\" alt=\"テスト実行の結果を確認する様子\"></p>\n<p>問題なさそうであれば、発行タブから「関数を発行」する。\nさらに作成した関数をCloudFrontのディストリビューションに紐付け、実際のWebからのリクエストで発火するようにする。</p>\n<p>手元でcurlコマンドを実行してみると、実際にリダイレクトが確認できる。</p>\n<pre><code class=\"hljs language-shell\">$ curl http://dot.yammer.jp --verbose\n*   Trying 2606:4700:3031::6815:2cf8...\n* TCP_NODELAY set\n* Connected to dot.yammer.jp (2606:4700:3031::6815:2cf8) port 80 (#0)\n> GET / HTTP/1.1\n> Host: dot.yammer.jp\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n&#x3C; HTTP/1.1 302 Found\n&#x3C; Date: Thu, 06 Oct 2022 16:17:57 GMT\n&#x3C; Content-Length: 0\n&#x3C; Connection: keep-alive\n&#x3C; Location: https://raw.githubusercontent.com/yammerjp/dotfiles/master/.bin/download.sh\n&#x3C; X-Cache: FunctionGeneratedResponse from cloudfront\n&#x3C; Via: 1.1 b4dadadff1d09a3efb8a9374bdfc2848.cloudfront.net (CloudFront)\n&#x3C; X-Amz-Cf-Pop: NRT12-C2\n&#x3C; Alt-Svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400\n&#x3C; X-Amz-Cf-Id: Hx-hLyCjKYgzxYXB_cUrSQgtHDgQW-maDnfZvaXmn0mtzPu2hC_YSg==\n&#x3C; CF-Cache-Status: DYNAMIC\n&#x3C; Report-To: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=E2QYl2tLkUVmKzT2wAiYJhTp9NTPLj2s%2BtOwP%2Fx%2Fuq5qeDKYK5gttDmaBH8k1BxB9d0GPK8prNS7I5UMpG1aeUijjhl%2B32uT87m%2FhRGc6Jt9CGY1DHnld3Fku21CCEGZu2cnl6g2Yf1pvEU2\"}],\"group\":\"cf-nel\",\"max_age\":604800}\n&#x3C; NEL: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\n&#x3C; Server: cloudflare\n&#x3C; CF-RAY: 755fb5ce8bceafab-NRT\n&#x3C;\n* Connection #0 to host dot.yammer.jp left intact\n* Closing connection 0\n$ curl -sL http://dot.yammer.jp | head -30\n#!/bin/bash -e\n\nif [ \"$(whoami)\" = \"root\" ]; then\n  echo \"The script must be running without root.\"\n  exit 1\nfi\n\nREPO=\"yammerjp/dotfiles\"\n\nDOTFILES_DIR=\"$HOME/src/github.com/$REPO\"\nif [ -d \"${DOTFILES_DIR}\" ]; then\n  echo \"Dotfiles is already exist.\"\n  echo \"${DOTFILES_DIR}\"\nelse\n\ncat &#x3C;&#x3C;-\"EOF\"\n\n\n\n      .o8                .    .o88o.  o8o  oooo\n     \"888              .o8    888 `\"  `\"'  `888\n .oooo888   .ooooo.  .o888oo o888oo  oooo   888   .ooooo.   .oooo.o\nd88' `888  d88' `88b   888    888    `888   888  d88' `88b d88(  \"8\n888   888  888   888   888    888     888   888  888ooo888 `\"Y88b.\n888   888  888   888   888 .  888     888   888  888    .o o.  )88b\n`Y8bod88P\" `Y8bod8P'   \"888\" o888o   o888o o888o `Y8bod8P' 8\"\"888P'\n\n\n\n\n$\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-10-07T10:21:14+09:00","message":"Update: 読み直して違和感のあるところをなおす\n","hash":"24a2c0d38807272bff0962a830c29ca46d66dbc5"},{"date":"2022-10-07T01:36:55+09:00","message":"Post: 「CloudFront Functionsで指定したURLにリダイレクトさせる」\n","hash":"fd8598813a5105b57d8ab846a435cef632ea6be9"}],"date_published":"2022-10-08T10:25:00+09:00","tags":["AWS","CloudFront","dotfiles"]},{"id":"https://memo.yammer.jp/posts/alacritty","url":"https://memo.yammer.jp/posts/alacritty","title":"Alacrittyを使っていく","summary":"Alacritty とは Alacrittyはクロスプラットフォームなターミナルエミュレーター。 yamlで設定を記述できること、クロスプラットフォームであること、動作が早いことが特徴である。 IMEのインラインサポート https://twitter.com/Ket0104/status/1566430771702665216 AlacrittyにIMEで入力した時に未確定な文字列を表示する対応が入ったらしい。 対応されたのが嬉しかったので、早速ビルド1して手元のMacBook Airで使うことにした。 実は以前、この変換前文字列の表示がサポートされていないことを理由に使うのをやめてしまって","content_html":"<h2>Alacritty とは</h2>\n<p><a href=\"https://alacritty.org\">Alacritty</a>はクロスプラットフォームなターミナルエミュレーター。\nyamlで設定を記述できること、クロスプラットフォームであること、動作が早いことが特徴である。</p>\n<h2>IMEのインラインサポート</h2>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">おぉぉぉぉぉ<br>ついに、alacrittyにIMEのインラインサポートが入った！！ちゃんと変換中の位置も考慮されてdeleteもできてる！！！<br>よし、乗り換えるぞ！<a href=\"https://t.co/J0rF12hJl2\">https://t.co/J0rF12hJl2</a> <a href=\"https://t.co/tADAMBfHTe\">pic.twitter.com/tADAMBfHTe</a></p>— karasu@オフトゥン大好き (@Ket0104) <a href=\"https://twitter.com/Ket0104/status/1566430771702665216?ref_src=twsrc%5Etfw\">September 4, 2022</a></blockquote></p>\n<p>AlacrittyにIMEで入力した時に未確定な文字列を表示する対応が入ったらしい。</p>\n<p>対応されたのが嬉しかったので、早速ビルド<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>して手元のMacBook Airで使うことにした。\n実は以前、この変換前文字列の表示がサポートされていないことを理由に使うのをやめてしまっていたのであったので、待望の機能である。</p>\n<h2>ビルドして使ってみる</h2>\n<p>ビルドはめちゃ簡単で、cargoコマンドが使えれば依存関係に困るとかもない。</p>\n<pre><code class=\"hljs language-shell\"># 事前にRustのビルド環境を入れておく\n$ brew install rust\n\n# cloneして...\n$ git clone git@github.com:alacritty/alacritty.git\n$ cd alacritty\n\n# make appするだけでmacOS向けの実行ファイルをビルドできる\n$ make app\n\n# 適当なディレクトリに移動して、アプリケーションを起動する\n$ cp -r target/release/osx/Alacritty.app ~/Application\n$ open ~/Applications/Alacritty.app\n</code></pre>\n<h2>設定ファイルを記述する</h2>\n<p>Alacrittyの特徴のひとつはyamlで設定を記述できることだと思うので、ひとまず設定ファイルを記述してみる。</p>\n<p>Alacritty.ymlの設定は<a href=\"https://wiki.archlinux.jp/index.php/Alacritty\">Arch Linuxのwiki</a>などが参考になる。</p>\n<p><a href=\"https://github.com/yuru7/HackGen\">HackGen</a>というフォントがみやすくて好みなので、これを設定する。</p>\n<p>ちなみにmacOSにインストールされたフォント名は <code>fc-list</code> で確認できる</p>\n<pre><code class=\"hljs language-shell\">$ fc-list | grep HackGen\n/Users/yammer/Library/Fonts/HackGen-Regular.ttf: HackGen:style=Regular\n/Users/yammer/Library/Fonts/HackGen35-Bold.ttf: HackGen35:style=Bold\n/Users/yammer/Library/Fonts/HackGen35Console-Regular.ttf: HackGen35 Console:style=Regular\n/Users/yammer/Library/Fonts/HackGen35Console-Bold.ttf: HackGen35 Console:style=Bold\n/Users/yammer/Library/Fonts/HackGenConsole-Regular.ttf: HackGen Console:style=Regular\n/Users/yammer/Library/Fonts/HackGenConsole-Bold.ttf: HackGen Console:style=Bold\n/Users/yammer/Library/Fonts/HackGen35-Regular.ttf: HackGen35:style=Regular\n/Users/yammer/Library/Fonts/HackGen-Bold.ttf: HackGen:style=Bold\n</code></pre>\n<pre><code class=\"hljs language-yaml\"># alacritty.yaml\nfont:\n  normal:\n    family: HackGen Console\n    style: Regular\n  bold:\n    family: HackGen Console\n    style: Bold\n</code></pre>\n<p>これでいい感じになった。</p>\n<p><img src=\"https://blob.yammer.jp/alacritty.png\" alt=\"alacrittyを使っているスクリーンショット\"></p>\n<details>\n<summary>\nありがとう、iTerm2\n</summary>\n<pre><code class=\"hljs language-shell\">$ brew uninstall --cask iterm2\n==> Uninstalling Cask iterm2\n==> Backing App 'iTerm.app' up to '/opt/homebrew/Caskroom/iterm2/3.4.10/iTerm.app'\n==> Removing App '/Applications/iTerm.app'\n==> Purging files for version 3.4.10 of Cask iterm2\n</code></pre>\n</details>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>ちゃんと確認していないが、マージされた日付的に2022/09/06時点でのリリースに含まれていてビルドしなくてもよかったかもしれない。(未確認) <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-09-07T00:29:52+09:00","message":"Post: 「Alacrittyを使っていく」\n","hash":"655c8808ceadd6fe7693b23e6dff0c9c90fefe3c"}],"date_published":"2022-09-07T00:22:00+09:00","tags":["shell","ターミナル","開発環境","alacritty","dotfiles"]},{"id":"https://memo.yammer.jp/posts/introduction-of-character-code-for-programmer","url":"https://memo.yammer.jp/posts/introduction-of-character-code-for-programmer","title":"プログラマのための文字コード技術入門を読んだ(2022年9月)","summary":"(2024/09/22記) 2022年の9月に読んだ本の記事が、下書きとして残っていたままだったので公開します。 業務で文字コードに触れる機会があったのですがそもそも文字コードというものに詳しくないので「改定新版 プログラマのための文字コード技術入門」という本を読みました。 本を読む前は文字コードにはいくつかの規格があることを知っている程度の理解であったので、なによりもまず勉強になりました。また後述するいくつかの概念は背景とともに説明があって知っておかないと規格を理解しづらいので、本を買ってよかったという気持ちになりました。 それだけでなく、この本を結構読むのが楽しく、平日の数日間で勢いで読み","content_html":"<p>(2024/09/22記) 2022年の9月に読んだ本の記事が、下書きとして残っていたままだったので公開します。</p>\n<hr>\n<p>業務で文字コードに触れる機会があったのですがそもそも文字コードというものに詳しくないので「改定新版 プログラマのための文字コード技術入門」という本を読みました。</p>\n<p>本を読む前は文字コードにはいくつかの規格があることを知っている程度の理解であったので、なによりもまず勉強になりました。また後述するいくつかの概念は背景とともに説明があって知っておかないと規格を理解しづらいので、本を買ってよかったという気持ちになりました。</p>\n<p>それだけでなく、この本を結構読むのが楽しく、平日の数日間で勢いで読み切ってしまうほどでした。</p>\n<h2>学べたこと: 文字の単位</h2>\n<p>私達が普段扱う文字は、何がひとつなのか、どれを同じ文字として扱うのか等の境界が実はあいまいで奥深いことを認識しました。\nたとえばbyte(8bit)単位で考えると、「あ」は2byteにも3byteにもなり得ます。UTF-16では多くの文字は4byteで表され、処理系においてもそう扱われることがありますが、「𠮟」はサロゲートペアなので8byteで1つの文字を表します。濁点のついた文字は「が」はそれ自体に符号位置が与えられている場合もありますし、「か」と「゛」を分けて符号化したものの結合文字として表現されることもあります。「𠮟」「叱」は十分に似ていそうですが、同じ文字でしょうか？「😀」は文字といえるでしょうか？\n普段当たり前にキーボードで入力している文字ですが、それらは符号化文字集合によって符号位置が定まっているだけでなく、複数の文字を一つの文字のように表す結合文字や、文字の単位としての書記素、どのような字形変化であれば同じ文字とみなすかを定めた漢字の包摂規則など、様々な概念に基づく定義の上に成り立っていることを認識しました。</p>\n<h2>学べたこと: ISO/IEC 2022の概念</h2>\n<p>1バイトや２バイトのメジャーな符号化方式のいくつかが従うISO/IEC 2022の符号化文字集合の符号位置と符号化方式のコードポイントの対応付の概念を学びました。</p>\n<p>G0-G3のバッファに符号面を呼び出した後、GLやGRにそれを呼び出し、呼び出し方を変えたり変えなかったりしながら文字列を表現するということを知りました。</p>\n<h2>そのほかに学べたこと</h2>\n<ul>\n<li>文字コードや符号化文字集合における「文字」はどう認識されているのか (byte，正規化、書記素、結合文字などの概念、包摂規則)</li>\n<li>文字コードのメジャーな規格とその変遷、文字コード間の関係</li>\n<li>ISO/IEC 2022の基本概念１バイト/2バイトの符号化方式で基本となるGL，GR，G0からG3のバッファ</li>\n<li>区点番号の概念</li>\n<li>BMPとサロゲートペア、utf-8のバイト数(3,4,6)、BOM</li>\n</ul>\n<h2>学べなかったこと</h2>\n<p>外字/機種依存文字の詳細</p>\n<h2>おわりに</h2>\n<p>というわけで、ここまでが下書きとして文章で書き出していた内容でした。</p>\n<p>2024年にはとりあえずutf8mb4に相当するようなものを使っておけば意識することのない文字コードですが、本を一冊読むとインデックスが生えて、必要な時の引き出しが増えるので便利です。</p>\n<p>本当は学んだことをあとから振り返りやすいようにもっと詳細に書きたくて箇条書きや単語レベルのメモを書いていたようですが、書ききっていなかったので以降はまた文字コードに思いを馳せるときがきた時のために、自分向けのメモとして残しておきます。</p>\n<h2>そのほかのメモ</h2>\n<h3>符号化文字集合</h3>\n<h3>JIS X 208</h3>\n<ul>\n<li>1978年に制定され、その後複数回改定された日本で最も基本的な２バイト符号化文字集合</li>\n<li>JIS第1水準、第2水準の漢字が含まれる</li>\n<li>ISO/IEC 2022準拠。第一バイト(行)第二バイト(列)ともに0x21-0x7Eの94行x94列に収まる組み合わせ</li>\n<li>区点番号 ... 94行x94列の表のどこに位置するかを表す表記。例えば愛は16行目六列目に位置するので16区6点という。</li>\n<li>対応する符号化方式としてShift_JISやEUC-JP、ISO-2022-JPなどがある</li>\n</ul>\n<h3>JIS X 212</h3>\n<ul>\n<li>JISX 208と組み合わせて使うことを前提とした２バイト符号化文字集合</li>\n<li>94x94</li>\n<li>EUC-JPでは使う方法が提供されているがShift_JISでは使えない</li>\n</ul>\n<h3>JIS X 213</h3>\n<ul>\n<li>JIS X 208を拡張した２バイト符号化文字集合</li>\n<li>2000年に制定され2004年に改定されたため、JIS2000、JIS2004などと呼ばれることがある</li>\n<li>JIS X 212とはかなりの文字が重複する</li>\n<li>94x94を2面持つ</li>\n<li>1面はJIS X 208の空き領域に文字を追加したもの(追加された漢字はJIS第3水準)</li>\n<li>2面は漢字のみ (JIS第4水準)\n<ul>\n<li>JIS X 212で定義されている区点番号を避けている</li>\n<li>EUC-JPのJIS X 212と区別がつくように</li>\n</ul>\n</li>\n<li>符号化方式としてはShift_JIS-2004、ISO-2022-JP、EUC-JIS-2004</li>\n</ul>\n<h3>Latin-1 (ISO/IEC 8859-1)</h3>\n<p>MySQL5系のデフォルトで設定されることでおなじみ\n8ビット1バイトの符号化文字集合で、西ヨーロッパ言語向けの文字をふくむ\nGLにASCIIを固定し、GRにLatin-1で定義した文字が使われる</p>\n<h3>そのほか書きたかったこと</h3>\n<ul>\n<li>JIS X 208 212 213 eucJP-ms IBM拡張</li>\n<li>Unicode ISO/IEC 10646(UCS) JIS X 0221</li>\n<li>BMP</li>\n<li>正規化</li>\n<li>書記素</li>\n<li>IBM拡張</li>\n<li>NEC拡張</li>\n<li>NEC選定IBM拡張</li>\n<li>EUC-JP(GLはASCIIで固定)</li>\n<li>eucJP-ms</li>\n<li>Shift_JIS EUC-JP JISX 208の関係</li>\n<li>各言語処理系での実装</li>\n<li>Rubyの実装(CP51932, EUC_JP, EUCJP_MS)</li>\n<li>PHPの実装</li>\n<li>Goの実装</li>\n</ul>","_history":[{"date":"2024-10-07T11:05:44+09:00","message":"最近の話題でもないのでソート順は過去に\n","hash":"f55e09fbff82ca07950fa8a713dfd54355204f9b"},{"date":"2024-09-23T00:03:04+09:00","message":"下書きに溜まっていたものを、記事として追加\n","hash":"4d4e5e542e3fdac52c900a62d9dc62dc041631ac"}],"date_published":"2022-09-01T23:42:09+09:00","tags":["日記","文字コード","技術書","本"]},{"id":"https://memo.yammer.jp/posts/clean-architecture","url":"https://memo.yammer.jp/posts/clean-architecture","title":"Clean Architectureを読んだ","summary":"書籍「Clean Architecture」を読みました。 副題は「達人に学ぶソフトウェアの構造と設計」となっており、ソフトウェアの構造や設計について見識をあまり持たない私は、この副題のとおり達人に学ぼうという気持ちで読みました。 本書で学べたこと (印象に残ったこと) 本書を読むことで、\"依存の方向\"と\"境界の決定\"に関する考え方を学びました。 これらをはじめとする、本書で学んだ考え方を以下に紹介します。 なおこの記事では、書籍のタイトルや内容に反して、クリーンアーキテクチャとは何かやクリーンアーキテクチャの図に関する話はほとんど出てきません。それを構成する考え方に重きをおいて紹介します。 ","content_html":"<p>書籍「<a href=\"https://www.kadokawa.co.jp/product/301806000678/\">Clean Architecture</a>」を読みました。\n副題は「達人に学ぶソフトウェアの構造と設計」となっており、ソフトウェアの構造や設計について見識をあまり持たない私は、この副題のとおり達人に学ぼうという気持ちで読みました。</p>\n<h2>本書で学べたこと (印象に残ったこと)</h2>\n<p>本書を読むことで、\"依存の方向\"と\"境界の決定\"に関する考え方を学びました。\nこれらをはじめとする、本書で学んだ考え方を以下に紹介します。</p>\n<p>なおこの記事では、書籍のタイトルや内容に反して、クリーンアーキテクチャとは何かやクリーンアーキテクチャの図に関する話はほとんど出てきません。それを構成する考え方に重きをおいて紹介します。\n以下に示す考え方をみてみると、同心円状に書かれるクリーンアーキテクチャの図も依存の方向と境界の決定などの考え方を適用してできあがる図であるといえると思っています。</p>\n<h3>依存の方向</h3>\n<p>アプリケーションのアーキテクチャにおいて、依存の方向を揃えることは重要です。</p>\n<p>(例えばJavaではインタフェースを定義するなどして<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>)ポリモーフィズムを利用して処理の流れとソースコード上の依存の向きを逆転<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>させることを、依存性の逆転と呼びます。\nこの依存性の逆転を用いて、クリーンアーキテクチャにおける上位のレベル (ビジネスロジックに近いもの) が下位のレベル (システムの入出力に近いもの) に依存しないよう、また循環依存とならぬよう、依存の向きを揃えることが様々なシチュエーションに適用して説明されています。</p>\n<h3>境界の決定</h3>\n<p>アプリケーションのアーキテクチャの検討において、実装の境界<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>をどこにどの程度明確に作るかは、状況ごとにその都度考えて決定する必要があります。\nなぜならば、アプリケーションの内容だけでなく、その周辺環境 (開発組織や開発頻度)、今後の開発計画など様々な要因で境界の最適解が異なるからです。</p>\n<p>ユースケースのすべて、運用上の制約、チームの構造、デプロイ要件などは実装前に明らかになっているとは限らないし、またこれは開発運用を続けるうちに変化していくものです。\nこれらの変化に合わせて適切なタイミングで適切に境界を定めて分割できるよう、選択肢を残しながらそのときどきに合わせて判断を続けていく必要があると考えられます。</p>\n<details>\n<summary>その他の事柄 (書籍で扱われる話題のメモ)</summary>\n<p>書籍で扱われているトピックが大変多いので、ここではメモとしていくつか列挙します。\n詳細については書籍にあたればわかる程度の粒度で記載しています。</p>\n<h4>アーキテクチャに関連する原則</h4>\n<p>この書籍では以下のように多数の原則が紹介されています。これらをすべて厳密に守りましょうと主張しているというよりも、これらの原則が言い表している物事の方向性を明らかにして、望むべきアーキテクチャを考えるヒントとしている、というように感じました。</p>\n<p>いっぽう私はこれらの原則に明るいわけではなかったので、どういうものか、いつ適用するか、何が嬉しいのかを把握することにも役立ちました。</p>\n<ul>\n<li>SOLID原則 (単一責任の原則、オープン・クローズドの原則、リスコフの置換原則、インターフェイス分離の原則、依存関係逆転の原則)</li>\n<li>コンポーネントの凝集性に関する原則 (再利用・リリース等価の原則、閉鎖性共通の原則、全再利用の原則)</li>\n<li>コンポーネントの結合に関する原則 (非循環依存関係の原則、安定依存の原則、安定度・抽象度等価の原則)</li>\n</ul>\n<h4>Mainコンポーネントは最も詳細</h4>\n<p>Mainコンポーネント (アプリケーションの起動時に実行されるコード) はもっとも詳細な部分であり、プラグインとして環境によって取り替えられるような作りにすべきであるという考え方が紹介されていました。</p>\n<p>例えばユニットテスト実行時を考えてみると、アプリケーションのエントリポイントとは別の箇所から処理の実行が始まるでしょう。\nつまりMainコンポーネントは、依存する側になるよう依存性の逆転を生かすべきコンポーネントのひとつであることがわかります。</p>\n<h4>アーキテクチャの変遷</h4>\n<p>(これは直接的には語られていませんが、ところどころで出現する話を私が解釈して勝手に書いています。)</p>\n<p>書籍の中ではアーキテクチャの完全な正解を教えてくれるというより、アーキテクチャを考える上でのいくつかの要素を揃えてくれているように思います。</p>\n<p>書籍の考え方を適用すると、マイクロサービスアーキテクチャや(本書では言葉こそ出てきませんが)モジュラーモノリスも、それらが特別なものではなく、境界の決定の仕方の選択肢のひとつであると感じました。</p>\n<h4>フレームワークなんかと結婚するな！</h4>\n<p>著者はフレームワークと結合することに否定的な考え方を持っています。\n昨今のWebアプリケーション開発ではフレームワークに則って作ることがよくあると思いますが、ロックインされないような開発方法を提示するとともに、フレームワークとの密な結合をとった場合の考え方を結婚に例えて「病めるときも...」と記述しているのが少し皮肉的です。</p>\n<hr>\n<p>このほかに、同心円状のクリーンアーキテクチャの図や、オブジェクト指向プログラミングがもたらしたものに関する記述も印象的でした。</p>\n<hr>\n</details>\n<h2>おわりに</h2>\n<p>この本は英語の原著に対する訳本だったのですが、文調がたいへん読みやすく感じました。著者/訳者の文章の書き方に憧れます。</p>\n<p>書籍の内容について、これはアプリケーションを設計/開発するときのヒントのひとつになる内容でした。\n今の自分にとっては結構よい本という感触がありますが、一方で全てを吸収する能力があったかというとこれは疑問です。開発経験のあるアプリケーションの数が多ければ、いまよりも詳細に書籍の指すことが理解できるだろうとも思います。</p>\n<p>この本を読んで、自分が関わるアプリケーションがどんなアーキテクチャを持っているかを考えるきっかけになりました。またよいアーキテクチャを提案する能力も一部学ぶことができました。一方で、よいアーキテクチャを選択する能力は本書を読んでもそれほど得られていないでしょう。書籍を通して学んだ考え方をもとに、実際のアプリケーションと照らし合わせて考えを膨らませ経験を重ねることで得られるように思います。\n精進します。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>書籍ではJavaを扱っているのでJavaを挙げていますが、いわゆる動的型付け言語ではインタフェースを定義せずとも同名のメソッドがあれば振る舞いが定まるポリモーフィズムが実現できそうです。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>ソースコード上の依存の向きは次のように考えられるでしょう。例えばあるインスタンスBをAが呼び出すときは、AはBに依存しているといえます。一方であるインタフェースCをAが呼び出し、BはインタフェースCを実装したクラスのインスタンスであったとすると、AはCに依存し、BもCに依存します。これによりAからBに向く依存がなくなり、依存性の逆転がなされたといえます。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>境界が何を指すのかは書籍では明確には定義されていないように思います。私が思うに、クラス、ファイル、ディレクトリ、(各言語に付属の)パッケージや名前空間、などがそれぞれ粒度の異なる境界といえるでしょう。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2022-08-23T23:29:52+09:00","message":"Post: 「Clean Architectureを読んだ」\n","hash":"059368b96cf8b005b40ab1ccf362eabb8864ce48"}],"date_published":"2022-08-23T23:30:00+09:00","tags":["本","ソフトウェア開発","アーキテクチャ"]},{"id":"https://memo.yammer.jp/posts/wireshark","url":"https://memo.yammer.jp/posts/wireshark","title":"WiresharkでHTTP通信の内容を確認する","summary":"Wiresharkはネットワークプロトコルアナライザとよばれるソフトウェアで、通信の内容を確認することができる。 以下では簡単な使い方として、curlコマンドを使って手元のPCからインターネット上のサーバへHTTP通信した場合のパケットの内容を、tcpdumpでキャプチャし、最後にWiresharkのGUI画面上で確認する手順を示す。 なお、実行したPCは macOS 11.6 BigSur (Apple M1) だが、他の環境でも同様の手順で実行できると思われる。 パケットのキャプチャ まずはじめに、キャプチャするパケットを絞り込めるよう、事前に通信先のIPアドレスを調べておく。 次に、tc","content_html":"<p><a href=\"https://www.wireshark.org\">Wireshark</a>はネットワークプロトコルアナライザとよばれるソフトウェアで、通信の内容を確認することができる。</p>\n<p>以下では簡単な使い方として、curlコマンドを使って手元のPCからインターネット上のサーバへHTTP通信した場合のパケットの内容を、tcpdumpでキャプチャし、最後にWiresharkのGUI画面上で確認する手順を示す。\nなお、実行したPCは macOS 11.6 BigSur (Apple M1) だが、他の環境でも同様の手順で実行できると思われる。</p>\n<h2>パケットのキャプチャ</h2>\n<p>まずはじめに、キャプチャするパケットを絞り込めるよう、事前に通信先のIPアドレスを調べておく。\n次に、tcpdumpコマンドをsudoで実行し、キャプチャするパケットの通信先IPアドレスを指定した上で、内容を適当なファイルに書き込む。 (ここでは<code>/tmp/memo-yammer-jp</code>とする。)</p>\n<p>(後述のcurlコマンド実行後、キャプチャが終わったらCtrl-cで終了する。)</p>\n<pre><code class=\"hljs language-shell\">$ dig @8.8.8.8 memo.yammer.jp +short\n199.36.158.100\n$ sudo tcpdump host 199.36.158.100 -w /tmp/memo-yammer-jp\nPassword:\ntcpdump: data link type PKTAP\ntcpdump: listening on pktap, link-type PKTAP (Apple DLT_PKTAP), capture size 262144 bytes\n^C11 packets captured\n243 packets received by filter\n0 packets dropped by kernel\n</code></pre>\n<p>別のウィンドウでシェルを開き、curlコマンドを実行してキャプチャされるパケットを送受信する。\nここでは内容が確認できるよう、暗号化されていないHTTPプロトコルを指定している。</p>\n<pre><code class=\"hljs language-shell\">$ curl http://memo.yammer.jp --verbose\n*   Trying 199.36.158.100...\n* TCP_NODELAY set\n* Connected to memo.yammer.jp (199.36.158.100) port 80 (#0)\n> GET / HTTP/1.1\n> Host: memo.yammer.jp\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n&#x3C; HTTP/1.1 301 Moved Permanently\n&#x3C; Server: Varnish\n&#x3C; Retry-After: 0\n&#x3C; Location: https://memo.yammer.jp/\n&#x3C; Content-Length: 0\n&#x3C; Accept-Ranges: bytes\n&#x3C; Date: Tue, 23 Aug 2022 13:26:48 GMT\n&#x3C; Connection: close\n&#x3C; X-Served-By: cache-hnd18733-HND\n&#x3C; X-Cache: HIT\n&#x3C; X-Cache-Hits: 0\n&#x3C; X-Timer: S1661261209.536052,VS0,VE0\n&#x3C;\n* Closing connection 0\n</code></pre>\n<h2>パケットの内容の確認</h2>\n<p>tcpdumpをCtrl-cで終了し、パケットがキャプチャできたら、出力されたファイルをWireshark<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>から確認してみる。\nWiresharkを起動し、ファイルを開くボタンを選択する。</p>\n<p><img src=\"https://blob.yammer.jp/wireshark-start-up.png\" alt=\"Wiresharkの起動画面\"></p>\n<p>次に、ファイル名を指定して開く。</p>\n<p><img src=\"https://blob.yammer.jp/wireshark-open-file.png\" alt=\"Wiresharkでファイル名を指定して開く\"></p>\n<p>すると、パケットのキャプチャ結果が表示され、画面の中央部にはHTTPのヘッダが表示されているのがわかる。</p>\n<p><img src=\"https://blob.yammer.jp/wireshark-capture-packet.png\" alt=\"Wiresharkで表示したHTTPのヘッダ\"></p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>Wiresharkは次のURLからダウンロードできる。 <a href=\"https://www.wireshark.org/download.html\">https://www.wireshark.org/download.html</a> <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-08-23T23:04:23+09:00","message":"Post: 「WiresharkでHTTP通信の内容を確認する」\n","hash":"c053e4613f9e80d0e0e9a7c46a9744cc9df74fde"}],"date_published":"2022-08-23T22:32:06+09:00","tags":["ネットワーク","Wireshark","HTTP","TCP","tcpdump"]},{"id":"https://memo.yammer.jp/posts/zsh-abbr","url":"https://memo.yammer.jp/posts/zsh-abbr","title":"abbrはじめました。","summary":"同僚に教えてもらった zsh-abbrを導入しました。 zsh-abbrとは abbr は abbreviation の略で、おそらくもともとfish shellに組み込まれた機能とコマンド名を指しているようです。fishのabbrコマンドは、短いコマンド名を展開するalias コマンドに似た働きをするものです。 aliasコマンドとの違いは以下のようなところにあります 実行前にプロンプト上で短いコマンド名を展開してから実行される historyには展開された結果が記録に残る 短いコマンド名を入力したあとスペースキーを入力しても、プロンプト上で展開される zsh-abbrはfishのabbrコ","content_html":"<p>同僚に教えてもらった <a href=\"https://github.com/olets/zsh-abbr\">zsh-abbr</a>を導入しました。</p>\n<h2>zsh-abbrとは</h2>\n<p>abbr は abbreviation の略で、おそらくもともとfish shellに組み込まれた機能とコマンド名を指しているようです。fishのabbrコマンドは、短いコマンド名を展開するalias コマンドに似た働きをするものです。</p>\n<p><code>alias</code>コマンドとの違いは以下のようなところにあります</p>\n<ul>\n<li>実行前にプロンプト上で短いコマンド名を展開してから実行される\n<ul>\n<li>historyには展開された結果が記録に残る</li>\n</ul>\n</li>\n<li>短いコマンド名を入力したあとスペースキーを入力しても、プロンプト上で展開される</li>\n</ul>\n<p>zsh-abbrはfishのabbrコマンドと同等のものをzsh上でも再現できるzshプラグインです。筆者はzshを使っているので、本記事ではzsh-abbrを導入します。</p>\n<h2>導入</h2>\n<p>なるべくシンプルな状態を維持する目的でzshプラグインは入れないようにしていたのですが、複数のホストで環境を再現しやすいよう、zsh-abbrを導入するにあたってプラグインマネージャーも一緒に導入しました。</p>\n<p>zshプラグインは速そうな<a href=\"https://github.com/zdharma-continuum/zinit\">Zinit</a>を選びました。</p>\n<h3>Zinitの導入</h3>\n<p>インストールはREADMEに書いてある通り進めるだけです。</p>\n<pre><code class=\"hljs language-shell\">$ bash -c \"$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)\"\n</code></pre>\n<p>上記のコマンドを実行すると、<code>~/.zshrc</code> に設定の読み込みなどが追記されるので <code>source ~/.zshrc</code> として読み込めば利用できるようになっています。</p>\n<h3>zsh-abbrの導入</h3>\n<p>github.comに公開されているzshプラグインは、ユーザ名とリポジトリ名を指定すると利用できるようになります。\n以下の一行を <code>~/.zshrc</code> の、Zinitの読み込み処理の下に記述しました。</p>\n<pre><code class=\"hljs language-zsh\"># ~/.zshrc\nzinit light olets/zsh-abbr\n</code></pre>\n<p>ref: <a href=\"https://github.com/zdharma-continuum/zinit#loading-and-unloading\">https://github.com/zdharma-continuum/zinit#loading-and-unloading</a></p>\n<h3>導入例</h3>\n<p>ここまでの記述は、<code>~/.zshrc</code>などの起動時の読み込まれるzshスクリプト内に記述すると良いでしょう。</p>\n<p>一例として、以下のようになるかと思います。</p>\n<pre><code class=\"hljs language-zsh\"># ~/.zshrc\n\n# Zinitのインストール時に挿入される、初期化関連の記述\n### Added by Zinit's installer\nif [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then\n    print -P \"%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f\"\n    command mkdir -p \"$HOME/.local/share/zinit\" &#x26;&#x26; command chmod g-rwX \"$HOME/.local/share/zinit\"\n    command git clone https://github.com/zdharma-continuum/zinit \"$HOME/.local/share/zinit/zinit.git\" &#x26;&#x26; \\\n        print -P \"%F{33} %F{34}Installation successful.%f%b\" || \\\n        print -P \"%F{160} The clone has failed.%f%b\"\nfi\n\nsource \"$HOME/.local/share/zinit/zinit.git/zinit.zsh\"\nautoload -Uz _zinit\n(( ${+_comps} )) &#x26;&#x26; _comps[zinit]=_zinit\n\n### End of Zinit's installer chunk\n\n# Zinitを用いてzsh-abbrを利用する\nzinit light olets/zsh-abbr\n</code></pre>\n<h2>設定</h2>\n<h3>zsh-abbrの設定</h3>\n<p>zsh-abbrには、既に貼られているaliasを読み込んで保持する機能があります。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>\n今回はこれを利用することにして、以下のコマンドを実行します。</p>\n<pre><code class=\"hljs language-shell\">$ abbr import-aliases\n</code></pre>\n<p>gitのaliasもzsh-abbrで展開する機能が備わっているようなので、同様にgitのaliasも読み込みます。</p>\n<pre><code class=\"hljs language-shell\">$ abbr import-git-aliases\n</code></pre>\n<p><code>import-git-aliases</code>を利用すると、gに続けてエイリアスをタイプしたり、もしくはエイリアスを直接コマンドとしてプロンプトに入力すると展開されます。\nたとえば私は <code>git d</code> が <code>git diff</code> となるようなエイリアスをgitの設定に書き込んでいます。この場合、プロンプトに <code>gd</code> や <code>d</code> と入力すると <code>git diff</code> が実行されることになります。</p>\n<h3>細かな工夫</h3>\n<h4>git aliasの入れ子を排除</h4>\n<p>私のもともとの設定にはgitやzshのaliasが入れ子になっている場合があったため、入れ子を排除するような記述に書き換えました。</p>\n<p>たとえば、gitでは以下のような設定をしていました。</p>\n<pre><code># ~/.gitconfig\n[alias]\n        di = \"diff --ignore-all-space\"\n        ds = \"di --staged\"\n</code></pre>\n<p>このようなとき、zsh-abbrは <code>gds</code> を <code>git di --staged</code> とは展開してくれますが、 <code>git diff --ignore-all-space --staged</code> とまでは展開してくれません。\n全て展開するために、aliasが入れ子にならないよう、以下のように設定を書き換えることとしました。</p>\n<pre><code># ~/.gitconfig\n[alias]\n        di = \"diff --ignore-all-space\"\n        ds = \"diff  --ignore-all-space --staged\"\n</code></pre>\n<h4>あえてgit aliasを入れ子にする</h4>\n<p>gitのaliasのうちコマンド実行であるもの (<code>!</code>で始まるもの) は展開に対応していないようなので<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>、これらはあえてaliasを張っています。</p>\n<p>以下に例を示します。\n登録しているgitのaliasを表示するコマンド <code>alias</code> と <code>als</code> をgitの設定に記述しています。</p>\n<pre><code># ~/.gitconfig\n[alias]\n        alias = \"!git config --list | grep -e '^alias' | sed -e 's/alias\\\\.//' -e 's/=/\\\\t\\\\t/'\"\n        als = alias\n</code></pre>\n<p>この場合<code>alias</code> はabbrに対応していませんが、その短縮系である<code>als</code>はabbrに対応しています。\nつまり <code>galias</code> は実行できませんが、<code>gals</code> とコマンド入力すると abbrを介して <code>git alias</code> が実行されます。\nさらにこれはgitのもともとのalias機能を介してコマンド実行がなされるので、gitのaliasの一覧が表示されるということになります。</p>\n<p>gitのaliasについて、入れ子に対応していないこととコマンド実行に対応していないことをうまく活かして一部展開されるような状態をつくってみました。</p>\n<h2>感想</h2>\n<p>実行時にどんなコマンドを実行しているか都度表示されることで、画面共有時などに役立ちそうです。\nhistoryの検索に展開されたものが記録されるという恩恵はしばらく使い続けないと効果が感じられないと思うので、この設定で運用してみようと思います。</p>\n<p>ちなみにタイトルについて補足しておくと、冷やし中華はまだ始めていません。(今夏食べた記憶がない。)</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>保存した内容は<code>abbr</code>コマンドで操作できるようです。また記録先としては<code>$ABBR_USER_ABBREVIATIONS_FILE</code>に保存されているようです。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p><a href=\"https://github.com/olets/zsh-abbr/blob/91280150cf8de09f84ab02c00fc04605400ea914/zsh-abbr.zsh#L337\">https://github.com/olets/zsh-abbr/blob/91280150cf8de09f84ab02c00fc04605400ea914/zsh-abbr.zsh#L337</a> <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-08-04T10:26:46+09:00","message":"Post: 「abbrはじめました。」\n","hash":"2186bf55fd9cc7e25014e1a1b36e1663723f058e"}],"date_published":"2022-08-04T10:26:00+09:00","tags":["dotfiles","zsh"]},{"id":"https://memo.yammer.jp/posts/software-design-202206","url":"https://memo.yammer.jp/posts/software-design-202206","title":"Software Designへ寄稿しました (2022年6月号 第1特集 Appendix dotfilesのススメ)","summary":"技術評論社のSoftware Design 2022年6月号 第1特集 Appendix へ「dotfilesのススメ」という記事を寄稿させていただきました。 本日5/18発売で、全国の書店やWebでお買い求めいただけます。 「dotfilesのススメ」は、UnixやLinuxなどでツールの設定を記述するファイルであるdotfilesの管理構成をつくるハンズオン記事になっています。 GitHub上にdotfilesリポジトリをつくることを通してdotfilesに入門できます。 .bashrcや.zshrcや.gitconfigに何書いてるかよくわからない方、dotfilesをあまり知らない方、","content_html":"<p>技術評論社の<a href=\"https://gihyo.jp/magazine/SD/archive/2022/202206\">Software Design 2022年6月号</a> 第1特集 Appendix へ「dotfilesのススメ」という記事を寄稿させていただきました。\n本日5/18発売で、全国の書店やWebでお買い求めいただけます。</p>\n<p>「dotfilesのススメ」は、UnixやLinuxなどでツールの設定を記述するファイルであるdotfilesの管理構成をつくるハンズオン記事になっています。\nGitHub上にdotfilesリポジトリをつくることを通してdotfilesに入門できます。</p>\n<p><code>.bashrc</code>や<code>.zshrc</code>や<code>.gitconfig</code>に何書いてるかよくわからない方、dotfilesをあまり知らない方、dotfilesの管理が気になっているんが手をつけていない方などにぜひ読んでいただきたい内容になっています。</p>\n<p><img src=\"https://blob.yammer.jp/software-design-202206-2.jpg\" alt=\"Software Design 6月号\"></p>\n<p>寄稿のきっかけは、 技術評論社の方が私の書いたブログ記事を読んでメールをくださったことでした。\n執筆の経験がなかったのでメールをいただいたときは大変驚きましたが、いまは無事寄稿を終えて安堵しています。</p>\n<p>このブログは技術メモをはじめとして自分が忘れないための備忘録や日本語の文章を書く練習として始めたものです。\nブログを書いてアウトプットすることは思考を整理したり良いものを共有したりするだけでなく偶然の機会を生むこともあるので、改めて文章を書くことを続けていこうと思います。</p>\n<p>執筆にあたり、Software Designの編集を担当してくださった担当者様やレビューをしてくださった上長に大変お世話になりました。\n執筆や校正に関してフォローいただきありがとうございました。</p>\n<p>さてさて、この記事を呼んだ皆様方はどうぞ書籍を手にとってご覧いただき、ご購入ください！\n寄稿記事の感想はぜひ<a href=\"https://gihyo.jp/magazine/support/questionnaire\">技術評論社のプレゼント応募付き読者アンケート</a>や<a href=\"https://twitter.com/yammerjp\">@yammerjp</a>にお寄せいただけると嬉しいです。\n記事の寄稿依頼はメール(me[at]yammer.jp)ないし<a href=\"https://twitter.com/yammerjp\">@yammerjp</a>までお寄せください。</p>","_history":[{"date":"2022-05-18T11:02:16+09:00","message":"Post: 「Software Designへ寄稿しました (2022年6月号 第1特集 Appendix dotfilesのススメ)」\n","hash":"0a43aa06b882e9bbb6a8da90e1d779f6412048cb"}],"date_published":"2022-05-18T11:00:00+09:00","tags":["SoftwareDesign","dotfiles","Shell","bash"]},{"id":"https://memo.yammer.jp/posts/cocot46","url":"https://memo.yammer.jp/posts/cocot46","title":"cocot46を組み立てた(Build Log)","summary":"トラックボールとロータリーエンコーダを搭載したキーボード、cocot46を組み立てました。 40%でColumn staggeredな配列が魅力的なキーボードです。 経緯 購入のきっかけはcocot46の作者の@aki27kbdさんが再販予定をツイートされているのを見かけたことでした。 https://twitter.com/aki27kbd/status/1515311831375843335 トラックボール一体型のキーボードが気になっていたものの、1Uのトラックボールユニットは終売となっていて手に入れるのが難しそうだと思っていた時だったので、ツイートをみかけて嬉しくなりました。 このあとは","content_html":"<p>トラックボールとロータリーエンコーダを搭載したキーボード、cocot46を組み立てました。\n40%でColumn staggeredな配列が魅力的なキーボードです。</p>\n<h2>経緯</h2>\n<p>購入のきっかけはcocot46の作者の<a href=\"https://twitter.com/aki27kbd\">@aki27kbd</a>さんが再販予定をツイートされているのを見かけたことでした。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/cocot46lp?src=hash&#x26;ref_src=twsrc%5Etfw\">#cocot46lp</a> は、手持ちのトラックボールモジュール在庫の数だけキットに同梱したものを近日中にboothにて頒布します。無印の <a href=\"https://twitter.com/hashtag/cocot46?src=hash&#x26;ref_src=twsrc%5Etfw\">#cocot46</a> も同様にトラックボールモジュールを同梱したものを遊舎工房に委託予定です。どちらも在庫限りとなる予定なので、気になる方はこの機会にぜひ。</p>— aki27 (@aki27kbd) <a href=\"https://twitter.com/aki27kbd/status/1515311831375843335?ref_src=twsrc%5Etfw\">April 16, 2022</a></blockquote></p>\n<p>トラックボール一体型のキーボードが気になっていたものの、1Uのトラックボールユニットは終売となっていて手に入れるのが難しそうだと思っていた時だったので、ツイートをみかけて嬉しくなりました。\nこのあとは再販するのを待っていて、在庫が復活した日に注文しました。\nその日の夜には売り切れていたので、トラックボール一体型のキーボードを求めている人が結構いるのかもしれません。</p>\n<h2>買ったもの</h2>\n<p>キースイッチはPlanck Keyboardに取り付けていて静音性に安心感のあるGateron Ink v2 Silent Blackを使用しました。</p>\n<p>キーキャップもPlanck Keyboardのときにお世話になったTALP Keyboardのブランクキーキャップを選びました。あらたにアプリコットのキーを買いましたが、色味がかわいいので気に入っています。</p>\n<p><img src=\"https://blob.yammer.jp/cocot46-0.jpg\" alt=\"\"></p>\n<p>写真にはシルバーのロータリーエンコーダ用ノブが写っていますが、これは寸法的に取り付けられず誤って買ってしまったものでした。ロータリーエンコーダにノブが付属しているので今のところは困っていません。</p>\n<table>\n<thead>\n<tr>\n<th>商品名</th>\n<th>個数</th>\n<th align=\"right\">単価(円)</th>\n<th align=\"right\">小計(円)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://shop.yushakobo.jp/products/2817?variant=40863445549217\">【委託】cocot46（トラックボールモジュール付き）</a></td>\n<td>1</td>\n<td align=\"right\">16000</td>\n<td align=\"right\">16000</td>\n</tr>\n<tr>\n<td><a href=\"https://shop.yushakobo.jp/products/3762\">ロータリーエンコーダ 24クリック / プッシュスイッチ付き / 高さ20mm (EC12互換品)</a></td>\n<td>1</td>\n<td align=\"right\">330</td>\n<td align=\"right\">330</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.net/items/60f987230d4f3a07a4652ec3\">XDA PBT ブランク キーキャップ (ホワイト/2個)</a></td>\n<td>19</td>\n<td align=\"right\">110</td>\n<td align=\"right\">2090</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.net/items/616a3e71ac36613c126c4fa0\">XDA PBT ブランク キーキャップ (アプリコット/2個)</a></td>\n<td>4</td>\n<td align=\"right\">110</td>\n<td align=\"right\">440</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.stores.jp/items/5b6e593d5f78663893000482\">XDA PBT ブランク キーキャップ (グレー/2個)</a></td>\n<td>4</td>\n<td align=\"right\">110</td>\n<td align=\"right\">440</td>\n</tr>\n<tr>\n<td><a href=\"https://shop.yushakobo.jp/products/gateron-ink-switches\">Gateron Ink スイッチ v2 (10個入り) Silent Black</a></td>\n<td>5</td>\n<td align=\"right\">1320</td>\n<td align=\"right\">6600</td>\n</tr>\n<tr>\n<td>TALP KEYBOARD キースイッチ 10個以上購入で5%オフ</td>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">-95</td>\n</tr>\n<tr>\n<td>TALP KEYBOARD 送料</td>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">300</td>\n</tr>\n<tr>\n<td><strong>合計</strong></td>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">25805</td>\n</tr>\n</tbody>\n</table>\n<p>40%だからということもありますが、結構安い気がします。\n特にcocot46のキットは、同梱されていたパーツが多かった割に値段が安かったように思います。</p>\n<h2>組み立て</h2>\n<p>組み立ては<a href=\"https://github.com/aki27kbd/cocot46/blob/main/doc/buildguide.md\">ビルドガイド</a>の通りに素直に進めました。\nチップ抵抗を途中で机の下に落として探す工程が一番難しかったです。</p>\n<p>組み立てたのちに、Google ChromeからREMAPを開いてファームウェアを書き込み、その後REMAP上から配列の設定などを行いました。</p>\n<p><img src=\"https://blob.yammer.jp/cocot46-4-2.jpg\" alt=\"\"></p>\n<h2>こだわり</h2>\n<h3>配列</h3>\n<p>基本はPlanck Keyboardに設定していた時のものを踏襲し、QWERTY配列でレイヤを4つ配置し、うち3つを普段から使うものとしました。\n配列には以下のようなこだわりを含んでいます。</p>\n<ul>\n<li>矢印キーはレイヤーキーとhjklの同時押し (Vimライクな配列)</li>\n<li>macOSの絵文字入力ウィンドウ用キー (Ctrl + Cmd + Space) を配置</li>\n<li>macOSのウィンドウ切り替え用ショートカット (Ctrl + ↑) を配置</li>\n</ul>\n<p>cocot46はロータリーエンコーダを回転させるとPageUp, PageDownが入力される配列となっており、ロータリーエンコーダを回してスクロールするのが楽しいです。</p>\n<p>PageUp, PageDownでは移動幅が大きすぎるときのために、Karabiner Elementsを使って、ロータリーエンコーダを押し込んだときはトラックボールの移動がスクロール入力になるような設定を追加しています。</p>\n<p>ref: <a href=\"https://ke-complex-modifications.pqrs.org/#mouse_motion_to_scroll\">Change mouse motion to scroll (rev 3)</a></p>\n<p><img src=\"https://blob.yammer.jp/keymap_cheatsheet_cocot46.png\" alt=\"cocot46のキーマップ\"></p>\n<h3>ケーブル</h3>\n<p>Pro MicroとPCの接続には<a href=\"https://www.amazon.co.jp/%E3%82%B5%E3%83%B3%E3%83%AF%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88-microUSB%E3%82%B1%E3%83%BC%E3%83%96%E3%83%AB-%E3%83%9E%E3%82%B0%E3%83%8D%E3%83%83%E3%83%88%E7%9D%80%E8%84%B1%E5%BC%8F-QuickCharge-500-USB060/dp/B07GQVHP67/ref=asc_df_B07GQVHP67/\">マグネット式で着脱できるUSBケーブル</a>を用いています。\nケーブルの脱着が楽になるだけでなく、力がかかると外れる特性を活かして端子の保護としても働いています。</p>\n<p><img src=\"https://blob.yammer.jp/cocot46-2.jpg\" alt=\"\"></p>\n<h3>ホームポジション</h3>\n<p>ブランクキーキャップのみで構成されていてホームポジションを示す突起がないので、ひとまずマスキングテープを貼り付けて、触り心地だけでホームポジションがわかるようにしました。\n色味が外側のキーと似ていて満足しています。</p>\n<p><img src=\"https://blob.yammer.jp/cocot46-3.jpg\" alt=\"\"></p>\n<h2>改良したいところ</h2>\n<p>以下の気になる点をファームウェアや配列やキーキャップに手を入れて、より気に入った環境をつくっていこうと考えています。</p>\n<h3>レイヤーキーの反応時間/反応順</h3>\n<p>レイヤーキーと同時押しで入力する<code>-</code> (ハイフン) が、押下タイミングの癖で、デフォルトレイヤーの<code>c</code> が入力されてしまうことが多いです。\nおそらく親指(レイヤーキー)の押すタイミングが遅いまたは離すタイミングが早いことに起因して、素早く入力するときにうまくデフォルトレイヤー外のキーを押せないでいます。</p>\n<p>過去に他のキーボードでファームウェアに手を入れて解決したような気がするので、思い出したら同様の処置をしようかと思っています。(対策前に慣れる可能性もありそうです)</p>\n<h3>左クリック/右クリックのキーの差別化</h3>\n<p>トラックボールを触りながらだと左クリック/右クリックキーを他のキーと押し間違えるので、高さの違うキーキャップに変えるなり位置を変えるなりしようか考えています。(これも対策前に慣れる可能性もありそうです)</p>\n<h3>最下段のキー配列の見直し</h3>\n<p>現在の配列は、右下に配置したウィンドウ切替用の Ctrl + ↑キーと、その隣ののBack Spaceキーを押し間違えがちです。\n押し間違えても影響が小さくなる/押し間違えずに済むように、最下段のキー配列を改めて考え直そうと思っています。</p>\n<h2>おわりに</h2>\n<p>トラックボール一体型のキーボードは、手首の移動距離を短くしたり机上をスッキリさせたいという思惑がありました。\nこのどちらも満たせたので嬉しいです。\nまだ使い慣れていないので、しばらくはcocot46で生活していこうと思います。</p>\n<p>(この記事はcocot46で書かれました。)</p>\n<p><img src=\"https://blob.yammer.jp/cocot46-1.jpg\" alt=\"\"></p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2022-05-17T02:29:18+09:00","message":"Post: 「cocot46を組み立てた(Build Log)」\n","hash":"3bd329264fdbc335a7f083d7347d590f74423012"}],"date_published":"2022-05-17T02:30:00+09:00","tags":["自作キーボード"]},{"id":"https://memo.yammer.jp/posts/24-years-old","url":"https://memo.yammer.jp/posts/24-years-old","title":"歳をとった","summary":"先月誕生日を迎えて歳をとりました。 干芋で祝ってくださった同期の方々、ありがとうございました！ 送っていただいてから少し時間が経ってしまっているものもありますが、感謝をこめて紹介します。 ちいさめの水筒。社の食堂でのみものを入れるのに重宝します。蓋がしっかりついているので変にこぼしたりする不安もなくてとてもよいです。 レンジでパスタ。4人前まで一気に茹でられる大きいもので、パスタを茹でる時に鍋を使わなくていいのがよいです！パスタは簡単に素早くつくれるので、リモートワークのお昼になりがちです。 2個あるので8人までいけます！(そんなには茹でない) 人に頼む技術。こういうことができるようになると、","content_html":"<p>先月誕生日を迎えて歳をとりました。</p>\n<p>干芋で祝ってくださった同期の方々、ありがとうございました！\n送っていただいてから少し時間が経ってしまっているものもありますが、感謝をこめて紹介します。</p>\n<p><img src=\"https://blob.yammer.jp/wish-list-202204-0.jpg\" alt=\"\"></p>\n<p>ちいさめの水筒。社の食堂でのみものを入れるのに重宝します。蓋がしっかりついているので変にこぼしたりする不安もなくてとてもよいです。</p>\n<p>レンジでパスタ。4人前まで一気に茹でられる大きいもので、パスタを茹でる時に鍋を使わなくていいのがよいです！パスタは簡単に素早くつくれるので、リモートワークのお昼になりがちです。\n2個あるので8人までいけます！(そんなには茹でない)</p>\n<p>人に頼む技術。こういうことができるようになると、仕事をよりうまく回せるようになりそうでよいなあと思います。</p>\n<p>シェル・ワンライナー160本ノック。シェル芸に憧れがあるので、身につけていきます！</p>\n<p>ホットプレート/たこ焼き器。これのおかげで新居でたこ焼きができるようになりました！同期を呼んでタコパをしたい。</p>\n<p><img src=\"https://blob.yammer.jp/wish-list-202204-5.jpg\" alt=\"\"></p>\n<p>たこ焼きはシャバシャバの液で、一面溢れるくらいに流して作るとまんまるになることを学びました。\n写真にあるのはちょうど今日日曜日の夜に食べたものですが、家で作ったたこやきのなかで相当上位の出来 (形) だと自負しています。</p>\n<p><img src=\"https://blob.yammer.jp/wish-list-202204-1.jpg\" alt=\"\"></p>\n<p>オレオ (箱買い)。美味しいですよね、オレオ。箱買いでたくさんあるのでしばし安泰かと思いきや結構なスピードで食べてしまっていてもう残り半分を切っています。</p>\n<p><img src=\"https://blob.yammer.jp/wish-list-202204-2.jpg\" alt=\"\"></p>\n<p>クリーニングブラシ。机の上、モニター周りにほこりがたまりがちなのでこれで綺麗にします。</p>\n<p>焼き芋メーカー。ちょっと気になっていたものだったんですが、コンセントにつないで放置するだけで焼き芋ができる面白いものです。</p>\n<p><img src=\"https://blob.yammer.jp/wish-list-202204-3.jpg\" alt=\"\"></p>\n<p>べにはるかを買ってつくってみたら、しっとりやわらか食感に仕上がって、蜜が飛び出てきてとても美味でした。</p>\n<p><img src=\"https://blob.yammer.jp/wish-list-202204-4.jpg\" alt=\"\"></p>\n<p>Kubernetes完全ガイド。Kubernetesなんもわからんので勉強します..</p>\n<p>Clean Architecture。業務のアプリケーションに触れるようになってから、設計めちゃ大事だなという気持ちを強くしているので、学びます。</p>\n<hr>\n<p>昨年の1年は就職したというのもあってやはり仕事のことが印象に残っています。\nがむしゃらでやらないとどうしようもないところもあるのですが、今年はプライベートも充実させられるよう、うまく物事をコントロールできたらよいと考えています。</p>","_history":[{"date":"2022-05-17T02:24:14+09:00","message":" Post: 「歳をとった」\n","hash":"18058b98ede1bbc960de46b55c8b246620a9b68e"}],"date_published":"2022-05-17T02:25:00+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/devide-bashrc","url":"https://memo.yammer.jp/posts/devide-bashrc","title":"秘匿情報を含む.bashrcを分割する","summary":"dotfiles(ドットで始まる設定ファイル)の管理のために、Gitリポジトリを作成しGitHubにdotfilesという名前で公開するときに注意すべきこととして秘匿情報の扱いが挙げられます。 秘匿情報が .bashrc に含まれているとき、それをそのままGit管理してGitHubに公開することには問題があります。 ここでいう秘匿情報とはGitHubのパーソナルアクセストークンやAWSのアクセス用シークレットキーなどの認証時のパスワードの代替となるようなものをはじめとする、他の人に見せてはいけない情報のことです。 こういった内容を含む.bashrcは分割し、秘匿情報の含まない部分のみGit管理","content_html":"<p>dotfiles(ドットで始まる設定ファイル)の管理のために、Gitリポジトリを作成しGitHubにdotfilesという名前で公開するときに注意すべきこととして秘匿情報の扱いが挙げられます。</p>\n<p>秘匿情報が <code>.bashrc</code> に含まれているとき、それをそのままGit管理してGitHubに公開することには問題があります。\nここでいう秘匿情報とはGitHubのパーソナルアクセストークンやAWSのアクセス用シークレットキーなどの認証時のパスワードの代替となるようなものをはじめとする、他の人に見せてはいけない情報のことです。</p>\n<p>こういった内容を含む<code>.bashrc</code>は分割し、秘匿情報の含まない部分のみGit管理下に置くのがよいでしょう。</p>\n<p>今回は以下のような<code>~/.bashrc</code>があったとき、秘匿情報の含む部分と含まない部分に分割する手法を紹介します。</p>\n<pre><code class=\"hljs language-bash\"># ~/.bashrc\n\n# 秘匿情報\nGITHUB_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nAWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n# 秘匿情報以外の記述\nalias his=\"cat $HISTFILE | grep\"\n</code></pre>\n<p>このファイルを秘匿情報の含む<code>~/.bashrc.local</code>と秘匿情報の含まない<code>~/.bashrc</code>に分割します。\nさらに、秘匿情報の含まない<code>~/.bashrc</code>は、秘匿情報の含む<code>~/.bashrc.local</code>を内部で読み込むようにします。</p>\n<pre><code class=\"hljs language-bash\"># ~/.bashrc-private\n\n# 秘匿情報\nGITHUB_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nAWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>\n<pre><code class=\"hljs language-bash\"># ~/.bashrc\n\n# 秘匿情報を読み込む\nsource ~/.bashrc.local\n\n# 秘匿情報以外の記述\nalias his=\"cat $HISTFILE | grep\"\n</code></pre>\n<p><code>source</code>はBashの組み込みコマンドのひとつで、指定したファイルを読み込みカレントシェルで実行します。\nこの例で言えば、<code>source</code>コマンドが書かれている部分に<code>~/.bashrc.local</code>の内容が書かれているのと同じ動きになります。</p>\n<p>こうすることで、<code>~/.bashrc</code>はGitリポジトリに含めて公開しても問題ない状態になりました。\n<code>source ~/.bashrc.local</code> という記述から何らかの情報を読み込んでいることはわかりますが、その中身が何であるかは<code>.bashrc</code>を読んでもわかりません。</p>\n<p>この記事に従って秘匿情報を分割した場合、以降<code>~/.bashrc.local</code> は公開せずに手元の環境に留めておくようにしてください。</p>\n<p>なお、今回のような<code>.bashrc</code>の分割は秘匿情報に限らず他のことにも応用できます。\n特定のOSのみ指定したファイルを読み込むようなif文を記載すれば、設定をOSによって切り替えることも可能です。</p>","_history":[{"date":"2022-04-11T04:49:04+09:00","message":"Post: 「秘匿情報を含む.bashrcを分割する」\n","hash":"feaae550d2df0a1c641d8f3c9642a1375cf83ee7"}],"date_published":"2022-04-11T04:52:00+09:00","tags":["dotfiles","bash"]},{"id":"https://memo.yammer.jp/posts/moving-to-saitama","url":"https://memo.yammer.jp/posts/moving-to-saitama","title":"神奈川県民から埼玉県人へ","summary":"2年ほど実家に戻っていましたが改めて引っ越し、神奈川県民から埼玉県人になりました。 ちなみに神奈川では県\"民\"と言うけれど埼玉では県\"人\"と言う気がします。なんででしょうね？ 会社への通勤時間はおよそ1時間といったところで、引越し前と比べたらだいぶ近くなったので時々通うのにちょうどよい距離かなと思っています。 🎉 単なる引っ越しにお祝いを頂いてしまいました。ありがとうございました🙏この場を借りて感謝をお伝えします。 タオル。タオル研究所というところのものらしく同期の欲しい物リストで見つけて気になっていたもの。結構ふわふわで良さげです。最近はバスタオルをやめて家のタオルをすべてフェイスタオル","content_html":"<p>2年ほど実家に戻っていましたが改めて引っ越し、神奈川県民から埼玉県人になりました。\nちなみに神奈川では県\"民\"と言うけれど埼玉では県\"人\"と言う気がします。なんででしょうね？</p>\n<p>会社への通勤時間はおよそ1時間といったところで、引越し前と比べたらだいぶ近くなったので時々通うのにちょうどよい距離かなと思っています。</p>\n<h2>🎉</h2>\n<p>単なる引っ越しにお祝いを頂いてしまいました。ありがとうございました🙏この場を借りて感謝をお伝えします。</p>\n<p><img src=\"https://blob.yammer.jp/move-to-saitama-2022-wishlist-presents.jpg\" alt=\"いただいた引越し祝い\"></p>\n<ul>\n<li>タオル。タオル研究所というところのものらしく同期の欲しい物リストで見つけて気になっていたもの。結構ふわふわで良さげです。最近はバスタオルをやめて家のタオルをすべてフェイスタオルに統一してます。</li>\n<li>キッチンハイター。強い。</li>\n<li>カントリーマアム。考え事をすると糖分が欲しくなります。一袋開けると一気に食べてしまいます。</li>\n<li>洗濯用ハンガー、ちょこちょこ乾燥機NGな服があって重宝します。</li>\n<li>延長コード。机からコンセントが離れているので、Macbookや液晶など諸々を繋ぐのに使います。5mあるので安心😆</li>\n<li>デスク下マット。フローリングの上に椅子のキャスターが当たらないようになります。マットが広くて悠々と椅子を動かせるようになりました。</li>\n</ul>\n<p><img src=\"https://blob.yammer.jp/move-to-saitama-2022-tsudanuma.jpg\" alt=\"デスク用フロアマット\"></p>\n<div style=\"text-align: center; margin-top: 0;\">\n<p>これは埼玉に突如出現した津田沼<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n</div>\n<h2>荷物を運ぶ</h2>\n<p>荷物の移動はクロネコヤマトの単身パックを利用しました。\n冷蔵庫電子レンジと身の回りのものを積み込んで3万円弱だったと記憶しています。</p>\n<p><img src=\"https://blob.yammer.jp/move-to-saitama-2022-before.jpg\" alt=\"引越し荷物突き込み前\"></p>\n<p>上の写真の荷物を積み込んでもらって、残ったのは積みきれなかったダンボール2つ。\nこれとリモートワークで直前まで使うオフィスチェアとモニタとを宅急便で別送しました。(4つで7000円弱)\n実家から出るので荷物が少なめで、単身パック+宅急便はわりとよい選択だったと思います。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<p><img src=\"https://blob.yammer.jp/move-to-saitama-2022-after.jpg\" alt=\"引越し荷物突き込み後\"></p>\n<p>机、ベッド、洗濯機などは引越し先で購入しました。\nいろいろお金がかかるので金銭感覚が若干おかしくなります。</p>\n<h2>住民票と書類手続</h2>\n<p>一般に住民票を移すのには旧自治体への転出届と新自治体への転入届が必要です。\nしかしながら私の住んでいた旧自治体には「マイナンバーカードまたは住民基本台帳カードによる転出の特例」という制度があり、マイナンバーカードを使ってWebから転出届が出せました。\n平日に役所に行く手間が省けて大変助かりました。</p>\n<p>引っ越したあと新自治体の市役所への転入届と警察署への免許証住所変更に行きましたが、これらはフレックスタイム制を活用して出勤前にサクッと手続きできて社の制度に感謝でした。\nこういうたぐいのものは書類を書いて窓口に向かうので、開店時間のちょい前くらいに行くのがちょうどよいかもしれません。(開店時間に行ったら先客がいました)</p>\n<h2>ドラム式洗濯機</h2>\n<p>引っ越しに合わせてドラム式洗濯機を買いました。\n洗濯機は社会人になったらドラム式を買おうと決めていて、20万円ほど払ってPanasonicの洗濯機 (<a href=\"https://panasonic.jp/wash/products/na_lx113a.html\">NA-LX113AL</a>) を購入しました。たかい。</p>\n<details>\n<summary>\nヒートポンプ式とヒーター式\n</summary>\n<p>洗濯機は買うにあたって事前にちょこちょこ調べていました。</p>\n<p>ドラム式洗濯機にはヒートポンプ式とヒーター式という2種類があるそうです。</p>\n<p>ヒートポンプ式は</p>\n<ul>\n<li>本体代が高め</li>\n<li>電気代は安め</li>\n<li>エアコンで使われるようなヒートポンプが洗濯機内に入っていて、衣類に当てた風を冷やして乾燥させ、暖かくして再度衣類に吹き付けるらしい</li>\n<li>衣類が傷みにくい</li>\n</ul>\n<p>ヒーター式</p>\n<ul>\n<li>本体が安め</li>\n<li>電気代は高め</li>\n<li>ドライヤーを当てるように、衣類に直接熱風を当てるのでしっかり乾く</li>\n<li>衣類が痛みやすい</li>\n<li>湿気を含んだ空気が排出されて室内に充満しやすい</li>\n</ul>\n<p>という特徴があるそうです。どうせならということでちょっと高いですがヒートポンプ式を選びました</p>\n<p>洗剤の自動投入機能がつくと一気に値段が跳ね上がるらしく、そういうのがついていない洗濯と乾燥だけのベーシックなモデルで乾燥容量の多いものを選びました。</p>\n<p>調べていると季節によって大きく値段が変わるらしく、もし買えるなら秋頃などの新製品発売前だと安く買えるそうです。</p>\n</details>\n<p>ドラム式洗濯機を買ってから、家の中の乾燥不可の布を見るたびに悔しい気持ちが芽生えるようになりました。\nもっとも、私の買った洗濯機は音も静かで洗濯乾燥容量も大きく、乾燥後の触り心地もよいので大満足です。</p>\n<h2>インターネット</h2>\n<p>リモートワークで働いている私にとって、インターネット回線の品質は死活問題です。\n話すと長くなりそうでここでは割愛しますが、現在はケーブルテレビの回線と楽天のLTE回線を使っており、後日フレッツ光も利用できるようになる予定です。まあまあ調べた <sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup> のでどこかにまとめておきたい気持ち。</p>\n<hr>\n<p>そんなこんなで引越しから1ヶ月近く経った今でもダンボールをテレビ台代わりにしていたりするものの、ぼちぼち新生活が始まりました。\n家の周りにまだ慣れていなくて駅との往復くらいしかしてないですが、散歩したりして愛着が湧いた土地になるとよいなと思います。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>机下用のマットを欲しいものリストに設定していたら「マットの上は津田沼だと思って生活してください」と託されました。最近は心のなかで机の周りのことをひそかに津田沼と呼んでいます。埼玉にも海ができたといえるでしょう。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>引っ越しの見積もりをWebで申し込んだら大量に電話がかかってきて疲弊しました。疲弊して嫌になったので金額がわかりやすい単身パックにしたという節もあります。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>IPv4 PPPoEとIPv4 over IPv6 を同時に接続して、外部からDMZへの通信はPPPoEで、内部から外部への接続はIPv4 over IPv6でやれるような構成しようと目論んでいます。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2022-03-31T23:13:12+09:00","message":"Post: 「神奈川県民から埼玉県人へ」\n","hash":"69b0f1c0fabbafa1d2af2ebe84cd3269882123de"}],"date_published":"2022-03-31T23:13:00+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/shadow-dom-internal-link","url":"https://memo.yammer.jp/posts/shadow-dom-internal-link","title":"Web Components (ShadowDOM) でもページ内リンクをしたい","summary":"HTMLではページ内リンクができる。 id属性ないしname属性で指定した文字列を # 1 の後ろにつけてリンク先のパスとして指定すると、当該の要素が画面上部に来るようにスクロールする。 <p id=\"content\">   hello! </p> <p style=\"height: 2000px; background-color: red;\">   blank </p> <a href=\"#content\">   「hello!」へ飛ぶ </a> このページ内リンクをShadowDOM内の要素からShadowDOM内にむけて行いたいとき、そのままではできない。 同じような動きを実現する方法","content_html":"<p>HTMLではページ内リンクができる。\nid属性ないしname属性で指定した文字列を <code>#</code> <sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup> の後ろにつけてリンク先のパスとして指定すると、当該の要素が画面上部に来るようにスクロールする。</p>\n<pre><code class=\"hljs language-html\">&#x3C;p id=\"content\">\n  hello!\n&#x3C;/p>\n\n&#x3C;p style=\"height: 2000px; background-color: red;\">\n  blank\n&#x3C;/p>\n\n&#x3C;a href=\"#content\">\n  「hello!」へ飛ぶ\n&#x3C;/a>\n</code></pre>\n<p>このページ内リンクをShadowDOM内の要素からShadowDOM内にむけて行いたいとき、そのままではできない。\n同じような動きを実現する方法として、クリックイベントをもとにShadowDOMの中の要素を探してJavaScriptによってスクロールする動作を実装してみた。</p>\n<pre><code class=\"hljs language-javascript\">const eventListener = (event: Event) => {\n  const element = event.target as HTMLElement\n  if (element.tagName !== 'A') {\n    return true\n  }\n  const href = element.getAttribute('href') ?? ''\n  if (!/^#/.test(href)) {\n    return true\n  }\n  const anchorName = href.substring(1)\n  const theNameElements = shadowRoot.querySelectorAll(`[name=${anchorName}], #${anchorName}`)\n  if (theNameElements.length > 0) {\n    theNameElements[0].scrollIntoView()\n    event.preventDefault()\n    return false\n  }\n  return true\n}\nshadowRoot.addEventListener('click', eventListener)\n</code></pre>\n<p>このブログの記事の本文はいま本文用のCSSのスコープを狭める実装の一つとしてShadowDOMに包むようにしていて、上記のようなコードを書くことでページ内リンクのスクロールを実現している。\n単純な実装なので何か考慮できていない場合をみつけたら教えていただけると嬉しい。</p>\n<p>実装: <a href=\"https://github.com/yammerjp/memo.yammer.jp/blob/7bed6bc062217d7c7d16ab0a39821987e3dd3f45/src/components/article.tsx#L8-35\">https://github.com/yammerjp/memo.yammer.jp/blob/7bed6bc062217d7c7d16ab0a39821987e3dd3f45/src/components/article.tsx#L8-35</a></p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>ちなみにこの <code>#</code> を使ったページ内の特定の要素を表す機能は<a href=\"https://html.spec.whatwg.org/multipage/browsing-the-web.html#scroll-to-fragid\">HTMLの仕様書</a>内ではフラグメントと呼ばれているらしい。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2022-03-31T01:55:34+09:00","message":" Post: 「Web Components (ShadowDOM) でもページ内リンクをしたい」\n","hash":"b02649bb43fb54c33d3c9441230774854341a05c"}],"date_published":"2022-03-31T13:01:55+09:00","tags":["HTML","WebComponents"]},{"id":"https://memo.yammer.jp/posts/ssh-to-home","url":"https://memo.yammer.jp/posts/ssh-to-home","title":"リバースSSHトンネルでVPSを介していつでも自宅のPCに繋ぐ","summary":"外出先で手元のラップトップ (MacBook Air) からポートを公開していない自宅のサーバ1 (Ubuntu) へsshしたいときの記録。 数ヶ月くらい前から安価なVPSを借りて、そこを中継地点として外出先からいつでも自宅のサーバにsshできるようにしている。 ひとまず繋ぐ 以下の接続ができるようにしておく。 ラップトップの公開鍵を自宅サーバとVPSに、自宅サーバの公開鍵をVPSに登録 (~/.ssh/authorized_keys に追記) して、sshできることを確認する。 自宅のラップトップ -> 自宅のサーバ 自宅のラップトップ -> VPS 自宅のサーバ -> VPS ~/.ss","content_html":"<p>外出先で手元のラップトップ (MacBook Air) からポートを公開していない自宅のサーバ<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup> (Ubuntu) へsshしたいときの記録。\n数ヶ月くらい前から安価なVPSを借りて、そこを中継地点として外出先からいつでも自宅のサーバにsshできるようにしている。</p>\n<h3>ひとまず繋ぐ</h3>\n<p>以下の接続ができるようにしておく。</p>\n<p>ラップトップの公開鍵を自宅サーバとVPSに、自宅サーバの公開鍵をVPSに登録 (<code>~/.ssh/authorized_keys</code> に追記) して、sshできることを確認する。</p>\n<ul>\n<li>自宅のラップトップ -> 自宅のサーバ</li>\n<li>自宅のラップトップ -> VPS</li>\n<li>自宅のサーバ -> VPS</li>\n</ul>\n<h4><code>~/.ssh/config</code> on ラップトップ</h4>\n<p>中継するVPSとその先の自宅サーバへの接続情報を書いておく。</p>\n<pre><code># ~/.ssh/config\nHost home-server\n  HostName 192.168.2.3\n  IdentityFile ~/.ssh/id_rsa\n  User home-username\nHost bastion-vps\n  HostName bastion-vps.example.com\n  IdentityFile ~/.ssh/id_rsa\n  User vps-username\nHost home-server-remote\n  Hostname localhost\n  User home-username\n  IdentityFile ~/.ssh/id_rsa\n  ProxyJump bastion-vps\n  Port 2222\n</code></pre>\n<h4><code>~/.ssh/config</code> on 自宅サーバ</h4>\n<p>中継するVPSへの接続情報を書いておく。</p>\n<pre><code># ~/.ssh/config\nHost bastion-vps\n  HostName bastion-vps.example.com\n  IdentityFile ~/.ssh/id_rsa\n  User ubuntu\n</code></pre>\n<h4>繋いでみる</h4>\n<p>自宅サーバからVPSへsshして、VPSの空きポートから自宅サーバのsshポートへリバーストンネルを張る。</p>\n<pre><code class=\"hljs language-shell\"># user@home-server\n$ ssh -fN -R 2222:localhost:22 bastion-vps\n</code></pre>\n<p>この状態で、自宅サーバと異なるネットワークに所属するラップトップからsshをする。</p>\n<pre><code class=\"hljs language-shell\"># VPSの22番ポート、2222番ポートを伝って自宅サーバへsshする\n$ ssh home-server-remote\n</code></pre>\n<p>多段sshの際にラップトップの秘密鍵を使う利点は、自宅サーバに入るための鍵をVPSが保持していないこと。\n仮にVPSにログインして自宅サーバのSSHポートにパケットを送れる状態になったとしても、自宅サーバへsshできる秘密鍵を持たなければ自宅サーバは乗っ取れない。</p>\n<h3>サービスとして登録する</h3>\n<p>自宅サーバのsystemdに登録して、常にリバーストンネルが貼られている状態を維持する。</p>\n<p>まず、ファイル <code>/lib/systemd/system/bastion-tunnel.service</code> に以下を記述する。</p>\n<pre><code>[Unit]\nDescription=Create SSH reverse tunnel (reverse port forwarding) from bastion-vps.example.com\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/bin/ssh -f -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -i /path/to/id_rsa -R 2222:localhost:22 vps-username@bastion-vps.example.com\nRestartSec=3\nRestart=always\nStartLimitBurst=0\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>作成したServiceを有効化する。</p>\n<pre><code class=\"hljs language-shell\">$ sudo systemctl daemon-reload\n$ sudo systemctl enable bastion-tunnel.service\n$ sudo systemctl status bastion-tunnel.service\n</code></pre>\n<p>常にリバーストンネルが貼られていることをsshして確認してみる。</p>\n<h2>おわりに</h2>\n<p>以上の手順を踏むと、自宅のIPがわからなくても、ポートを公開していなくても、いつでもVPSを経由してsshできる。\n自宅サーバの中で作業をしておけば外に行ってもiPadから作業を続行できたりするし、外で特定のファイルが欲しくなったりx86_64のLinux環境が欲しくなったときにそこそこのスペックのものをサッと使えるのもいい。\nふとしたときに便利。</p>\n<p>今はsshのみをトンネリングしているが、他のプロトコルもポートフォワーディングして使うと便利そう。(認可周りは別途検討が必要そう)</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>サーバといってもインターネットに公開・提供しているわけではなく、適当なものをビルドしたり作業したり宅内向けのアプリケーションを一時的にホストしていたりする自分用の常時起動Linuxマシンである。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-02-24T22:15:06+09:00","message":"Post:「リバースSSHトンネルでVPSを介していつでも自宅のPCに繋ぐ」\n","hash":"7664cfabc90a830d37d383224eca63942af6a168"}],"date_published":"2022-02-24T22:15:00+09:00","tags":["VPS","SSH","自宅サーバ"]},{"id":"https://memo.yammer.jp/posts/file_charset_validator","url":"https://memo.yammer.jp/posts/file_charset_validator","title":"Ruby製のCLIを作ってgemにしてみる","summary":"会社に入ってからRubyを触る機会がちょこちょこあるが、Rubyのことをあんまりわかっていないという感覚があるので機会をみつけてRubyで何かをつくるというのをやっていきたい。 今日はその中でファイルの文字コードを確認する処理をCLIとして実装してみた話。 作ったもの 実装するものは比較的シンプルで、渡されたファイルが指定された文字コードで解釈できるか否かを判定する。1 Rubyのワンライナーで書くこともできる規模感のものだ。 $ find path/to/dir -type f | ruby -e 'STDIN.reject{|path| IO.binread(path.chomp).for","content_html":"<p>会社に入ってからRubyを触る機会がちょこちょこあるが、Rubyのことをあんまりわかっていないという感覚があるので機会をみつけてRubyで何かをつくるというのをやっていきたい。\n今日はその中でファイルの文字コードを確認する処理をCLIとして実装してみた話。</p>\n<h2>作ったもの</h2>\n<p>実装するものは比較的シンプルで、渡されたファイルが指定された文字コードで解釈できるか否かを判定する。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>\nRubyのワンライナーで書くこともできる規模感のものだ。</p>\n<pre><code class=\"hljs language-shell\">$ find path/to/dir -type f | ruby -e 'STDIN.reject{|path| IO.binread(path.chomp).force_encoding(Encoding::UTF_8).valid_encoding?}.each{|f| puts f}.empty? or (puts \"... There are invalid encoding files\";exit 1)'\n</code></pre>\n<p>手元のファイルを確認するだけならワンライナーでいいが、一応テストを書いて動作が明らかであることを示したり、なによりRubyのライブラリってこんな感じで作るんやでというのを知っておくためにCLIとして実装してgemにしてみた。</p>\n<p><a href=\"https://rubygems.org/gems/file_charset_validator\">https://rubygems.org/gems/file_charset_validator</a></p>\n<p>さっきのワンライナーと同じことを以下で行える。</p>\n<pre><code class=\"hljs language-shell\">$ gem install file_charset_validator\n$ find path/to/dir -type f | file_charset_validator --encoding UTF_8\n</code></pre>\n<h2>CLIを作ってgemにする手順</h2>\n<p>新しくRubyでCLIを作るのは雛形が用意されていて、以下のコマンドを実行するとディレクトリごと作ってくれる</p>\n<pre><code class=\"hljs language-shell\">$ bundle gem your_gem_name -t -b\n# -t ... テストも生成\n# -b ... 実行ファイルも生成\n</code></pre>\n<p>作ったgemのビルドやローカルへのインストール、公開などもrakeタスクが用意されているのでシュッとできる。</p>\n<pre><code class=\"hljs language-shell\"># gemをビルドする (gemはhogehoge.gemという単一のファイルにまとめられるらしい)\n$ bundle exec rake build\n\n# テストを実行する\n$ bundle exec rake test\n\n# ローカルにgemをインストールする\n$ bundle exec rake install\n\n# gitのリリースタグを打って、gemを公開する\n# 事前に https://rubygems.org でアカウントを作り、`$ curl -u YOUR_USERNAME https://rubygems.org/api/v1/api_key.yaml > ~/.gem/credentials` などとしておくとRubyGemsに公開できる。\n$ bundle exec rake release\n</code></pre>\n<p>コマンドライン引数やヘルプコマンドの出力などはthorに任せてしまうと楽。\n作った雛形の your_gem_name.gemspec に <code>spec.add_dependency \"thor\"</code> などと書いて bundle install して、Thorクラスを継承したクラスを実装し、.start を呼べばいい。</p>\n<h2>感想</h2>\n<p>お作法がわかっていないので作りたいものを作る時間よりもお作法を学ぶ時間がほとんど出会ったが、目的はそれなのでよかった。\nRubyGems、(npmに比べて) パッケージの名前空間が比較的空いている気がして、不用意に変な名前を占有してはいけないなという気持ちになった。</p>\n<p>おわり。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>文字コードの判定は例えば <code>$nkf --guess</code> コマンド等でも行えるが、誤検知を避けて「ある文字コードとして解釈できるかを検証する」という目的を果たすツールは見つけられなかったので作った。いろいろなところで必要そうなので見つけられていないだけで多分どこかにあるでしょう。知っている方は教えてください。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-02-09T22:28:07+09:00","message":"Post: 「Ruby製のCLIを作ってgemにしてみる」\n","hash":"6d7e4bd845e870bf21588b12cafae2eed9985c7f"}],"date_published":"2022-02-09T22:20:00+09:00","tags":["ruby","gem","文字コード","CLI"]},{"id":"https://memo.yammer.jp/posts/graspad","url":"https://memo.yammer.jp/posts/graspad","title":"graspad - iPad用の握れるキーボード","summary":"昨年秋1に3Dプリンタを買って作りたかったのがiPad用のキーボード。 iPadケースの背面にキーボードがくっついていて、iPadを横から握ったまま物理キーボードを打てる。 左右の2パーツから成っていて、iPadの左右から差し込み、2つをつなぐ配線とiPadのType-Cをつなぐことで使える。 キー数は42キーで、3x6のキーが背面の左右に、親指で押す用の側面のキーが3つずつ左右にある。 本記事では、この少し変わったキーボードの製作過程を記す。 設計 着想 iPadに物理キーボードを使いたいと思っていたのだが、普通のキーボードを繋ぐだけでは安定した机の上でしか使えないし、それならMacbook","content_html":"<p>昨年秋<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>に3Dプリンタを買って作りたかったのがiPad用のキーボード。\niPadケースの背面にキーボードがくっついていて、iPadを横から握ったまま物理キーボードを打てる。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-grasped.jpg\" alt=\"graspadを手で握って保持しているとき\"></p>\n<p>左右の2パーツから成っていて、iPadの左右から差し込み、2つをつなぐ配線とiPadのType-Cをつなぐことで使える。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-with-cables.jpg\" alt=\"graspadの内側に配線がある様子\"></p>\n<p>キー数は42キーで、3x6のキーが背面の左右に、親指で押す用の側面のキーが3つずつ左右にある。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-overlooking.jpg\" alt=\"graspadを上から俯瞰したとき\"></p>\n<p>本記事では、この少し変わったキーボードの製作過程を記す。</p>\n<h2>設計</h2>\n<h3>着想</h3>\n<p>iPadに物理キーボードを使いたいと思っていたのだが、普通のキーボードを繋ぐだけでは安定した机の上でしか使えないし、それならMacbookで代用できてしまう。\n電車の中やベッドやソファでゴロゴロしながら物理キーボードが使えたらいいなと思って、iPadを横持ちで握ったままキー入力が出来ることを目指して作った。</p>\n<p>制作に当たって以下のような製品を参考にした。</p>\n<ul>\n<li>Nintendo Switch</li>\n<li>VAIO Type U</li>\n<li><a href=\"https://internetcom.jp/201361/t-blade-back-typing-keyboard-for-ipad?utm_source=pocket_mylist\">T-BLADE</a></li>\n<li><a href=\"https://m.youtube.com/watch?v=8H_bXomQsm4&#x26;utm_source=pocket_mylist\">Yogitype</a></li>\n<li><a href=\"https://news.mynavi.jp/article/20210107-1625679/?utm_source=pocket_mylist\">LAVIE MINI</a></li>\n</ul>\n<p>最初は思いつきだったが、3Dプリンタが案外やすく買えることに気づいてしまってからは割と勢いで完成までこぎつけた。</p>\n<h3>キー配列</h3>\n<p>キー数を42キーにするのは結構初期の段階で決めていた。\n普段使っている配列と同程度で、今の私の中で実用に耐えうる最低限のキー数である。\nこれより少ないのは未知の領域。</p>\n<p>キー数をもとに、iPadのケースにキーボードが付いていたらという体で考えてみる。\n適当な図を書きながらこんな感じでは？と構想をふくらませたのが以下のスケッチ。\nこの時点で概ねの形は決まっていた。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-concept.png\" alt=\"graspadの構想とスケッチ\"></p>\n<p>寸法をみていくと、キーの数と配置からキーピッチを抑える必要があることに気づいた。\niPadの大きさは176mm x 248mm、横持ちをするとすると高さ方向に176mm以下に抑えなければならない。\n176mmの方向に並べるキー数を、下から6(裏面)+3(側面)-1(裏面上段と側面下段を重ねる)とすると、キーピッチ20mmでは160mmで結構ギリギリである。iPadの側面には電源ボタン、上部にはカメラなどがあり、Apple Pencilを上部に配置することにするとこれでは高さが足りない。\n挟ピッチの16mmとすると16mm x8=128mmとなってだいぶ余裕が出るのでよい。</p>\n<h3>PCB</h3>\n<p>キーボードのスイッチを固定、配線する基盤をどうするか考える。\n挟ピッチで格子配列となるとmcsp lp<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>というキーボードを改造するか、専用の基板を作るか、基盤無しで3Dプリンタで作った筐体にマウントするかなどを考えてたが、途中でte96という素晴らしいキットに出会う。\nte96は分割後に再構成できる自作キーボード用のPCBで、row-staggeredやcolumn-staggered、格子配列などの形に自由に組み立てられる。キーボードのピッチ幅も1方向は16mm-20mmの可変で、組み立て時に自分で決めることができる。\n今回の用途にぴったりで、16mmピッチの格子配列、親指部分も切り取って別基盤として用意できるのでとても都合の良い基盤だった。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-te96.jpg\" alt=\"te96の基板\"></p>\n<h3>ケースとキーボード筐体の一体化</h3>\n<p>当初は市販品のiPadケースに3Dプリンタで作った筐体を貼り付けることを想定していたが、組み立ての手間を減らすため、ケースとキーボード筐体を一体型にしてまとめて印刷するよう針転換した。\nしかしながらこれは後から思えば良くない判断だった。\n筐体を構成する樹脂のPLAは硬くしなりづらい素材で、iPadのケースにしようとしても、少し出っ張らせてパチっとはめ込むような構造にし難い。\nしならずともiPadにつけられるよう、左右から差し込む構造とすることが決定し、あわせて左右をまたぐ配線をコネクタで繋ぐ必要が出てきてしまった。\nさらにコネクタを経由する配線を減らそうとして、Pro Micro(と互換機)を計2台使うことにもなった。</p>\n<h3>iPadの大きさとiPadケースのモデリング</h3>\n<p>今回の題材であるiPad Air 4をはじめとするApple製品は、公式にその寸法を示したガイドラインが公開されている。\n(<a href=\"https://developer.apple.com/accessories/Accessory-Design-Guidelines.pdf\">Accessory Design Guideline for Applie Devices</a>)\nこれをもとに、0.1mm程度の精度で設計、印刷した。\nケースの大きさはガイドラインに示されているiPadの寸法よりも余裕を見て少し大きくする必要があり、これは試作を繰り返して決定した。試作には上部ないし下部のみで30時間くらい印刷にかかるので結構面倒な作業であった。</p>\n<h2>組み立て</h2>\n<h3>使用部品</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">部品</th>\n<th>点数</th>\n<th align=\"left\">補足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">フィラメント PLA 黒 1.75mm 1kg</td>\n<td>2</td>\n<td align=\"left\">試作一回 (筐体半分) につき300gくらい使用した</td>\n</tr>\n<tr>\n<td align=\"left\">te96</td>\n<td>2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Kailh Choc 赤軸</td>\n<td>42</td>\n<td align=\"left\">なるべく薄くするためにKailh Chocを選んだ。赤軸のキースイッチが手元に丁度2個余っていたので40個買ってピッタリ使った。</td>\n</tr>\n<tr>\n<td align=\"left\">mcsp lp向け挟ピッチキーキャップ</td>\n<td>42</td>\n<td align=\"left\">Kailh Choc用の16mmピッチで使えるキーキャップは他に選択肢がなかった。DMM.makeで3Dプリンタによって印刷されたものが届いた。相当力を入れないとキースイッチに刺さらないので、同じものを購入される方は注意されたい。</td>\n</tr>\n<tr>\n<td align=\"left\">ジャンパケーブル</td>\n<td>8</td>\n<td align=\"left\">左右の筐体間をつなぐコネクタとして使っている</td>\n</tr>\n<tr>\n<td align=\"left\">はんだ</td>\n<td></td>\n<td align=\"left\">0.3mmなどの細いものを用意しておくとやりやすい</td>\n</tr>\n<tr>\n<td align=\"left\">導線</td>\n<td></td>\n<td align=\"left\">PCB間 (親指部分との配線)や、PCB内でも各columnとPro Micro間を導線で配線する必要がある</td>\n</tr>\n<tr>\n<td align=\"left\">スズメッキ線</td>\n<td></td>\n<td align=\"left\">te96のrow同士の配線に使った</td>\n</tr>\n<tr>\n<td align=\"left\">Pro Micro、Elite-C</td>\n<td>1ずつ</td>\n<td align=\"left\">左右の筐体に一つずつ使うが、iPadとの接続はUSB Type-Cで行うので、下の Type-C to Type-C ケーブルが使えるように片方はPro Micro互換のElite-Cを使うこととした</td>\n</tr>\n<tr>\n<td align=\"left\">UGREEN USB Type-Cケーブル</td>\n<td>1</td>\n<td align=\"left\">片方がL字になっていて、長さが50cmで長すぎないType-C to Type-Cのケーブル。</td>\n</tr>\n</tbody>\n</table>\n<h3>組み上げ</h3>\n<p>筐体を印刷し、次にキーボードを組み立て、最後にそれらをはめこんでから一部配線をしてキーマップを書き込む、という手順で行った。</p>\n<p>キーボードは<a href=\"https://github.com/e3w2q/te96-keyboard/blob/master/doc/custom_layout/readme_jp.md\">マニュアル</a>にあるような感じで組み立てていく。キーピッチは16mmになるように、最狭間隔で固定する。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-te96-devided.jpg\" alt=\"te96のPCBを切断して分割した状態\"></p>\n<p><img src=\"https://blob.yammer.jp/graspad-te96-join.jpg\" alt=\"te96の基盤を連結した状態\"></p>\n<p>ピンヘッダを差し込んで基盤を接合するときは、裏にマスキングテープを貼って出っ張らないようにするといい。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-te96-with-masking-tape.jpg\" alt=\"te96で基盤連結用のピンヘッダをはんだづけするときは、裏側をマスキングテープで止めておくとピンの長さをぴったりにできる\"></p>\n<p>基盤同士が接合できてテスターで導通を確認したら、ダイオードとキースイッチ、PCB内の配線、Pro MicroとElite-C、PCB間の配線をはんだ付けしていく。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-te96-with-promicro.jpg\" alt=\"te96にProMicroを組付けた状態\"></p>\n<p><img src=\"https://blob.yammer.jp/graspad-assemble-keyswitch.jpg\" alt=\"キースイッチを組み付けた状態\"></p>\n<p>キーキャップをはめてキーマップを書き込み動作確認する</p>\n<p><img src=\"https://blob.yammer.jp/graspad-assemble-only-keyboard.jpg\" alt=\"キーボードの配線を済ませて動作確認する状態\"></p>\n<p>最後に筐体に組み付けて完成。</p>\n<p>PCBの筐体への固定は、PCBにある2.15mmの穴に筐体の突起を差し込む方式とした。これは試作を繰り返す中で思いついた。\nまた、複数の基板を接合する際に間隔が開いて寸法がずれて差し込めなくなるのを防ぐために、筐体の一部を切り取ったような治具を印刷し、この上で組立を行っていた。</p>\n<p>親指のキー部分は、キーボードを差し込むための筐体側の突起のある台座を別部品として印刷して、筐体本体に差し込むこととした。印刷方向の兼ね合いで、突起を水平方向に空中に印刷するのが難しいためである。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-printed.jpg\" alt=\"3Dプリンタで印刷した筐体\"></p>\n<p>ちなみに各パーツの固定が甘かったので瞬間接着剤を流したら分解できなくなった。接触不良などが発生しても直せなくて困る。悲しい。</p>\n<p><img src=\"https://blob.yammer.jp/graspad-assembe-to-prototype.jpg\" alt=\"連結前のPCBを試作した筐体に組み付けてみる\"></p>\n<h3>キーマップの書き込み</h3>\n<p>こちらも<a href=\"https://github.com/e3w2q/te96-keyboard/blob/master/doc/custom_layout/readme_jp.md#%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2\">マニュアル</a>を参考にセットアップした。</p>\n<p>途中から、ProMicroだけでなくElite-Cにも書き込む必要が出てきたので、以下のようなコマンドで書き込みを行なった。\nProMicroに書き込む際は、リセットボタンの代わりに RSTとGNDをショートさせていたが、Elite-Cは何もしなくても勝手に書き込みが始まった。(と思う)</p>\n<p><a href=\"https://github.com/yammerjp/qmk_firmware/commit/ce2a69222718b825d787d52fd7ad7476862ec417\">https://github.com/yammerjp/qmk_firmware/commit/ce2a69222718b825d787d52fd7ad7476862ec417</a> に私のキーマップを置いている。</p>\n<pre><code class=\"hljs language-shell\"># Pro Micro\n$ sudo make e3w2q/te96:test:avrdude\n$ sudo make e3w2q/te96/rev1:yammerjp:avrdude\n# Elite-C\n$ sudo make e3w2q/te96:test:dfu\n$ sudo make e3w2q/te96/rev1:yammerjp:dfu\n</code></pre>\n<h2>(次回作があったら)改善したい点</h2>\n<h3>te96組立時にショートさせない</h3>\n<p>te96の基盤を切り刻んで、ピンヘッダと接合部品を用いて繋げるのだが、そのときに意図しないショートに注意。特に16mmピッチにする場合は、外側に17-19mmピッチ用の穴があり、誤ってこれが基盤の近くにあるCherry MXの穴とぶつかるとrowとcolumnが導通してしまいキーボードとして機能しなくなる。 (やってしまってむりやり分解した。)</p>\n<p>Cherry MXの穴は接合する基盤の片側にしかないので、ショートしないように接合部品を配置すべきだった。</p>\n<h3>分解可能性を高める</h3>\n<p>試作を繰り返す中で加えた修正に、キーボードの固定方法がある。\nte96には直径2.15mmの穴が複数箇所に開いており、この大きさに合わせた特記を筐体に用意して差し込むことで固定することとしようとした。\nはめ込むだけで済むようにしたかったが、実際にはゆるゆるだったので瞬間接着剤で固定した。これにより分解がしづらい状況となってしまったので、瞬間接着剤ではなくネジで固定できる構造とすると問題が起きても修理しやすくなっただろう。</p>\n<h3>左右の筐体を接合するコネクタの改善/廃止</h3>\n<p>キーボードをiPadに装着する際、2つの筐体をはめこんでコネクタを繋ぐ必要がある。ここに2.54mmのピンヘッダ用のコネクタを使ってしまっているので、極性に気をつける必要があるし気軽につけ外しできない。マグネットでくっついたり無線で通信したり、そもそも筐体が2分割されていないと嬉しい。</p>\n<h3>キーボードを背面ではなく側面に配置する</h3>\n<p>作ってみてわかったのだが、タイピングできる速度はびっくりするくらい遅い。\n慣れの問題だろうと思っていたがそれだけではなく、構造に問題がありそうである。</p>\n<p>iPadの背面にキーボードがあると、筐体の重さを手で支えているおかげか手の平を胸方向に向けるからか手に遊びがなく、キーが押しづらいと感じる。\n手の筋肉の弛緩を見誤ったのがまずかった。</p>\n<p>これを解決する方法として、iPadの側面にキーボードを配置して\"前ならえ\"したような体勢で打てるようにしたい。</p>\n<h3>CherryMX互換キーキャップ</h3>\n<p>キーストロークが深い方が気持ちいいのでは。</p>\n<h2>おわりに</h2>\n<p>動作するところまでは持っていけた。\n3Dプリンタの精度が案外高くて、筐体もそれなりの形で作れたように思う。\n椅子の上で使ったりベッドの上で寝転がって使ったりすることもできる。\n(タイピング速度は遅いが...笑)</p>\n<p>ちなみに何回か試行錯誤したのでこれくらい失敗した筐体がある。</p>\n<p><img src=\"https://blob.basd4g.net/graspad-prototypes.jpg\" alt=\"失敗した筐体群\"></p>\n<p>以上、というわけで次回作にご期待ください。なおいつ作られるのかは未定です。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><a href=\"/posts/anycubic-mega-s\">前回の記事</a>も含めて10月ごろに書いた文章が眠っていたので引っ張り出してきた。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p><a href=\"https://booth.pm/ja/items/2668919\">mcsp lp</a> というキーボード、今回の製作に関係なく結構気になっています。欲しい。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-01-26T23:41:22+09:00","message":"Post: 「graspad - iPad用の握れるキーボード」\n","hash":"540fb6011b412a6c22143a613c7b4b16a5058f4c"}],"date_published":"2022-01-26T23:41:00+09:00","tags":["自作キーボード","3Dプリンタ","iPad"]},{"id":"https://memo.yammer.jp/posts/anycubic-mega-s","url":"https://memo.yammer.jp/posts/anycubic-mega-s","title":"2021年に3Dプリンタに入門した - Anycubic Mega S","summary":"昨年の秋に3Dプリンタを買ったので、その経緯と3Dプリンタに入門して学んだことを記します。 https://twitter.com/yammerjp/status/1439779993307942916 作りたいものがあって、3Dプリンタの印刷サービスを検討していたが高すぎたのが事の発端です。 作りたいものの寸法が大きかったため依頼すると2万円くらいするとわかり、更に安価な3Dプリンタ本体が2-3万円くらいで入手できることがわかり、これは試してみてもいいのではという気持ちになりました。1 3Dプリンタを選ぶ 家庭用3Dプリンタには光造形方式と熱積層方式があり、今回は熱積層方式のものを購入しまし","content_html":"<p>昨年の秋に3Dプリンタを買ったので、その経緯と3Dプリンタに入門して学んだことを記します。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">サンプルを印刷してみる <a href=\"https://t.co/hdrNYcBRn7\">pic.twitter.com/hdrNYcBRn7</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1439779993307942916?ref_src=twsrc%5Etfw\">September 20, 2021</a></blockquote></p>\n<p>作りたいものがあって、3Dプリンタの印刷サービスを検討していたが高すぎたのが事の発端です。\n作りたいものの寸法が大きかったため依頼すると2万円くらいするとわかり、更に安価な3Dプリンタ本体が2-3万円くらいで入手できることがわかり、これは試してみてもいいのではという気持ちになりました。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<h2>3Dプリンタを選ぶ</h2>\n<p>家庭用3Dプリンタには光造形方式と熱積層方式があり、今回は熱積層方式のものを購入しました。前者は印刷可能サイズが小さいが精巧で模型などに向き、前者は印刷可能サイズが大きいが精巧さに劣るのでDIYなどに向くという違いがあります。\n精巧さで劣ると言っても結構いい感じに作れます。(後述の写真を参考に)</p>\n<p>熱積層方式のプリンタの中でも安価な家庭モデルでメジャーなものとして、Ender 3 Pro、Anycubic MEGA S、Flashforge 3、といった機種が挙げられます。このなかでも前者のほうが安価、印刷可能サイズが大きい、カスタマイズ幅<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>が広い、組み立てが大変、といった特徴があるようです。</p>\n<p>印刷したいもののサイズと価格面からFlashForge <sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>が消え、組み立て部位が多いと精度が担保しづらいのではないかという不安からEnder 3 Proを避けることとし、Anycubic Mega S を選びました。\n昨年と比較してセール含め1.5万円くらい値段が下がっているらしいことも、この選択を後押ししました。</p>\n<p>Anycubic Mega S の積層可能範囲は 210mm x 210mm x 205mm で、そこそこ大きいと思います。\n大きいものを印刷すると結構時間がかかるので、この範囲に収まらないものは組み立て式にしたり3Dプリンタの印刷物は一部の部分のみに使うなど、工夫してものをつくるとよさそうです。</p>\n<p><img src=\"https://blob.yammer.jp/anycubic-mega-s.jpg\" alt=\"Anycubic Mega S\"></p>\n<h2>フィラメント</h2>\n<p>熱積層型の3Dプリンタでは、樹脂を熱で溶かしながら射出して印刷します。その樹脂がフィラメントです。</p>\n<p>フィラメントを選ぶ上での軸はいくつかあるようですが、最初でよくわからないのと失敗したくないのでなるべくメジャーっぽいもの、PLAの太さ1.75mmで黒1kg、安すぎず品質管理されてそうなものを選びました。\n(特に問題なく印刷できたので、使い切った後も同じものを買い足しました。 <a href=\"https://www.amazon.co.jp/gp/product/B084S9NP2T/ref=ppx_yo_dt_b_asin_title_o09_s00?ie=UTF8&#x26;psc=1\">https://www.amazon.co.jp/gp/product/B084S9NP2T/ref=ppx_yo_dt_b_asin_title_o09_s00?ie=UTF8&#x26;psc=1</a>)</p>\n<p>フィラメントは材質がいくつか選べるようですが、PLAやPLA+が簡単に印刷できます。この材質は硬く印刷後の整形に向きません。\n強度の高く加工しやすいABSなどを選ぶ手もありますが、こちらは熱変化による収縮が大きく、印刷が失敗する可能性が上がるので最初は選ばないほうがよいようです。\nフィラメントの量は 1kgや3kgが一般的なようです。3Dプリンタによってはあまり大きすぎるリールはフィラメント台に置けない可能性があるので、自分の3Dプリンタの機種で問題ないかを確認しておくとよいでしょう。\nフィラメントは品質もある程度気にする必要があるらしく、あまりに安くて質の悪いものだと、フィラメントの太さが均一でなく、ノズルに詰まって印刷に失敗したり印刷が汚くなることがあるらしいです。</p>\n<p>慣れてきたらここら辺を変えてコストを抑えたり印刷物の特徴に合わせた材質にしたりということができるようです。</p>\n<p>ネット上では一部Anycubic Mega Sにはフィラメントが1kg付属すると書いてあるレビューもありましたが、私の場合は数十gのおまけだけで付属しませんでした。\n同じ機種を買われる方は特に、最初からフィラメントも同時購入するとよさそうです。</p>\n<h2>組み立て</h2>\n<p>Anycubic Mega Sはゆっくりやっても数十分で組み立てることができます。\n台座に印刷ヘッドを含む上部を差し込んで数カ所ネジ止めし、フィラメント台もネジ止めします。</p>\n<p><img src=\"https://blob.yammer.jp/anycubic-mega-s-boxed.jpg\" alt=\"Anycubic Mega Sが届いた時の様子\">\n<img src=\"https://blob.yammer.jp/anycubic-mega-s-before-assembling.jpg\" alt=\"Anycubic Mega Sは下部と上部を組み立てるだけ\"></p>\n<h2>印刷台の調整</h2>\n<p>熱積層式の3Dプリンタは、印刷前に印刷台とヘッドの間の間隔が一定になるよう、印刷台を調整する必要があります。</p>\n<ol>\n<li>ヘッドと印刷台を傷つけないようにA4のコピー用紙を印刷台に置く</li>\n<li>電源を入れる</li>\n<li>念の為モータに電流が流れていない状態にする。タッチパネルから、Setup > Motor (off) > Done!と出るとよい</li>\n<li>手動でヘッドと台座を動かして、調整場所まで移動する。左手前側の角に近いところで、ヘッド先が下がったときに台座の平面からはみ出ない位置の範囲で動かす。</li>\n<li>タッチパネルから、Tools > Home > Home Z とするとヘッドが自動で下まで下がる</li>\n<li>印刷台下の手回しネジを回して高さを調整する。コピー用紙を動かそうとすると少し抵抗があるが力を入れれば動かせるくらいが良い。どのくらいの力で動くかを手で大体覚えておく。紙の動かす方向は水平の一方向にまっすぐもありだし水平のヘッドを中心とした回転方向に引っ張ってみるのもよい</li>\n<li>左手前が調整できたら、ヘッドを手動で動かして右手前、右後ろ、左後ろも同様に調整する。終わったらまた右手前、左手前、、と納得行くまで繰り返す。（1周やって戻ってくるだけと紙がスルスル動く状態になっていたりする。)最後に印刷台中央のヘッドとの間隔が同様であることを確認する。</li>\n<li>タッチパネルから、Tools > Axis > 10 (+Z) を10回押すとヘッドが上がる</li>\n</ol>\n<p>ひとまず、印刷を終わるごとにやっています。\nYoutuberのイチケンさんの動画ではそんなに頻繁にやらなくても良いと語られているので、それほどずれないとわかったらやらなくて良いかもしれません。</p>\n<p><div class=\"embed-youtube embed-wrapper\" style=\"text-align: center;\"><iframe class=\"embed-youtube\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4JEHVZTRjXY?feature=oembed\"></iframe></div></p>\n<p>ちなみにこの動画、とてもよくできていて3Dプリンタを買う前にイメージを掴むのに大変役立ちました。</p>\n<h2>印刷してみる</h2>\n<p>印刷のためには以下の2つのソフトが必要になります</p>\n<ul>\n<li>3D CAD</li>\n</ul>\n<p>印刷物の3Dデータを作成するのに必要です。インターネットから印刷データをダウンロードする場合は不要です。Fusion360というソフトが非商用だと無料に使えるので、ひとまずこれを試してみるのが良いと思います。<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup></p>\n<p>3D CADはあまり使ったことないのですが、基本は平面を作って引き伸ばすという方法を繰り返せばそこそこの物が作れるようです。スケッチを選んで、面を選んで、面上に図を書いて、引き伸ばす。これをこれをくり返せば結構いろいろな図形を作ることができます。\nあわせてフィレット （角を削って曲面にする) と回転引き伸ばしを組み合わせて、直線方向以外の整形も行えますが、これらの処理には注意が必要です。\n私が3Dプリンタを使うとき、印刷物して実物を見てからモデルを調整するということが何度も発生しておりこういうときにフィレットされていると面を引き伸ばすことが難しくなります。フィレットしてない版を保存しておき、実際にどこかで利用されるときは毎度フィレットを行う、という方法を取れば、手戻りは少なくなりそうです。</p>\n<p>Fusion360には保存時に同一ファイル内でバージョン管理ができ、バージョンごとにに名前をつけられるなどの機能があるのですが、試行錯誤して作るデジタルデータはgitで管理したくなるなという気持ちになりました。</p>\n<ul>\n<li>スライサー</li>\n</ul>\n<p>3Dモデルからgcode (3Dプリンタが読み込める形式) への変換に必要です\nUltimaker Cura というソフトを使っています。\n3D CADからSTL形式で出力したモデルを、Ultimaker Curaで、印刷設定をしてgcodeで出力します。\n印刷設定としては、 in fill (印刷時、内部の充填率を決められる。25〜30%くらいがよく使われているらしい)、印刷方向、サポート材の有無などが決められます。</p>\n<p>gcode形式のファイルができたら、SDカードへ保存します。\ngcodeファイルをSDカードに入れてAnyvubic Mega Sに差し込み、タッチパネルからファイルを選びます。</p>\n<p>最初は付属のSDカードに入っていたフクロウを印刷してみましたが、 大きさが5cmくらい、1時間半程度で印刷が終わりました。\nフィギュアを作る予定ではないので十分満足できる精度だと思います。\n2.5万円ということでもしかしたらまともに使い物にならないかもと期待していなかったのですが、全然そんなことなく、色々なことに活用できそうです。</p>\n<p><img src=\"https://blob.yammer.jp/anycubic-mega-s-owl-printed.jpg\" alt=\"Anycubic Mega Sで印刷したフクロウ\"></p>\n<p>印刷のコツとして、以下のような点がありそうです。</p>\n<ul>\n<li>積層方向を考慮する ... 積層方向によって、縮みや歪みや強度に差があるので、3Dモデルの設計だけでなく印刷方向の決定も印刷の成功に関わってきます。</li>\n<li>印刷後は台座が冷えるのを少し待つと良い ... Anycubicの台座は特殊な素材が使われているようで、プラットフォームが熱い間 (印刷中) はずれないように吸着し、印刷後冷めると剥がれやすくなります。印刷後は焦ってすぐ剥がすよりも少し待った方が、台座を傷つけずに済みます。</li>\n<li>大きな部品は分割する ... 大きな部品は印刷に時間がかかるので待ち時間が増えます。それだけでなく、トライアンドエラーをするのが億劫になります。組み立て式にしたり一部に切り出したりすると試作しやすく、良いものが作りやすいと思います。</li>\n</ul>\n<h2>感想</h2>\n<p>私個人としては買ってよかったです。\n印刷したいものが安価に印刷できて満足でした。\n安価に販売されているので、買ってみたが全然使い物にならなかったなどということも想像してましたが、予想以上に\"普通に\"使えました。</p>\n<p>しかしながらモデルを作って印刷して改良して、を繰り返すのはそこそこ時間がかかるので、そういった手間を覚悟で楽しむものだなあという感じです。\n(3D CADへの習熟度が上がればもっと気軽につくっていけるのかもしれません)</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>3Dプリンタはもっと高価なものだと思っていたのに随分手頃になりました。 例えば<a href=\"https://nico.ms/sm21538472\">2012年頃の動画に出てくる3Dプリンタ</a>は積層間隔が0.3mm、自分で加工しながらMDF材からなるたくさんのパーツを組み立てています。(たしか当時リアルタイムで見ていた動画です。ニコニコ動画の #ニコニコ技術部 タグをみてワクワクしていた頃です。) 私の買った3Dプリンタは金属製で主に3つのパーツをネジ止めするだけでよいものです。それが2.5万円ですから、低廉化が進んでいますね。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>3Dプリンタはカスタマイズする文化があるようで、あとからパーツを交換して静音化や印刷精度の向上などをはかる事ができるようです。購入する前は興味がなかったのですがいざ届いてみるとちょっと静音化に手を出したくなったりします。 動作音 (とくに機械動作音ではなくモータドライバの電子音) がそこそこな音で、同じ部屋で寝るのは難しいレベルの騒音でした。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>FlashForgeは印刷部分が囲われていてかっこいいですが、これは格好良さではなく庫内の温度を高く保つためなんだそうです。ABSで印刷するときはこういった囲いがあるほうが印刷に成功しやすいらしい。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>M1 Macbook Airだとデュアルディスプレイにしたときに小ウィンドウの表示がバグっている気がする。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2022-12-22T16:11:31+09:00","message":"Fix: Youtube埋め込み時に、画面全体が崩れる問題を避ける\n","hash":"8216580686fcb8ec5f7ed9bf9f3d5117a3c5a1e5"},{"date":"2022-01-26T23:40:26+09:00","message":"Post: 「2021年に3Dプリンタに入門した - Anycubic Mega S」\n","hash":"7e96d14a485fc138796b557d08fa7dc21b2198f4"}],"date_published":"2022-01-26T23:40:00+09:00","tags":["3Dプリンタ"]},{"id":"https://memo.yammer.jp/posts/database-specialist-examination","url":"https://memo.yammer.jp/posts/database-specialist-examination","title":"情報処理技術者試験にはミックスサンド (DBスペシャリスト試験を受けました)","summary":"2021/10/10に令和3年度秋期データベーススペシャリスト試験を受験しました。 情報処理技術者試験は通算4回目、高度情報は2回目 (春にネットワークスペシャリスト落ち)、データベーススペシャリストは今回が初でした。 合格したので、この度晴れてみくりさんと結婚できる権利を得ました。 #逃げ恥 リストラ候補の津崎平匡さんの資格欄「応用情報技術者、データベーススペシャリスト、基本情報技術者」 - togetter 以下、対策したことを記録します。 参考書 いままではインプレスの過去問題集を毎度買っていたのですが、今回は翔泳社の「うかる！データベーススペシャリスト」を購入しました。 結果からいうと","content_html":"<p>2021/10/10に令和3年度秋期データベーススペシャリスト試験を受験しました。\n情報処理技術者試験は通算4回目、高度情報は2回目 (春にネットワークスペシャリスト落ち)、データベーススペシャリストは今回が初でした。</p>\n<p>合格したので、この度晴れてみくりさんと結婚できる権利を得ました。</p>\n<p><a href=\"https://togetter.com/li/1058081\">#逃げ恥 リストラ候補の津崎平匡さんの資格欄「応用情報技術者、データベーススペシャリスト、基本情報技術者」 - togetter</a></p>\n<p>以下、対策したことを記録します。</p>\n<h2>参考書</h2>\n<p>いままではインプレスの過去問題集を毎度買っていたのですが、今回は翔泳社の「うかる！データベーススペシャリスト」を購入しました。</p>\n<p>結果からいうとこれは大正解で、午後問題の解説がめちゃくちゃ丁寧なので知識があまりない状態でも解説から吸収することができました。\nインプレスの過去問題集は、ネットワークスペシャリストの午後問題を勉強しているときに解説がサラッとしすぎていてわからんなあという気持ちになっていました。\n「うかる！データベーススペシャリスト」には各問題のパターンと解き方も参考書に丁寧に解説されているので、試験申し込んだときに一読し、あとで解くときに読み直すと良いように思います。</p>\n<p>インプレスの過去問題集は書籍自体をPDFダウンロードできるのが気に入って前回まで買っていました。\n翔泳社の書籍の電子版はKindleで販売されていますが、こういう参考書は書き込んでなんぼなのでKindleアプリ上で勉強するのは厳しいものがあります。\nPDFでの販売をしてくれるとより買いやすくなるのですが...</p>\n<h2>試験勉強の時間軸</h2>\n<p>試験勉強を始めたのは申込みをした8月中旬からでした。\n参考書を前からざっくり読んだ後、問題演習として初めに取り組んだのは午前Ⅱ対策です。\n1分半程度で解く規模の問題なので軽い気持ちで勉強しやすく、知識中心なのでまずはこれから手を付けました。</p>\n<p>9月に入った頃に午前Ⅱ対策を終わりにして午後対策に移りました。\n午後Ⅱは1問解くのに2時間かかるので、休日に午後Ⅱ、平日に午後Iとして、並行して過去問を解いていました。\nしかしながら特に午後Ⅱはとにかく文章が長いしやってると眠くなるし、この頃からモチベーションも薄れてきて勉強ペースが落ちがちに。\n結局参考書で紹介された再重要問題の半分くらい解いたところで試験前日になりまして、残りの問題は解説を読んで雰囲気を掴んで当日を迎えました。</p>\n<p>情報処理技術者試験は申し込んだとき一番モチベーションが高い気がします。\n毎度試験会場は半分〜7割くらいしかいないのでみんなそんな感じなんじゃないかな。\n申込時のモチベーションとその勢いでどこまで勉強できるか、それをどれだけ維持できるかが大事なのかなと思っています。</p>\n<h2>各試験区分の対策と感想</h2>\n<h3>午前Ⅰ</h3>\n<p>応用情報技術者試験を受けたのが2年以上前なので午前1の免除はありませんでした。\nいけるやろ」と無勉強で望んだのものの意外とと解けない問題もありました。\nさらに大々的にマークミスをしていまい、少し危なっかしい点数でした。\n問題番号と解答用紙のマーク位置はよく確認しましょう。</p>\n<h3>午前Ⅱ</h3>\n<p>午前Ⅱは選択式の問題で、データベースに関連する幅広い知識が問われます。\n対策としては参考書についてくる200問を繰り返し解いていました。\nデータベース何もわからん人間でSQLすら怪しい状態でしたが、間違えたところに絞りながら2,3周すればそこそこ解けるようになりました。</p>\n<p>SQLはどうやって学べばええんやというときは、PostgreSQLやMySQLの日本語ドキュメントを参考にすることが多かったです。\n参考書では簡潔に書かれ読み取れないことも含めて丁寧に書かれており読みやすい内容でした。\n(それが標準SQLであるかは確認する必要があります。)</p>\n<p>情報処理技術者試験の選択問題対策はどれも範囲が広いので雑にググって知らない言葉をなんとなく頭に入れておくのがよいと思っているのですが、ことSQLにおいては信頼できなさそうな量産ブログがたくさん引っかかるので最初から的を絞った方がよかったです。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>今思えばSQLに関する本を一冊買うなどしてもよかったように思います。</p>\n<h3>午後I</h3>\n<p>午後Iの問題は出題形式がいろいろありますが、一部の問題は午後IIをコンパクトにしたようなものもあります。\n午後Ⅱの対策をある程度進めてから午後Iに取り掛かった方が効率が良いように思います。</p>\n<h3>午後Ⅱ</h3>\n<p>参考書によるとデータベーススペシャリストの午後Ⅱは出題形式が定番になっていて、前述の通りその問題が出来ないと受からないかつそれが出来れば午後I対策にもなるとのこと。\n午後Ⅱのもっとも定番な問題である概念データモデルと関係スキーマに関する問題を何問か解いていきました。\n業務ロジックが文章で説明されており、未完成の概念データモデルと関係スキーマを完成させるのが主な問題の内容です。</p>\n<p>が、この問題、とにかく問題の文章量が多い。\n1問あたり12ページくらいあります。\niPadではページ切り替えが多すぎて厳しいので印刷して紙でやったほうがいいでしょう。</p>\n<h2>試験のためのTips</h2>\n<h3>概念データモデルの記法</h3>\n<p>午後問題では概念データモデルが必ず出てきます。\nそれぞれの記号に関する意味は注意書きとして試験問題の前半に書いてありますが、これは例年同じものです。</p>\n<p>午後問題の勉強を始めるときに初めに時間をとってじっくり読むことをお勧めします。\nこの記法にしたがって概念データモデルを書く問題も頻出です。\n私は読まずに問題を解いていて、対策中盤くらいまでなんだかよくわからない記法が使われているなあという気持ちになっていました。</p>\n<h3>午後Ⅱ開始前の...</h3>\n<p>当日は各試験区分が始まる15分くらい前から説明が始まります。\n午前中は受験票の回収がありますが、午後にもなると説明や準備もすぐに終わって解答開始まで10分くらい無の時間が訪れます。\n携帯も切って参考書も閉まったあとで、じっと座っているだけの時間です。</p>\n<p>ここの時間は空想をするくらいしかないと思っていたのですが、午後IIには未完成の概念データモデルを埋める定番問題があります。\nこれを解くにはたくさんの問題文から情報を抽出して回答する必要があるので全体を掴んでおくと結構よかったりします。\nそしてこの問題は解答用紙に未完成の図が書いてあるので、試験開始前になんとなく問題に出てくる用語とその関係を見ることができてしまいます。ます😜</p>\n<h2>おわりに</h2>\n<p>データベーススペシャリストに合格したところで実際の業務上でわからないことは沢山あると思いますが、ひとまず一定の知識を習得できた意味で受験してよかったです。</p>\n<p>タイトルのミックスサンドは試験当日に食べたお昼のメニューです。\n情報処理技術者試験の試験会場は私が参加した限りでは大抵どこかの学校で開かれます。\nコンビニが近くになかったり、あっても混み合うことが予想されるので、駅を降りたあたりのコンビニでご飯を買うとよいと思っています。</p>\n<p>今回もコンビニに寄ったのですが、その時ふと以前の試験のときにミックスサンドを買ったことを思い出しまして。\nコンビニに売っている普通のミックスサンドですが妙に美味しかった記憶が残っており今回も同様のものを選びました。</p>\n<p>起床時間が早く空腹を感じて午前Ⅱの前に美味しくいただきました。\n次に情報処理技術者試験を受けることがあったら、またミックスサンドを選ぶかもしれません。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>このブログも個人が書いているもので、大して信頼できる情報ではないのだった <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-12-19T19:11:33+09:00","message":"Fix: 表記を統一\n","hash":"21ce18f2d691845f444f1c1fcdbadd37fa2b097a"},{"date":"2021-12-19T08:14:02+00:00","message":"Post:「情報処理技術者試験にはミックスサンド (DBスペシャリスト試験を受けました)\"」\n","hash":"a8b6af4aae30ec190bce92f0b5718846002a157d"}],"date_published":"2021-12-19T17:13:00+09:00","tags":["日記","データベース","情報処理技術者試験"]},{"id":"https://memo.yammer.jp/posts/newcomer-in-development-team-supplement","url":"https://memo.yammer.jp/posts/newcomer-in-development-team-supplement","title":"ECテックカンファレンスの前と後","summary":"前の記事に書いたとおり先日ペパボECテックカンファレンスに登壇しました。 今日はテックカンファレンスの内容ではなく発表前後に考えていたことと気持ちをいくつか記します。 「新卒」という言葉を使わない 発表に際してひとつ気をつけていたことに「新卒」という言葉をあまり使わないことがあります。 テックカンファレンスの目的や狙いが記載された社内向けのissueを登壇が決まった頃に読んだ記憶があります。 これと今までやってきたこととを照らし合わせ自らの発表を聞いて欲しい人をジュニア層 1 のエンジニアと定めていました。 私は新卒で入社したのでその体験をこれから新卒で入社される方や興味のある方に向けて話す行","content_html":"<p><a href=\"/posts/newcomer-in-development-team\">前の記事に書いたとおり</a>先日<a href=\"https://pepabo.connpass.com/event/231478\">ペパボECテックカンファレンス</a>に登壇しました。\n今日はテックカンファレンスの内容ではなく発表前後に考えていたことと気持ちをいくつか記します。</p>\n<h2>「新卒」という言葉を使わない</h2>\n<p>発表に際してひとつ気をつけていたことに「新卒」という言葉をあまり使わないことがあります。</p>\n<p>テックカンファレンスの目的や狙いが記載された社内向けのissueを登壇が決まった頃に読んだ記憶があります。\nこれと今までやってきたこととを照らし合わせ自らの発表を聞いて欲しい人をジュニア層 <sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup> のエンジニアと定めていました。</p>\n<p>私は新卒で入社したのでその体験をこれから新卒で入社される方や興味のある方に向けて話す行為は普通は一定程度価値があると思います。\nしかしながら実は聞いて欲しい人として定めたジュニア層のエンジニアと、私の所属する会社の今後の新卒採用の募集方針は重なる部分が少なくなっています。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>\nこのことを鑑みると「新卒」という言葉を聞いて会社に興味を抱いてくださっても募集要項とは重ならずミスマッチが発生することになります。</p>\n<p>そこで聞いて欲しい人と伝えたい内容を合わせるために、新卒かどうかにかかわらず「新しくチームに入る人」という視点で内容を組み立てることとしました。\nこれであれば新卒に限定せずエンジニアに広く聞いてもらえる内容となります。\nチームで働いている人は誰でも人を迎え入れたりチームに加わったりした経験があるはずですし、今後チームで働きたい人にとっても聞く耳を持ってもらえることと思います。</p>\n<h2>技術的にどんなことに取り組んだかを軸にしない</h2>\n<p>テックカンファレンスですから技術に興味のある人が集まり技術について発表する場であることは明らかでしょう。\nしかしながら今回発表したようなチームとしてうまくやるための手法も、技術による価値提供を支えるために技術者に求められることの一つに思います。</p>\n<p>もちろん技術の話は面白いし現にたくさんの方々が技術の話をされたわけですが、一方で今の私が技術の話に触れたとき内容が中途半端になることを恐れていました。\n日々の仕事は難しく面白いものでありエンジニアであるから技術を用いた課題解決をしているわけでありますが、今やっている事柄は業務知識に密接に紐づいたものであったり事業部の物事をキャッチアップしたりする機会が多く、切り取り方が難しいと感じていたのです。</p>\n<p>しばらく考えてもあまり良い内容が思い浮かばず、発表が近づいてきた段階で自分で決めたのが「技術的にどんなことに取り組んだかを軸にしない」ことでした。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>\n中途半端に技術の話をするよりも、どのように考え何を感じたのかの方がきっと面白味があるし、私の発表の目的<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup>のひとつであった「このサービスで働くのはこんな感じか」を想像しやすいのではないかと考えました。</p>\n<p>テクニカルな内容にあまり触れなかったのは結果としてよかったと感じています。\n今の私に話せることを発表に落とし込んだつもりですが、一方で他の方々の発表を聞いて「技術的にこんなことをやっているぞ」と自慢できるくらい成果を出せるようになりたいとも思ったので、来年以降たくさん成果を出して発表の場に立ちたいと思います。</p>\n<h2>聴衆は\"あなたの発表\"を聞きに来ているのです。</h2>\n<p>発表前に社内のSlackに投稿されていた文章がいい話だったのでここで触れます。</p>\n<blockquote>\n<p>初めての発表で緊張していたり、どういう反応がくるか不安になってしまうというのはよくわかります。\nしかし、あなたの発表を見に来ている人は、他の誰でもない「あなた」の発表を見たくて見に来ているのです。</p>\n</blockquote>\n<p><a href=\"https://diary.shu-cream.net/%E8%81%B4%E8%A1%86%E3%81%AF%22%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AE%E7%99%BA%E8%A1%A8%22%E3%82%92%E8%81%9E%E3%81%8D%E3%81%AB%E6%9D%A5%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%99\">聴衆は\"あなたの発表\"を聞きに来ているのです - けんちゃんくんさんのWeb日記</a></p>\n<p>(どうぞ上記の記事を全文お読みください)</p>\n<p>当日は緊張していましたが、何か一つでも持ち帰ってもらえるものがあればという気持ちで内容に自信を持って臨むことができました。\nオンラインで発表していたので聴講者の顔は見えませんが、何人もの人に発表を聞いていただけたようで本当に嬉しいです。</p>\n<p>次にまた発表の機会があったときこの文章を読んで気持ちを整えたいと思っています。\nあわせて自らの話を聞く時間をとってくださる人のために内容に自信をもてるだけの準備をしなければと感じます。</p>\n<h2>Speaker Deckにスライドを公開する</h2>\n<p>当日の発表スライドはSpeaker Deckにアップロードしました。\n公開にあたって気をつけたことがあるので紹介します。</p>\n<h3>Google SlidesとSpeaker Deckの相性</h3>\n<p>どうもGoogle Slidesで出力した日本語を含むPDFはSpeaker Deckで公開すると崩れるようです。(太字部分が白抜き文字になる)\nこれを回避するために一旦Keynoteで読み込んでからPDFにするなどしました。\nKeynoteに読み込むとスライド内のオブジェクトの位置ズレなどが発生するので、それを修正する必要もありました。</p>\n<h3>Speaker DeckのタイトルとURL</h3>\n<p>Speaker Deckで公開したスライドのURLはタイトルから生成されるようになっています。\n日本語の場合はローマ字読みのアルファベットに置き換えられますが、完全に正しい読みになるわけではありません。\nこれを回避するために発表名の末尾に<code>/</code>を付けて続けて半角英数字などをおくと、<code>/</code>の後の半角英数字のみがURLになるようです。</p>\n<p>これを生かして以下のようなタイトルとURLとしました。</p>\n<ul>\n<li>タイトル: 「開発チームの新しいエンジニアメンバーがうまくやるには / newcomer-in-development-team」</li>\n<li>URL: 「<a href=\"https://speakerdeck.com/yammerjp/newcomer-in-development-team%E3%80%8D\">https://speakerdeck.com/yammerjp/newcomer-in-development-team」</a></li>\n</ul>\n<p>以上、雑多ですが、発表に際してどんなことを考えていたかを記しました。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>ジュニア層のエンジニアとは<a href=\"https://tech.pepabo.com/2020/07/30/pepabo-engineering-2020-summer/\">ペパボのエンジニアの各種制度 2020 夏 - ペパボテックブログ</a> で示されている1-3等級相当のエンジニアのことを指して言っています。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p><a href=\"https://pepabo.com/news/information/202112131500\">GMOインターネットグループ共通2023年度新卒採用エントリーを開始しました - GMOペパボ株式会社</a> にある通りの採用基準が定められています。これは新卒の採用基準であって、例えば<a href=\"https://recruit.pepabo.com/info/career/\">ジュニア層向けの中途採用</a>や<a href=\"https://recruit.pepabo.com/info/collage/\">未経験者向け研修付き採用「ペパボカレッジ」</a>などはこれに該当せず、募集が開かれています。(2021/12/16時点) <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>発表の趣旨から離れすぎない範囲で技術的な内容に触れてはいます。(環境作成タスクの内容や自動テストなど) <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>私の発表を聞いて「このサービスで働くのはこんな感じか」「このサービスで働くのは面白いぞ」「このサービスで働いてみたい」などの感情を想起してもらいたいと思っていました。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-12-16T13:31:03+09:00","message":"Fix: リンクの修正\n","hash":"c2e660d0f8a1a91121aad25ff9a155a61242bc27"},{"date":"2021-12-16T10:50:21+09:00","message":"Fix: 表記を統一\n","hash":"2973a55a2247b3b075c158f641d91718aa4ed3d9"},{"date":"2021-12-16T10:44:26+09:00","message":"Post: 「ECテックカンファレンスの前と後」\n","hash":"f34fc3f957d81a13b238583e8b8fa0a565934cc0"}],"date_published":"2021-12-16T10:43:00+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/newcomer-in-development-team","url":"https://memo.yammer.jp/posts/newcomer-in-development-team","title":"開発チームの新しいエンジニアメンバーがうまくやるには","summary":"こんにちは、2021/12/09に開催されたペパボECテックカンファレンスにて、記事名と同じタイトルで発表をしました。 当日のスライドはSpeaker Deckで公開しています。 今日はその発表の内容を記事として紹介します。 開発チームの新しいエンジニアメンバーがうまくやるには 私は4月に新卒でWebアプリケーションエンジニアとして入社し、今は10人弱のチームに配属となってから3ヶ月ほどが経ちました。 会社のGitHub Enterprise Server上では、配属からこれまでで約60のPull Requestを開き、マージし、デプロイされました。 Pull Requestの数と成果は必ずし","content_html":"<p>こんにちは、2021/12/09に開催された<a href=\"https://pepabo.connpass.com/event/231478\">ペパボECテックカンファレンス</a>にて、記事名と同じタイトルで発表をしました。\n当日のスライドはSpeaker Deckで公開しています。</p>\n<div style=\"text-align: center;\">\n<iframe class=\"speakerdeck-iframe\" frameborder=\"0\" src=\"https://speakerdeck.com/player/aff516d8e9404ef5b58c114f714fff87\" title=\"開発チームの新しいエンジニアメンバーがうまくやるには / newcomer-in-development-team\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" style=\"border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;\" data-ratio=\"1.78343949044586\"></iframe>\n</div>\n<p>今日はその発表の内容を記事として紹介します。</p>\n<h2>開発チームの新しいエンジニアメンバーがうまくやるには</h2>\n<p>私は4月に新卒でWebアプリケーションエンジニアとして入社し、今は10人弱のチームに配属となってから3ヶ月ほどが経ちました。\n会社のGitHub Enterprise Server上では、配属からこれまでで約60のPull Requestを開き、マージし、デプロイされました。\nPull Requestの数と成果は必ずしも一致しませんが、配属から今日までの間、昨日を細かく分割して実装しデプロイするということを続けています。</p>\n<p>チームメンバーが私を迎え入れるにあたってしてくれたことは、業務経験の無い自分が開発に取り組むにあたってとても役に立つものでした。\n以下では自らが意識的に取り組んだことと合わせて「新しいメンバーが〇〇するには」という題目で紹介します。</p>\n<h2>1.新しいメンバーが業務知識を素早く獲得するには</h2>\n<p>Webサービスのアプリケーション開発において、業務知識への理解は欠かせません。\nここでいう業務知識とは、そのサービスを成立させるためのアプリケーションの構成やそれらのアプリケーション固有の仕様などをはじめとした、エンジニアが業務を進める上で必要なそのサービス特有の知識のことを指しています。</p>\n<p>このような知識は開発チームに参加したのちに獲得する必要があり、素早く獲得すればより早く広範囲のタスクを扱えるようになるでしょう。</p>\n<h3>アプリケーションの構成に関する共有会を開く</h3>\n<p>(チームメンバーが私にしてくれたこと)</p>\n<p>チームメンバーに業務知識の共有会を開いていただいたことは、業務知識の獲得に直接的に大きく影響を与えました。\n独自のアーキテクチャを持つアプリケーションのディレクトリごとの構成や各レイヤの関係性をざっくりと説明をしてもらったことでその後のコードリーディングが捗ったように思います。</p>\n<p>他にもリレーショナルデータベースの重要なテーブルの関係性についてレクチャーをいただいたことも良い機会でした。\n私の開発するサービスは多数のロールがデータベースを介して連携をしています。即ち特定のロールの処理を見てもそれ自体がサービスの動作を表しているわけではなく、他ロールでどのように使われているかを知る必要があります。\nこういった広い範囲の挙動を把握するためには、全体感をつかむ説明を受けた方がアプリケーションの挙動を把握するのが楽になります。</p>\n<h3>少しずつ取り組む領域を広げる</h3>\n<p>(チームメンバーが私にしてくれたこと)</p>\n<p>配属初期にいただいたタスクに関連するコード上の領域が少しずつ広がっていったことも業務知識を素早く獲得するに寄与しました。私は元々フロントエンド寄りのスキルセットであったので、Webフロントエンド領域のテンプレートやVueコンポーネントの実装からはじめて、次にWebサーバサイド領域のController層、Model層の開発に関わり、さらに他のロールや外部APIとの通信、バッチといった部分へ手を広げていきました。\n大きなコードベースの中で少しずつコードリーディングの範囲を広げられたことはスムーズに開発に参加できた要因のひとつでした。</p>\n<h3>チームに回ってくるタスクに「やります」と言う</h3>\n<p>(自らが意識していること)</p>\n<p>業務知識を素早く獲得するために私が心掛けていることの1つとして、チームに回ってくるタスクに積極的に「やります」と手を挙げることがあります。\n開発チームにおいて、お問い合わせやパートナー (社員のこと) からの依頼に起因して、もともとの計画に含まれない突発的なタスクが発生することがときどきあります。\nこういったタスクの中には配属後少し時間が経ち慣れてくればある程度対応できそうなものもあります。\n自らのできることが少ないからこそ、できることは積極的に巻き取ることでチームに貢献しようとしています。</p>\n<p>チームとしての生産性を高めるという点だけでなく、こういったタスクはときに自らの知っている領域を広げるきっかけになることがあります。\n例えば私はあるロールのDockerを用いた開発環境を作成するタスクに取り組みましたが、これはまさに自らの知っている領域を広げるものでした。</p>\n<p>普段はコードベースの大きい中心的なロールに対して開発を行なっており、CI/CD環境が整備され、Gitの操作やSlackとの連携によって、深く知らずとも簡単にデプロイできる環境が整っています。</p>\n<p>一方開発環境の作成では、そのようなCI/CD環境が普段どのようなことを行なっているのかを一定程度追う必要がありました。\nまた、Webアプリケーションのエントリポイントに到達する前に、インフラレベルでHTTPリクエストがどのようにルーティングされているかといったことについても一定程度理解する必要がありました。\nこれらの知識は中心的なロールを含む他のロールにも適用でき、ブラックボックスとして扱っていたサービスを構成する要素の一部がどんなことをしているかを知ることができました。</p>\n<p>手を挙げてタスクを受け取ることで、こういった毛色の違うタスクに触れる</p>\n<h2>2.新しいメンバーがチームに馴染むには</h2>\n<p>昨今は心理的安全性という言葉が取り沙汰され、開発チームのメンバー同士の関係もプロダクトの提供する価値に影響を与えることが広く知られていることと思います。\n私の所属するチームにおいてもチームメンバー同士の関係を良好に保ち、意見を積極的に交換できるような関係性を築くような取り組みがなされています。</p>\n<h3>お互いの強み/弱みを知る</h3>\n<p>(チームメンバーが私にしてくれたこと)</p>\n<p>チームメンバーがお互いの強み/弱みを知るために「ドラッカー風エクササイズ」という手法のチームビルディングのためのワークショップを開催していただきました。これは私がチームメンバーと相互理解を深めることに役立った出来事の1つでしょう。\n「ドラッカー風エクササイズ」はお互いの特徴の自己認識と他者認識を書き出して、期待値をすり合わせるための手法です。\n自らの思っている強み/弱みを伝えるきっかけになりますし、自分以外のチームメンバー同士でどのような関係が築かれているかを知る機会になります。\nペパボにおけるドラッカー風エクササイズの取り組みは会社のブログに紹介がありますので以下の記事をご覧になると良いかと思います。</p>\n<p>参考: <a href=\"https://tech.pepabo.com/2017/07/07/the-drucker-exercise/\">「ドラッカー風エクササイズ」で期待をすりあわせて安全なチームに - ペパボテックブログ</a></p>\n<h3>コミュニケーションの場を用意する</h3>\n<p>(チームメンバーが私にしてくれたこと)</p>\n<ul>\n<li>フードコート</li>\n</ul>\n<p>私の事業部のいくつかのチームにはフードコートという取り組みがあります。いつでも開かれているビデオミーティング会場で、お互いが好きな時に入ることができます。私の所属するチームのメンバーの多くは予定がない時などはここにいて、チームメンバーに話したい時にマイクをonにするといった運用がなされています。\nフードコートに居る義務はなく、集中して業務に取り組みたいときなどには入らないという選択肢をとることもできます。\n仕事を始めたて且つチームに参加したての自分にとって、発話のハードルが下がったのでありがたい取り組みでした。</p>\n<ul>\n<li>事業部お茶会</li>\n</ul>\n<p>リモートワークの中では、偶発的な同期コミュニケーションの機会はあまりありません。\nこのためチームメンバーが事業部の人を招いた座談会を定期的に開催してくれています。\n他チームの人と業務に関係あるかどうかに関係なくいろいろな話をする機会が生まれることは、視野が広がる機会となっています。</p>\n<h3>日報を書く</h3>\n<p>(自らが意識していること)</p>\n<p>チームメンバーとの相互理解を深めるために大事なことの一つに自己開示があります。\n日報を書くことで、自らがどんなことを考えて仕事をしているか、どんな感情であるか、何を理解していて何を理解していないのかを知ってもらう機会となります。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>\nまた、チームメンバー以外の人が見てコメントをくれることもあります。</p>\n<p>日報のフォーマットとしては「今の気持ち」「やったこと」「わかったこと」「次にやること」の4つに分けて記述するようにしています。</p>\n<h2>3.新しいメンバーが開発の提案をするには</h2>\n<h3>複数の選択肢を挙げる</h3>\n<p>(自らが意識していること)</p>\n<p>開発において、要件を達成する手法を自分で決められない/決めないとき、複数の選択肢を提案することで、自らに足りない業務知識や技術的知見を補ってもらえるようにしています。</p>\n<p>このとき、あわせて自分が最も良いと思う選択肢を1つ選ぶよう心がけています。\n自分が選んだものと実際に選ばれたものの差異が学びになるので、自分で1つ選ぶことはこれからも続けていきたいと思っています。</p>\n<h3>テストコードを書く</h3>\n<p>(自らが意識していること)</p>\n<p>Pull Requestを開発における実装の提案の場として考えると、Pull Requestも新しいメンバーが開発の提案をうまくやる必要のある場の一つでしょう。\n適当なPull Requestを投げてばかりではレビュアーの負担は増大するばかりです。</p>\n<p>レビューしやすい Pull Request にするという意味でテストコードは有用です。\nコードの一定の質が担保されるだけでなく、入出力が明確になったり、依存が明らかになったりするという利点が考えられるでしょう。</p>\n<p>ちなみにテストコードの書き方については新卒研修の中でのカリキュラムがとても役に立ちました。\nペパボの2021年度の新卒エンジニア研修では、<a href=\"https://railstutorial.jp/chapters/beginning?version=6.0\">Railsチュートリアル内</a>でのMinitestによる自動テスト、<a href=\"https://tech.pepabo.com/2021/09/22/igaiga-workshop/\">RSpec書き方講座</a>、<a href=\"https://tech.pepabo.com/2021/06/18/tdd-workshop-2021/\">TDDワークショップ</a>など、ソフトウェア開発における自動テストがどのような役割を持ちどのように作るべきかを学ぶことができました。\n今はRSpecだけでなくPHPUnitやJestを用いたテストコードを書く機会がありますが、これらのテストフレームワークを使う上でも研修で学んだ内容が役に立っています。</p>\n<h2>おわりに</h2>\n<p>以上のような取り組みを通して、開発チームに新しくエンジニアとして加わったメンバーが、業務知識を素早く獲得し、チームに馴染み、開発の提案をして、ユーザへの価値提供に取り組んでいます。\nチームメンバーが新しく私を迎え入れるためにしてくれたことが今の開発に生きていると感じています。</p>\n<p>これらの事例が、チームに新しく加わる人や、新しい人を迎えるチームにとって参考になれば幸いです。また、チームに加わった3ヶ月で自分がどのように感じ何が役に立っていたかの取り組みを残しておくことで、将来チームメンバーを迎え入れる側になったときにこれを見返してよい環境を提供できるようになれればと思います。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>同時にこれら (どんなことを考えて仕事をしているか、どんな感情であるか、何を理解していて何を理解していないのか) を言語化することで自らに対して明らかにする機会ともなります。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-12-16T10:45:31+09:00","message":"Fix: 投稿日時\n","hash":"1c890361f24a031510272d9fbbf454b8a3e00070"},{"date":"2021-12-14T00:03:57+09:00","message":"Post: 「開発チームの新しいエンジニアメンバーがうまくやるには」\n","hash":"9caf6e188622e5afe171f771588158fb902332cd"}],"date_published":"2021-12-14T00:03:00+09:00","tags":["オンボーディング","チームワーク","Webサービス開発","ドメイン知識"]},{"id":"https://memo.yammer.jp/posts/layered-dotfiles","url":"https://memo.yammer.jp/posts/layered-dotfiles","title":"複数の環境に適応する、階層構造のdotfiles","summary":"こんにちは、やんまーです。 もう師走、早いですね... この記事はGMOペパボアドベントカレンダーの2日目のものです。 昨日はdaikiさんの「社会人エンジニアな僕が研究を続ける理由」でした。 記事の中の研究を通して自己表現をされているという表現が印象的でした。仕事に精を出しながらも、仕事とは異なるところで時間をとって継続的に物事に取り組むということに尊敬の念を持ちます。 私も見習いたいものです。 今日は変わって実践的な内容です。私の開発環境 dotfilesを紹介します。 dotfiles とは Unix / Linux の環境において、~/.bashrc、 ~/.vimrc、 ~/.git","content_html":"<p>こんにちは、やんまーです。\nもう師走、早いですね...\nこの記事は<a href=\"https://adventar.org/calendars/6375\">GMOペパボアドベントカレンダー</a>の2日目のものです。</p>\n<p>昨日は<a href=\"https://twitter.com/_doew\">daiki</a>さんの「<a href=\"https://blog.d-sato.net/?p=116\">社会人エンジニアな僕が研究を続ける理由</a>」でした。\n記事の中の研究を通して自己表現をされているという表現が印象的でした。仕事に精を出しながらも、仕事とは異なるところで時間をとって継続的に物事に取り組むということに尊敬の念を持ちます。\n私も見習いたいものです。</p>\n<p>今日は変わって実践的な内容です。私の開発環境 dotfilesを紹介します。</p>\n<h2>dotfiles とは</h2>\n<p>Unix / Linux の環境において、<code>~/.bashrc</code>、 <code>~/.vimrc</code>、 <code>~/.gitconfig</code> のように <code>.</code> から始まる各アプリケーションの設定ファイルが <code>$HOME</code> ディレクトリに配置されることがよくあります。\nこれらの設定ファイルを自分の持っている複数のPCに適用したいというモチベーションや、PCを乗り換えた時のためにバックアップして復元したいというモチベーションから、ローカルのストレージ以外にも保存するということが行われています。</p>\n<p>こういった設定ファイル群とこれらをローカルストレージ以外の場所に保存することを指して dotfiles と呼び、GitHubのリポジトリで公開するなどしている人もいます。\nかくいう私も自らの設定ファイルを保存・公開している人の一人で、GitHubのリポジトリ (<a href=\"https://github.com/yammerjp/dotfiles\">yammerjp/dotfiles</a>) から誰でも見れるようにしています。</p>\n<h2>単純なdotfiles</h2>\n<p>本記事で後述する複数環境に対応した構成のまえに、単純なdotfilesの構成として <a href=\"https://github.com/yammerjp/dotfiles-mini\">yammerjp/dotfiles-mini</a> をみてみましょう。\nこのリポジトリには次のようなファイルがあります。</p>\n<table>\n<thead>\n<tr>\n<th>ファイル名</th>\n<th>ファイルの役割</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.gitconfig</code></td>\n<td>gitの設定</td>\n</tr>\n<tr>\n<td><code>.tmux.conf</code></td>\n<td>tmuxの設定</td>\n</tr>\n<tr>\n<td><code>.vimrc</code></td>\n<td>vimの設定</td>\n</tr>\n<tr>\n<td><code>.zshrc</code></td>\n<td>zshの設定</td>\n</tr>\n<tr>\n<td><code>README.md</code></td>\n<td>リポジトリ全体の説明</td>\n</tr>\n<tr>\n<td><code>run.sh</code></td>\n<td>dotfilesを適用するシェルスクリプト</td>\n</tr>\n</tbody>\n</table>\n<p>ここで注目するのは <code>run.sh</code> というシェルスクリプトです。\n内容の一部を抜粋すると以下のようになっています。</p>\n<pre><code class=\"hljs language-bash\"># リポジトリをダウンロードする\n# ========================================\ncd \"$HOME\"\ngit clone https://github.com/yammerjp/dotfiles-mini.git\ncd dotfiles-mini\n\n\n# シンボリックリンクを貼る\n# ========================================\nDOTFILES_DIR=`pwd`\nln -s \"$DOTFILES_DIR/.zshrc\" ~/.zshrc\nln -s \"$DOTFILES_DIR/.vimrc\" ~/.vimrc\nln -s \"$DOTFILES_DIR/.gitconfig\" ~/.gitconfig\nln -s \"$DOTFILES_DIR/.tmux.conf\" ~/.tmux.conf\n</code></pre>\n<p>GitHubからダウンロードしてくることと、設定を適用すること (シンボリックリンクを作成し <code>~/.zshrc</code> などで参照できるようにすること) を行なっています。\nこのように設定を保存・公開するだけでなく、あわせて設定を適用するスクリプトを付属させておくと便利に使えます。</p>\n<h2>複数環境にする需要</h2>\n<p>さてさて、上記のように各アプリケーションの設定を保存・公開し、適用するスクリプトも用意できたのですが、しばらくするとさらに欲が出てきてしまいます。</p>\n<ul>\n<li>複数のOSの環境 (片方がLinux、片方がmacOS) が手元にあり、それぞれの設定を管理したい <sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></li>\n<li>同じOSの複数の環境 (職場のPCと自宅のPC) が手元にあり、それぞれの設定を管理したい</li>\n<li>会社で使っている設定は公開したくないが、自宅で使っている設定は公開したい</li>\n<li>複数の環境の設定の一部を共通化したい</li>\n</ul>\n<p>このように複数の環境が存在しそれぞれ異なる設定を保持したい場合や、設定の公開範囲を制御したい場合に役立つのが、今回紹介する複数環境に適応した階層構造のdotfilesです。</p>\n<h2>階層構造の実装</h2>\n<p>公開範囲や適用環境を複数定めることができるように、以下のような構成をつくります。</p>\n<ul>\n<li>いくつかの設定ファイルを含むディレクトリを複数用意する (階層とよぶ)</li>\n<li>用意した階層の中から任意の順番で任意の個数の階層を選び、順番に適用する。</li>\n</ul>\n<p>複数の階層 (ディレクトリ) に分割することで、一部はGitHubのパブリックリポジトリに置かないという選択肢もとれますし、一部のPCでは特定の階層を適用しないという選択肢もとれます。\nまた、<code>順番に適用する</code> とあるように、各階層で設定ファイルが重複するとき、優先順位を指定することができるようにしています。</p>\n<p>具体的に私の環境は以下のようなディレクトリの階層構造になっています。</p>\n<ul>\n<li>自宅のMacbook Air\n<ul>\n<li><a href=\"https://github.com/yammerjp/dotfiles/tree/f246a47414789fb17372fe6ee44f238405d7c194/env/Darwin--arm64\"><code>Darwin--arm64</code> 階層</a></li>\n<li><a href=\"https://github.com/yammerjp/dotfiles/tree/f246a47414789fb17372fe6ee44f238405d7c194/env/Darwin\"><code>Darwin</code> 階層</a></li>\n<li><a href=\"https://github.com/yammerjp/dotfiles/tree/f246a47414789fb17372fe6ee44f238405d7c194/env/common\"><code>common</code> 階層</a></li>\n</ul>\n</li>\n<li>会社のMacbook Pro\n<ul>\n<li><code>company</code> 階層</li>\n<li><a href=\"https://github.com/yammerjp/dotfiles/tree/f246a47414789fb17372fe6ee44f238405d7c194/env/Darwin--x86_64\"><code>Darwin--x86_64</code> 階層</a></li>\n<li><a href=\"https://github.com/yammerjp/dotfiles/tree/f246a47414789fb17372fe6ee44f238405d7c194/env/Darwin\"><code>Darwin</code> 階層</a></li>\n<li><a href=\"https://github.com/yammerjp/dotfiles/tree/f246a47414789fb17372fe6ee44f238405d7c194/env/common\"><code>common</code> 階層</a></li>\n</ul>\n</li>\n</ul>\n<p>全ての環境に共通の設定を集めた最も下の階層として <code>common</code> 階層を配置しています。\nその上の階層として、macOSのみに必要な設定を <code>Darwin</code> 階層に、さらに上の階層として arm64 / x86_64 の macOS に必要な設定をそれぞれ <code>Darwin--arm64</code> 階層, <code>Darwin--x86_64</code> 階層に配置し、commonなどの下の階層の設定を一部上書きます。\n加えて最上位の階層として、会社のPCで利用している公開できない設定などを含んだ <code>company</code> 階層を配置し、これは会社のGitサーバで管理するようにしています。</p>\n<p><img src=\"https://blob.yammer.jp/layered-dotfiles.png\" alt=\"階層構造のdotfilesのイメージ図\"></p>\n<p>このような階層構造は、各設定ファイルを適用する (シンボリックリンクを貼る) スクリプトを工夫することで実現しています。\n実際に実行されるスクリプトの動作とともに紹介します。\n例えば以下のようなコマンドを実行することを考えます。</p>\n<pre><code class=\"hljs language-shell\">$ DOTFILE_DIRS=\"$HOME/src/github.com/yammerjp/dotfiles/env/Darwin--arm64:$HOME/src/github.com/yammerjp/dotfiles/env/Darwin:$HOME/src/github.com/yammerjp/dotfiles/env/common\" ./bin/dotfiles link\n</code></pre>\n<p><a href=\"https://github.com/yammerjp/dotfiles/blob/baa8cd1ecc183481ab29a402607cdc638864f6f5/bin/dotfiles\"><code>bin/dotfiles</code></a> は変数 <code>$DOTFILE_DIRS</code> に <code>:</code> で区切られたディレクトリの列が指定されることを期待します。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>\nまた指定されたディレクトリ列がそのまま、各階層のルートディレクトリとなります。なお先に記述されたものが上位の階層として扱われます。</p>\n<p>今回でいえば上位から順に3つの階層をもちます。</p>\n<ul>\n<li><code>Darwin--arm64</code> 階層 <a href=\"https://github.com/yammerjp/dotfiles/tree/baa8cd1ecc183481ab29a402607cdc638864f6f5/env/Darwin--arm64\"><code>$HOME/src/github.com/yammerjp/dotfiles/env/Darwin--arm64</code></a></li>\n<li><code>Darwin</code> 階層 <a href=\"https://github.com/yammerjp/dotfiles/tree/baa8cd1ecc183481ab29a402607cdc638864f6f5/env/Darwin\"><code>$HOME/src/github.com/yammerjp/dotfiles/env/Darwin</code></a></li>\n<li><code>common</code> 階層 <a href=\"https://github.com/yammerjp/dotfiles/tree/baa8cd1ecc183481ab29a402607cdc638864f6f5/env/common\"><code>$HOME/src/github.com/yammerjp/dotfiles/env/common</code></a></li>\n</ul>\n<p>それぞれの階層のディレクトリにあるファイルからホームディレクトリへ、シンボリックリンクが作成されます。\nこのとき、それぞれの階層のディレクトリの中で、階層の起点となるディレクトリから同名の相対パスのファイルがあれば、その中で最も上位の階層のファイルのみホームディレクトリへシンボリックリンクが貼られます。</p>\n<p>例えば各階層 (<code>Darwin--arm64</code>, <code>Darwin</code>, <code>common</code>) に <code>.zshrc</code> があるとき、最も上位の階層のものである <a href=\"https://github.com/yammerjp/dotfiles/blob/baa8cd1ecc183481ab29a402607cdc638864f6f5/env/Darwin--arm64/.zshrc\"><code>Darwin--arm64</code> 階層の <code>.zshrc</code></a> から <code>$HOME/.zshrc</code> へシンボリックリンクが貼られます。</p>\n<h2>各設定ファイルでの工夫</h2>\n<p>上述のように同名のファイルは上位階層が優先されてしまうので、設定ファイルの一部を共通化したいときは、ファイルを分割して用意することで対応しています。</p>\n<p>例えば <a href=\"https://github.com/yammerjp/dotfiles/blob/f246a47414789fb17372fe6ee44f238405d7c194/env/common/.zshrc\"><code>common</code> 階層の <code>.zshrc</code></a> は無視されてしまうので、設定の中身は同階層の <a href=\"https://github.com/yammerjp/dotfiles/blob/f246a47414789fb17372fe6ee44f238405d7c194/env/common/.zshrc-common\"><code>.zshrc-common</code></a> に切り出し、<code>.zshrc</code> ではそれを読み込むだけにします。\n同様に <code>Darwin</code> 階層では内容を <code>.zshrc-darwin</code> に、 <code>Darwin--arm64</code> 階層では内容を <code>.zshrc-darwin-arm64</code> に記述し、各 <code>.zshrc</code> は自身の階層と下位階層の <code>~/.zshrc-*</code> を読み込むだけにして、上書きされても問題ないようにしています。</p>\n<p><img src=\"https://blob.yammer.jp/layered-dotfiles-overwriting.png\" alt=\".zshrcは上書きされるので、.zshrc-*に切り出している様子のイメージ図\"></p>\n<p>このような行為は他の設定ファイルでも行なっていて、例えば <code>.gitconfig</code> にも include の仕組みがあるので、<code>.gitconfig</code> は上書きされてもいいように <a href=\"https://github.com/yammerjp/dotfiles/blob/f246a47414789fb17372fe6ee44f238405d7c194/env/common/.gitconfig-common\"><code>.gitconfig-common</code></a> に設定を書いて <a href=\"https://github.com/yammerjp/dotfiles/blob/f246a47414789fb17372fe6ee44f238405d7c194/env/common/.gitconfig\"><code>.gitconfig</code></a> はそれを読み込むだけにしています。</p>\n<h2>おわりに</h2>\n<p>こうして工夫をすることで、自宅のUbuntuでも、会社のMacbookでも、サクッと用意したEC2でもすぐに自分の環境が用意できる仕組みを作っています。\n設定ファイルだけでなく、パッケージのインストールやOSの設定の変更などのスクリプトも管理しようとしています。\nこれは生産性を向上させるためというより、それを歌いながらもdotfilesを育てていくのが楽しいだけなのですが、少しばかりは便利になっているはずです。\n今日は私のdotfilesを紹介したので、ぜひ皆さんのご自慢のdotfilesがあれば教えてください。</p>\n<p>というわけでアドベントカレンダー2日目の記事を終わりにします。\n何も考えずに「ええやろ！」という気持ちで2日目にエントリーしましたがひとまず書き終え安心しています。\n明日は<a href=\"https://twitter.com/ch11aki\">akichan</a>さんです、バトンを託します！</p>\n<hr>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>このことだけであれば、OSごとに設定が違うときは各設定ファイルの中で分岐するように記述すれば解決できるものもあるでしょう。例えば <code>~/.zshrc</code> などは if 文で分岐すれば済みます。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>実際には <code>common</code> や <code>Darwin</code>, <code>Darwin--arm64</code> といったディレクトリはデフォルトで指定されるようにしています。OS(とLinuxならディストリビューション名) とCPUのアーキテクチャから、<a href=\"https://github.com/yammerjp/dotfiles/blob/f246a47414789fb17372fe6ee44f238405d7c194/bin/link-list.sh#L37-L42\">それぞれの環境に即した3-4階層を定めています</a>。会社のGitリポジトリで管理している設定やGitHubのプライベートリポジトリで管理している設定を適用したいときに、 <code>$DOTFILE_DIR</code> などの変数にそのディレクトリのパスを与えると、デフォルトの3-4層に上位階層としてこれを加えた状態となるようにしています。階層の追加は後からでもできる (コマンドを叩けばシンボリックリンクを貼り直せる) ので、新しい環境では (そのOSとアーキテクチャに即した設定を用意していれば) <code>./bin/dotfiles link</code> とするだけでよくて、あとから必要な階層を足していくようにして運用しています。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-12-02T14:03:04+09:00","message":"Post:「複数の環境に適応する、階層構造のdotfiles」\n","hash":"ca6edf3aaef534b7a78e695b95e86408cc670645"}],"date_published":"2021-12-02T14:00:00+09:00","tags":["dotfiles","bash"]},{"id":"https://memo.yammer.jp/posts/restrict-git-master-push","url":"https://memo.yammer.jp/posts/restrict-git-master-push","title":"master push をしないために","summary":"昨日、master push をしてしまいましたので懺悔します。 私の会社の開発は、GitHub Enterprise Server上のPull Requestベースで行われており、開発した機能をPull Reqeustにしてレビューを貰ってからマージすることとなっています。 しかしながら昨日の私は、ローカルで作ったcommitをそのままリモートリポジトリのmasterブランチにpushしてしまいました。 masterにマージするだけでは本番にはデプロイされませんが、複数のチームが開発しているリポジトリであり、各方面に迷惑をおかけしました。 私がやらかした後、master pushを防ぐ術を教","content_html":"<p>昨日、master push をしてしまいましたので懺悔します。</p>\n<p>私の会社の開発は、GitHub Enterprise Server上のPull Requestベースで行われており、開発した機能をPull Reqeustにしてレビューを貰ってからマージすることとなっています。\nしかしながら昨日の私は、ローカルで作ったcommitをそのままリモートリポジトリのmasterブランチにpushしてしまいました。\nmasterにマージするだけでは本番にはデプロイされませんが、複数のチームが開発しているリポジトリであり、各方面に迷惑をおかけしました。</p>\n<p>私がやらかした後、master pushを防ぐ術を教えていただいたので、以下に記します。</p>\n<h2>GitHub上で branch protection を行う</h2>\n<p>ルールを設定し、force pushできないようにしたり、レビュー必須としたりすることで特定のブランチが不当に変更されることを防ぎます。</p>\n<p>(当該リポジトリでは masterブランチに対し branch protection は設定されていましたが、私が管理者権限を持っていたのでpushできてしまいました。)</p>\n<p><a href=\"https://docs.github.com/ja/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule\">ブランチ保護ルールを管理する - GitHub Docs</a></p>\n<h2>\"include administrators\" を有効にする</h2>\n<p>GitHubのbranch protectionの設定の中で、\"include administrators\" (管理者を含める) という項目が設定できます。\nこれにより、管理者権限を持つ人であっても、branch protectionのルールが適用されるようになります。</p>\n<p><a href=\"https://docs.github.com/ja/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#include-administrators\">保護されたブランチについて - GitHub Docs</a></p>\n<h2>ローカルのGit Hooksでmaster/mainへのpushを制限する</h2>\n<p>gitには特定の操作の前後にスクリプトを実行できるhooksという機能があります。\nhooksは、グローバルに有効なスクリプトを指定することもできるので、これを用いて以下のような設定を記述します。</p>\n<h3><code>~/.gitconfig</code> にグローバルに有効なhooksのディレクトリを指定</h3>\n<p><code>~/.gitconfig</code> に以下のように記述することで、そのコンピュータでgitコマンドを実行したとき、常に <code>~/.config/git/hooks</code> 以下のhooksが参照されるようになります。</p>\n<pre><code>[core]\n        hooksPath = ~/.config/git/hooks\n</code></pre>\n<h3><code>~/.config/git/hooks/pre-push</code> にmaster/mainブランチへのpushを禁止するよう記述 / ローカルフックを呼び出すよう記述</h3>\n<p>グローバルなhooksに指定されたディレクトリの下に、実行権限をもつ <code>~/.config/git/hooks/pre-push</code> というファイルを配置し、以下のような記述をします。</p>\n<pre><code class=\"hljs language-bash\">#!/bin/bash -e\n\nlines=\"$(cat)\"\n\n# branch protection\n# 標準入力 $lines にブランチ名などが渡される\n# $lines をもとに、master/mainブランチへのpushであれば、終了コードを1としてpushを中断\nfunction restrict_master_push() {\n  echo \"$lines\" | while read local_ref local_sha1 remote_ref remote_sha1\n  do\n    if [[ \"$remote_ref\" = \"refs/heads/master\" ]]; then\n      echo \"Do not push to master branch!!!\" 1>&#x26;2\n      exit 1\n    fi\n\n    if [[ \"${remote_ref}\" = \"refs/heads/main\" ]]; then\n      echo \"Do not push to main branch!!!\" 1>&#x26;2\n      exit 1\n    fi\n  done\n}\n\ncase \"$(git config remote.origin.url)\" in\n  # 自分しか使わないリポジトリなど、master/mainにpushしてよいものはskipするようにする\n  \"git@github.com:yammer/dotfiles.git\" )\n    echo 'skip restrict_master_push()' 1>&#x26;2\n    ;;\n  * )\n    restrict_master_push\n    ;;\nesac\n\n\n# kick local hooks\n# グローバルにgit hooksを指定してしまうと、各リポジトリのhooksは実行されない\n# そこで、このシェルスクリプト内で、各リポジトリのhooksを読み込んで実行するようにする\ngit_root=`git rev-parse --show-superproject-working-tree --show-toplevel | head -1`\nhook_name=`basename $0`\nlocal_hook=\"${git_root}/.git/hooks/${hook_name}\"\n\nif [ -e $local_hook ]; then\n  echo \"$lines\" | bash \"$local_hook\" $*\n  exit \"$?\"\nfi\n</code></pre>\n<h3><code>~/.config/git/hooks</code> 以下の他のhooksにも、ローカルフックを呼び出すよう記述</h3>\n<p>以下のファイル名の実行ファイルを作成し、スクリプトを記述します。</p>\n<ul>\n<li><code>~/.config/git/hooks/applypatch-msg</code></li>\n<li><code>~/.config/git/hooks/commit-msg</code></li>\n<li><code>~/.config/git/hooks/fsmonitor-watchman</code></li>\n<li><code>~/.config/git/hooks/post-update</code></li>\n<li><code>~/.config/git/hooks/pre-applypatch</code></li>\n<li><code>~/.config/git/hooks/pre-commit</code></li>\n<li><code>~/.config/git/hooks/pre-merge-commit</code></li>\n<li><code>~/.config/git/hooks/pre-rebase</code></li>\n<li><code>~/.config/git/hooks/pre-receive</code></li>\n<li><code>~/.config/git/hooks/prepare-commit-msg</code></li>\n<li><code>~/.config/git/hooks/push-to-checkout</code></li>\n<li><code>~/.config/git/hooks/update</code></li>\n</ul>\n<pre><code class=\"hljs language-bash\">#!/bin/bash -e\n\nlines=\"$(cat)\"\n\n# anything\n\n# kick local hooks\n# グローバルにgit hooksを指定してしまうと、各リポジトリのhooksは実行されない\n# そこで、このシェルスクリプト内で、各リポジトリのhooksを読み込んで実行するようにする\ngit_root=`git rev-parse --show-superproject-working-tree --show-toplevel | head -1`\nhook_name=`basename $0`\nlocal_hook=\"${git_root}/.git/hooks/${hook_name}\"\n\nif [ -e $local_hook ]; then\n  echo \"$lines\" | bash \"$local_hook\" $*\n  exit \"$?\"\nif\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-11-09T10:36:33+09:00","message":"Post: 「master pushしないために」\n","hash":"d9d24ca3074ce42bce687a6bce8cd5479fc69cdb"}],"date_published":"2021-11-09T10:31:00+09:00","tags":["git","GitHub","Shell"]},{"id":"https://memo.yammer.jp/posts/competing-with-unicorns","url":"https://memo.yammer.jp/posts/competing-with-unicorns","title":"ユニコーン企業のひみつを読んだ","summary":"8月も折り返し、いかがお過ごしでしょうか？8月は夏ですね。夏といえば夏休み、夏休みといえば宿題、読書感想文1。ということで読んだ本の感想を綴ります。読書メモが下書きに溜まってしまっているので消化する試みです。 書籍「ユニコーン企業のひみつ」を読みました。 本書はSpotify をはじめとするテック企業が、スタートアップのような勢いのある価値提供をどうやってスケールさせているかを説明する、ソフトウェア開発企業の組織づくりについて説明されたものです。 今年の4月に日本語訳版が発売され、私の所属する会社の社内で広く読まれているようです。 本書籍内でも言及されるSpotifyモデルと呼ばれる組織体制を","content_html":"<p>8月も折り返し、いかがお過ごしでしょうか？8月は夏ですね。夏といえば夏休み、夏休みといえば宿題、読書感想文<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>。ということで読んだ本の感想を綴ります。読書メモが下書きに溜まってしまっているので消化する試みです。</p>\n<p>書籍「ユニコーン企業のひみつ」を読みました。\n本書はSpotify をはじめとするテック企業が、スタートアップのような勢いのある価値提供をどうやってスケールさせているかを説明する、ソフトウェア開発企業の組織づくりについて説明されたものです。</p>\n<p>今年の4月に日本語訳版が発売され、私の所属する会社の社内で広く読まれているようです。\n本書籍内でも言及されるSpotifyモデルと呼ばれる組織体制を、社内でもいくつかの事業部で取り入れています。\nそういった背景から書籍内で用いられている「スクワット」「チャプター」「トライブ」といった言葉が会話に出現するので、知っていないとコミュニケーションコストが高くなってしまいもったいないと感じ、7月の4連休にガッと読みました。</p>\n<p>書籍内では次のようなことが言及されています。</p>\n<ul>\n<li>権限を持つ職能横断の小さなチーム(スクワット)によって組織を構成することで、自己組織化が進み、強力なデリバリーを届ける</li>\n<li>イテレーションを回そう</li>\n<li>スクワットが価値提供する際の障壁を、組織として排除することで、本質的な課題に注力できる</li>\n<li>今日のソフトウェア開発はマラソンであり、一朝一夕にて成立するものではない</li>\n<li>目的(ミッション)をかかげ、それに至る方法はチームが考えることが大切。スクラムをただやるだけでは開発者はチケットを消化する機械になってしまう。それでは競争に勝てない</li>\n<li>会社組織におけるこれらの事柄は文化と深い関わりがある。文化の醸成も重要</li>\n</ul>\n<p>書籍の内容を通して、マネジメントを行う立場ではない一介のジュニアエンジニアとしては、次のことがまず自分にできることに思います。</p>\n<ul>\n<li>そういた背景をもって組織づくりがされていると知る</li>\n<li>目的を見て本質的な課題解決には何が必要かを考える</li>\n<li>局所最適化しない。会社として価値提供するためには自分の仕事を限定しない</li>\n</ul>\n<p>より良いサービスを届けるために文化は維持したまま、構成やあり方を変革し続けられる柔軟な組織は魅力的ですし、そういった組織の一翼を担う人として力が発揮できるようになりたいものです。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>昔は宿題を最終日にまとめてやってやる人間で、宿題の定番である読書感想文もあまり好んでおりませんでした。そんな人間も10年したら備忘録や思考整理のために自主的に読書の感想をWebに投稿しているのだから不思議です。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-08-18T22:28:09+09:00","message":"Post: 「ユニコーン企業のひみつを読んだ」\n","hash":"20ac6fedeef46ffb01b8be3f77b7f34de6bed7ea"}],"date_published":"2021-08-18T22:28:00+09:00","tags":["本"]},{"id":"https://memo.yammer.jp/posts/english-for-apps","url":"https://memo.yammer.jp/posts/english-for-apps","title":"アプリケーションをつくる英語を読んだ","summary":"会社の先輩に教えていただいた「アプリケーションをつくる英語」を読んだ。 この本はアプリケーション開発においてUIに表示される言葉を中心に、それらを英語でどう表現すればよいかのヒントが書かれている本である。 三部構成で前半の二部は辞書的に単語や表現が紹介され、最後の一部が読み物になっている。 前半の辞書的な部分は、プログラムを書く中で命名に迷ったり、エラーメッセージを書いたりするときに役立ちそうだった。 紹介されている単語や言い回しは比較的厳選されている。 自分の表したいニュアンスの言葉が確実にあるわけではないと思うが、ソフトウェアやUIに関係する言い回しに絞って書かれている。 迷ったときには和","content_html":"<p>会社の先輩に教えていただいた「アプリケーションをつくる英語」を読んだ。</p>\n<p>この本はアプリケーション開発においてUIに表示される言葉を中心に、それらを英語でどう表現すればよいかのヒントが書かれている本である。\n三部構成で前半の二部は辞書的に単語や表現が紹介され、最後の一部が読み物になっている。</p>\n<p>前半の辞書的な部分は、プログラムを書く中で命名に迷ったり、エラーメッセージを書いたりするときに役立ちそうだった。\n紹介されている単語や言い回しは比較的厳選されている。\n自分の表したいニュアンスの言葉が確実にあるわけではないと思うが、ソフトウェアやUIに関係する言い回しに絞って書かれている。\n迷ったときには和英辞書と合わせて、本書のPDF版を検索して参照したい。</p>\n<br />\n<p>後半の読み物のなかでは、35.3.2節 キャピタリゼーション (どの文字を大文字にするか) が特に気になった。</p>\n<p>恥ずかしながら本書を読んで明確なルールを初めて知ったのだが、文頭を大文字にするセンテンススタイル (通常の文に用いられる) の他に、より大文字にする単語数が多いタイトルスタイル/ヘッドラインスタイルと呼ばれるスタイルがある。\n名前の通り本のタイトルなどに使われるスタイルで、以下のようなルールがある。</p>\n<blockquote>\n<ul>\n<li>名詞、形容詞、副詞、代名詞はキャピタリゼーションする</li>\n<li>文の最初と最後の単語はキャピタリゼーションする</li>\n<li>冠詞 (a、an、the) と接続詞 (and、butなど) はキャピタリゼーションしない。ただし文の最初と最後の場合はする</li>\n<li>4文字以内の前置詞 (at、by、for、inなど) はキャピタリゼーションしない。ただし文の最初と最後の最後の場合はする</li>\n</ul>\n</blockquote>\n<div style=\"text-align: center; width: 100%; color: #505050; font-size: 14px;\">\n(アプリケーションをつくる英語 西野竜太郎著 p262)\n</div>\n<p>たとえばPCのGUIアプリケーションであればウィンドウのタイトルやメニューバーなどにタイトルスタイルが用いられている場合もあるだろう。\n例えばREADMEの章ごとのタイトルなどにも用いられるかもしれない。</p>\n<p>UIなどにおいては完全な文を書くというシチュエーションと同じかそれ以上に単語や連文節で物事を表す機会があるだろうから、どういった規則で表せれば良いかのルールを学べたのはありがたい。</p>\n<br />\n<p>後半の読み物の部分はそれほど分量がなくすぐに読めて、前半の辞書的な部分は長く使える、ひと粒で二度美味しい本だった。\nコンピュータと戯れている限り英語とは離れられないので、もっと仲良くなっていかねばならない。</p>","_history":[{"date":"2021-07-14T23:54:41+09:00","message":"Post: 「アプリケーションをつくる英語を読んだ」\n","hash":"ba8f5194906a83871d9624e1e4e4bfd93b04e445"}],"date_published":"2021-07-14T23:54:00+09:00","tags":["本","プログラミング"]},{"id":"https://memo.yammer.jp/posts/software-is-not-ghost","url":"https://memo.yammer.jp/posts/software-is-not-ghost","title":"ソフトウェアは幽霊などではない。👻","summary":"ソフトウェアを開発していると、ときどき幽霊に出会うことがある。正確にはまるで幽霊のしわざかに思えるような謎の挙動に悩まされるときがある。 実際には幽霊などおらずコンピュータは書かれたとおりに動作しているだけで、さらに大抵は自分がプロトコルや仕様を把握していないか誤ったプログラムを書いているのだが。 https://twitter.com/yammerjp/status/1412326675157688326 複数の要因が重なっていたりして挙動の説明がすぐにはつかないとき、原因を追求するためにだいたい次のようなことをする。 原因を考える (現状を整理する、アタリをつける) 挙動を確認するためにプ","content_html":"<p>ソフトウェアを開発していると、ときどき幽霊に出会うことがある。正確にはまるで幽霊のしわざかに思えるような謎の挙動に悩まされるときがある。</p>\n<p>実際には幽霊などおらずコンピュータは書かれたとおりに動作しているだけで、さらに大抵は自分がプロトコルや仕様を把握していないか誤ったプログラムを書いているのだが。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">幽霊</p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1412326675157688326?ref_src=twsrc%5Etfw\">July 6, 2021</a></blockquote></p>\n<div style=\"text-align: center; width: 100%; color: #505050; font-size: 14px;\">\n  これは私がOAuth2.0の仕様を把握していなかったが故に謎と思った挙動になやまされたとき。\n</div>\n<p>複数の要因が重なっていたりして挙動の説明がすぐにはつかないとき、原因を追求するためにだいたい次のようなことをする。</p>\n<ol>\n<li>原因を考える (現状を整理する、アタリをつける)</li>\n<li>挙動を確認するためにプログラムを実行する (手を動かす)</li>\n<li>仕様やドキュメント等を調べる</li>\n<li>人に聞く</li>\n</ol>\n<p>ここでは特に1つめの原因を考える事と2つめの手を動かす事について注目する。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>\nこれらは、手を動かさないとわからない事を考えても意味は無いし、逆に無鉄砲に手を動かしても意味はない。現状を整理すること、アタリをつけること、手を動かしてみること、これらを組み合わせてやっていく必要がある。</p>\n<p>しかしながら特に昨日の私は原因を考えることと手を動かすことの比率が悪かった。またそもそも、目下の謎な挙動に対峙するとき、あまり自分の行動を分解して自らで認識せず全部一緒くたにしてやっているところがある。それですぐ解決できれば良いが、深みにハマったときに困る。</p>\n<p>二分探索的に考えていた筈が条件に漏れがあったり、試せばすぐにわかったことを最後まで放置していたりする <sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup> のはこういったところに原因があるかもしれないと思っていて、だとすると改善の余地がある。</p>\n<p>そこで、次に対峙するときは今整理してアタリをつけるべきなのか、情報が足りないから手を動かすべきなのか、自分の現状を認識して意識的に切り替えることを試してみたい。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>\nそのとき脳内で私が発すべき言葉は「現状を整理したいのか？新たな情報を得たいのか？ (=手を動かすべきか) 」という二択の自らへの問いかけである。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>3 のドキュメントを調べるという行為についても英語の仕様書をさくっとしっかり理解できるようにするだとかライブラリのコードを読み込むといった部分ががまだまだだし、4の人に聞くという行為も業務の中で最適なタイミングを逃していたり状況を整理して伝えるのが下手で時間がかかったりと、結局全部未熟なので粛々とやっていくしかない。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>解決したあとだからそう思うだけかもしれないが。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>実際には脳の力をそんなところに使う余裕はないのかもしれない。一方で業務でエンジニアリングに取り組むなら、時間的な見積もりをすべきである点と、再現可能な手法で行動して成果をあげるために自分の状態を認識するのは大切だろう点から、無心に対峙するのではなく上記の方法を試してみるべきだと感じた。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2021-07-07T09:20:45+09:00","message":"Post: 「ソフトウェアは幽霊などではない。👻」\n","hash":"f7a57a8bc24b1b0a8e87f73d299451e05baf2804"}],"date_published":"2021-07-07T09:15:00+09:00","tags":["プログラミング"]},{"id":"https://memo.yammer.jp/posts/20210624","url":"https://memo.yammer.jp/posts/20210624","title":"初出社、ワクチン接種","summary":"日記です。雑多なトピックが以下に続きます。 4月に入社した会社に、今日はじめて出社しました。 新型コロナウィルスのワクチン接種が主な理由で、くわえて同期をはじめとして何人かに出会うなどしました。 今日の主なイベントであるワクチン接種ですが、大変スムーズで拍子抜けしました。 受付をして打つのは一瞬、15分経過観察しておわり。 職域接種のためいわゆるモデルナ筋注といわれるものを打って今は9時間ほど、腕が重いですね。 社の方々と会うのはちょっと緊張。 人との接触は抑える必要もあるのであまりたくさん会話できるわけでもなく、会えていない人もたくさんいて、それらは未来の機会に託しました。 新型コロナウィル","content_html":"<p>日記です。雑多なトピックが以下に続きます。</p>\n<p>4月に入社した会社に、今日はじめて出社しました。\n新型コロナウィルスのワクチン接種が主な理由で、くわえて同期をはじめとして何人かに出会うなどしました。</p>\n<p>今日の主なイベントであるワクチン接種ですが、大変スムーズで拍子抜けしました。\n受付をして打つのは一瞬、15分経過観察しておわり。\n職域接種のためいわゆるモデルナ筋注といわれるものを打って今は9時間ほど、腕が重いですね。</p>\n<p>社の方々と会うのはちょっと緊張。\n人との接触は抑える必要もあるのであまりたくさん会話できるわけでもなく、会えていない人もたくさんいて、それらは未来の機会に託しました。\n新型コロナウィルスが一日でも早く収束することを願います。</p>\n<p>初出社してみたものの、持っていく荷物がまだあんまりまとまっていないですね。\nバッグが重く、荷物も取り出しづらく、もうちょっと減らしたいです。\n16インチMacBookは家で使うには最高なんだがなあ。</p>\n<hr>\n<p>今日を経て、出社は大変だなという気持ちとともにリモートワーク環境の有り難さを改めて感じます。\n出社を前提にしていない場所に住んでることもあり、会社までは2時間弱かかります。\n通勤ラッシュを避けれたものの人出は多く、ちょっとこれが毎日は厳しい気がします。</p>\n<p>最近、社会人になって最初の仕事がリモートワークでは社会人としての能力が身につかないという話をいただきました。\n私は社会人をまだ2ヶ月しか経験していないので社会人としての能力が何を指すのかも、リモートワークしか経験していないのでその真偽も、毎日の出社に使うエネルギーやコストが有用でそれだけの価値のあるものかどうかもわかりません。</p>\n<p>ただしリモートワークは、コミュニケーションの工夫や自己管理が求められる反面、出社しないことで体力的/時間的な余裕はきっと大きいでしょうから、それを有効に生かしていかねばという思いです。</p>\n<p>そんなこんなで会社に行った報告です。\n次の出社もワクチン接種でしょうか。\nその頃には梅雨が明けていますかね。</p>","_history":[{"date":"2021-06-24T23:26:20+09:00","message":"Update: 表現の修正\n","hash":"09ce0b2d5b3f1a89c344d18d7924b7fd18ecf978"},{"date":"2021-06-24T23:19:31+09:00","message":"Post: 「初出社、ワクチン接種」\n","hash":"72e42dd9b4f3a095371d5b01c77d48b81fdfee6f"}],"date_published":"2021-06-24T23:19:00+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/curldoc-development","url":"https://memo.yammer.jp/posts/curldoc-development","title":"curldocというWeb APIの仕様書形式 兼 モックサーバを作っている","summary":"こんにちは。最近は会社の技術研修を粛々と受けています。 6月に入ってからはRailsチュートリアルを進めていて、ちょうど先週に終わりました。Railsは大変多機能であるとヒシヒシ感じています。 Ruby自体も今まで書いたことがなかったので、私の経験のある言語とは結構毛色が違っていて面白い気分です。 残業も特になく給料をいただきながら勉強している謎の身分ですが、権利をありがたく享受してスーパーエンジニアに成長したいと思います。 そんなこんなとは別で、趣味で最近作り始めたのがcurldocというツールです。 curldoc curldocのcurlはコマンドのcurlから来ています。 平たく言うと","content_html":"<p>こんにちは。最近は会社の技術研修を粛々と受けています。\n6月に入ってからはRailsチュートリアルを進めていて、ちょうど先週に終わりました。Railsは大変多機能であるとヒシヒシ感じています。\nRuby自体も今まで書いたことがなかったので、私の経験のある言語とは結構毛色が違っていて面白い気分です。\n残業も特になく給料をいただきながら勉強している謎の身分ですが、権利をありがたく享受してスーパーエンジニアに成長したいと思います。</p>\n<p>そんなこんなとは別で、趣味で最近作り始めたのがcurldocというツールです。</p>\n<h2><a href=\"https://github.com/yammerjp/curldoc.git\">curldoc</a></h2>\n<p>curldocのcurlはコマンドの<a href=\"https://curl.se\">curl</a>から来ています。\n平たく言うと、curlコマンドとそのレスポンスを記述したMarkdownファイルを読み込んで立ち上がるモックサーバを作っています。</p>\n<p>そもそもcurlはHTTPリクエスト<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>を送ることができるコマンドですが、実はこれ、ただ単なるコマンドだけでなく、HTTPリクエストを表す汎用的なフォーマットなのではないかと思っています。\nPostmanやChrome開発者ツールにも、送信したリクエストをcurl形式で書き出す機能があったりします。</p>\n<h2>curldocの仕様書の形式</h2>\n<p>これをもとに、curlコマンドとその実行結果を書いたら簡易的なAPI仕様書になります。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>\n例えば次のような、リクエストとレスポンスのペアをひたすらMarkdownファイルに記述します。</p>\n<pre><code class=\"hljs language-markdown\">\n\nリクエストを以下に記す。\n\n```curldoc-request\ncurl http://localhost:3000/hello --header 'Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l'\n```\n\nレスポンスを以下に記す。\n\n```curldoc-response\n{\n    \"message\": \"hello\"\n}\n```\n\n</code></pre>\n<p>この形式のよいところは2つあります。</p>\n<h3>シンプル</h3>\n<p>１つ目はシンプルであることです。\ncurlコマンドは前述のようにGUIアプリケーションから書き出せるし、広く普及しているフォーマットでもあります。</p>\n<p>APIドキュメントを記述する形式としては例えばSwaggerなどが既にあります。\n大変良くできたツールであると思いますが、どうしても記法を学んだり、対応するツールがある言語やフレームワークの上でしか使えなかったりと、場合によっては多機能すぎることもあるでしょう。\n小さなアプリケーションを作る場合やハッカソンで素早く作る場合、社内向けツールでドキュメント整備の優先順位が低い場合など、APIの仕様を簡単にテキストにまとめるほうが良い場合もあるのではないでしょうか。\ncurldocはまさにそれです。\nなるべく知識を必要とせず、簡単に、しかし齟齬無く最低限の要求を満たすAPIドキュメントの形式がcurldocです。</p>\n<p>シンプルであるからこそ、JSONだろうがXMLだろうがHTMLだろうがHTTPであれば自由に記述できます。</p>\n<h3>実行可能</h3>\n<p>2つ目は実行可能であることです。\ncurlコマンドは本来はコマンドですから実行可能です。\nシェルに貼り付けてエンターを押せば試せます。\nHTTPサーバを開発してデバッグする時、テストする時、既に開発されたものを使ってみるとき、コピペしてエンターを押すだけで試せるなんてなんと素晴らしい仕様書でしょうか。</p>\n<h2>片手落ちの「実行可能」の片手を作る</h2>\n<p>ここまでは単に「curlコマンドの形式でドキュメントを記述すると楽だよ」という話でした。\nしかし、2つ目の実行可能であるという点は片手落ちです。\nもともとAPI仕様書はクライアント側とサーバ側で認識を合わせるため、双方のためにあります。\nしかしながらcurlコマンドはクライアントなので、実行可能であるのは片方の立場だけです。\nサーバを開発する人はcurlコマンドで確認できますが、クライアントを開発する人は実際のサーバができあがるまで実行できません。</p>\n<p>そこで出現するのがcurldocです。\ncurldocはAPI仕様の書かれたMarkdwonファイルを元にモックサーバを立ち上げます。\nMarkdownファイルに書かれたものと同様のリクエストが来たら、対応するレスポンスを返すだけのモックサーバです。\ncurldocというアプリケーションによって、上記の形式のAPI仕様書が、クライアントサイドにとってもサーバサイドにとっても実行可能になることでしょう。</p>\n<p>モックサーバなので、開発にもテストにも用いることができるはずです。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup><sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup></p>\n<h2>これから</h2>\n<p>まだ作りかけのアプリケーションについて雄弁に語ってしまいました。\n現状でも一応ベーシックな機能としては動いていて、Markdownファイル上でHTTPのヘッダやボディを指定すると比較してくれたりします。\nとはいえやりたいことは以下のようにまだまだあります。</p>\n<ul>\n<li>JSON形式のリクエストボディの比較を柔軟に行う</li>\n<li>指定されなかったHTTPレスポンスヘッダをよしなに埋める</li>\n<li>ライブラリとして提供できるインタフェースを追加する</li>\n<li>ドキュメントを書く</li>\n<li>npm publishする</li>\n<li>curlオプションのサポートを増やす</li>\n</ul>\n<p>頑張って作るぞ。</p>\n<p><a href=\"https://github.com/yammerjp/curldoc.git\">https://github.com/yammerjp/curldoc.git</a></p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>curlはHTTPに限らず様々なプロトコルをサポートしているようです。なんでも出来すぎてびっくりするくらい。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>もともと5月末にハッカソン的にWebアプリケーション開発をやったときの感想から生まれたアイデアのツールです。サーバサイドとフロントエンドを別の人間が開発するとき、APIの認識をさくっとあわせるにはcurlコマンドによるリクエスト例を記述していく方法が結構はかどりました。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>モックサーバを必要とするのはクライントアプリケーションだろう。→クライアントアプリケーションといえば特にWebではJavaScriptだろう。→ JavaScriptのテストで用いるならJavaScriptから起動できたほうが良いよねということでNode.jsで作っています。コマンドだけでなくライブラリとして提供したいと思っています。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>別に作っているAtomPubのクライアントのテストが結構汚くて、JSONではないAPIクライアントのモックサーバが欲しくて作っている側面もあります。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-06-21T09:40:24+09:00","message":"Post: 「curldocというWeb APIの仕様書形式 兼 モックサーバを作っている」\n","hash":"5c1e1eb6ee8e6f4efe27e587a78d4317530eb2ab"}],"date_published":"2021-06-21T09:40:00+09:00","tags":["JavaScript","TypeScript","curl","HTTP"]},{"id":"https://memo.yammer.jp/posts/pepabo-11th-training","url":"https://memo.yammer.jp/posts/pepabo-11th-training","title":"リモートワークの馴染む、4月の新卒研修 (GMOペパボ)","summary":"2021年4月1日にGMOペパボ株式会社 (以下ペパボ) に入社しました。 これからソフトウェアエンジニアとして成長し活躍することを夢見てやる気に満ち溢れています。 その第一歩として4月9日から4月30日までの約3週間、全職種で取り組むペパボの新卒研修に参加したので感想を記します1。 ええ、それはその、大変楽しい研修期間でした。 リモートワークでうまくやる ペパボは2020年6月にリモートワークを基本とした働き方に移行し、今年の研修は全てオンラインで実施されました。 私自身、入社後にまだ一度も出社していません。 リモートワークの環境で新卒入社することに少なからず不安はありました。 大学のときは","content_html":"<p>2021年4月1日にGMOペパボ株式会社 (以下ペパボ) に入社しました。</p>\n<p>これからソフトウェアエンジニアとして成長し活躍することを夢見てやる気に満ち溢れています。\nその第一歩として4月9日から4月30日までの約3週間、全職種で取り組むペパボの新卒研修に参加したので感想を記します<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>。\nええ、それはその、大変楽しい研修期間でした。</p>\n<p><img src=\"https://blob.yammer.jp/pepabo-11th-training-ogp.png\" alt=\"新卒メンバー全員のイラスト\"></p>\n<div style=\"text-align: center; width: 100%; color: #505050; font-size: 14px;\">\nCS研修でお世話になった<a href=\"https://twitter.com/_wtmy\">ワタミユ</a>さんが書いてくださった新卒の我々のイラスト\n</div>\n<h2>リモートワークでうまくやる</h2>\n<p>ペパボは2020年6月にリモートワークを基本とした働き方に移行し、今年の研修は全てオンラインで実施されました。\n私自身、入社後にまだ一度も出社していません。</p>\n<p>リモートワークの環境で新卒入社することに少なからず不安はありました。\n大学のときはオンラインによるコミュニケーションのとりにくさや物理的な距離感を強く感じることも多かったからです。</p>\n<p>しかしながらその些細な不安は全くの杞憂で、リモートワークを前提として、それを当たり前のものとして過ごしていました。\nただただ、たった一本のイーサネットケーブルを介してよくもこれだけの情報や感情をやりとりできるものだと驚きを感じています。</p>\n<h2>情報がオープンであること</h2>\n<p>リモートワークでうまくやれている理由の一つとして社内の情報がオープンであることが挙げられます。\n<a href=\"https://tech.pepabo.com/2021/03/18/documentation-in-pepabo/\">社内規定や手続・制度の情報にアクセスしやすい</a> だけでなく、サービスに関する情報 (お客様の個人情報などは除く)、はたまた<a href=\"https://hr.pepabo.com/column/2020/02/07/3330\">人事評価資料</a>までもが社内でひろく公開されています。</p>\n<p>オンラインで活動する上で情報の非対称性は非常につらくて、大学時代に研究室で「昔の研究に関する情報が必要だったら声をかけて」と言われていたがそもそもどんな情報があるのかがわからない.. といった経験をした身からすると、入社後にすぐに様々な情報にアクセスでき会社のことをよく知れることはリモートワークでの安心感を生みました。</p>\n<h2>Slackの流れる早さ</h2>\n<p>物理的なオフィスに出社していない私は、Slackに出社していると言っても過言ではないでしょう。\nSlackでの会話が活発で円滑であるからこそ、オンラインでも距離感を感じずにコミュニケーションをとることができます。</p>\n<p><img src=\"https://blob.yammer.jp/pepabo-11th-training-morning.png\" alt=\"出社に相当するSlackのメッセージ\"></p>\n<div style=\"text-align: center; width: 100%; color: #505050; font-size: 14px;\">\n出社の様子\n</div>\n<p>研修についてもSlackをフルに活用しています。\n講義をきく機会も多かったのですが、そういったときに講義の解釈を話しあったり、他の人が知る関連情報を得られたり、些細な疑問を話してみたりといった会話が生まれます。\n同期の<a href=\"https://twitter.com/yagijinjin\">やぎじん</a>の言葉を借りるとまさに「<strong>隣の人と話しながら講義を受けることができる、新しい研修のかたち</strong>」でした。</p>\n<p>講義を担当されたパートナー<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>の方にも「リアクションがあるので話しやすい」と言っていただけたし、ただ聞いてメモをするより話も広がり講義を振り返る補足資料にもなり、加えて記憶の定着も良いように感じ、楽しいだけでなく大変有意義な時間でした。\nオンラインだからこそできた研修であったように思います。</p>\n<p><img src=\"https://blob.yammer.jp/pepabo-11th-training-res.jpg\" alt=\"講義中にたくさんのコメントが付き、返信件数が1時間で100件を超えているSlackのスクリーンショット\"></p>\n<div style=\"text-align: center; width: 100%; color: #505050; font-size: 14px;\">\n1時間程の講義でどんどん流れるSlack\n</div>\n<h2>意識していたこと</h2>\n<p>リモートワークの環境において、新卒として入社した自分もうまくやるために「自分の感情・状況を相手に伝える」ことを意識していました。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup></p>\n<p>例えばMeetやZoomでは伝わりづらいので大きく🙆‍♂️と意思表示するなどジェスチャーしたり。\n日報では自分の感情を正直に書くことも、困っていることや疑問があったら自発的にSlackに書き込むこともその一つです。\n発言しやすいように複数のチャネルを使いこなす意味で、Slackの個人用パブリックチャンネルを作ってみたりもしました。\nほかには<a href=\"https://note.com/ayanck/n/n976ecaf220c4\">背景で遊んだ</a>のも新卒11期生のパートナーの方々と仲良くなりたい気持ちだったと思います。</p>\n<p>オンラインではどうしても些細な気持ちの変化は伝わりづらいし一対一でコミュニケーションをする機会も減ってしまいます。\nだからこそ自己開示が必要であると思うし、より自分から状況や感情を伝える必要があります。</p>\n<p>新卒研修においてオンラインでのコミュニケーションが円滑に進んだのはきっと、入社前から培われたペパボの文化と既に日常となっていたリモートワークの土壌があったからでしょう。\nリモートワークには様々なツールの活用や制度の整備ももちろんですが、個々人がオンラインに即したコミュニケーション方法や振る舞いに適応していくことがとても大切であると感じました。</p>\n<p>オンラインに即したコミュニケーションはきっと社内でたくさんの人が実践していることではないかと思います。\n他の人や同期を見て学び、真似て、上記のような意識していたことに繋がりました。</p>\n<h2>まとめ</h2>\n<p>とても楽しく充実した一ヶ月でした。\n研修の中で新しく学んで吸収すること、業務の難しさとそれに取り組まれるパートナーの方々の凄さを知ることなど、多面的な切り口からの研修を通して、目的とされていた「ペパボで働く土台をつくる」は達成されたと思います。<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup></p>\n<p>入社を歓迎してくださったパートナーの皆さん、研修を企画・実施してくださったパートナーの皆さん、一緒に盛り上げてくれた同期の仲間、本当にありがとうございました。</p>\n<p>一ヶ月働いた実感として、ペパボの人々はとてもおもしろくて親切であるし、サービスを使う意味でも働く意味でもおすすめできる会社です。</p>\n<p>技術研修は5月以降も続きます。\nサービスを、ペパボを、世の中をもっとおもしろくできるよう<sup><a href=\"#user-content-fn-5\" id=\"user-content-fnref-5\" data-footnote-ref aria-describedby=\"footnote-label\">5</a></sup>、まずは目の前の研修に一つ一つ取り組んでいきます。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>記事内であまり触れていない研修内容については他の人が書いたブログが参考になります。「<a href=\"https://note.com/asuka_okochi_131/n/na15e6e7dbcde\">🌸【21卒】ペパボでの新卒研修を終えて🌸｜きなこ｜note</a>」 や 「<a href=\"https://zuruzurura.men/blog/2021-05-10-%E7%A4%BE%E5%86%85%E7%A0%94%E4%BF%AE%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/\">社内研修振り返り | zuruzurura.men</a>」 など。 その他にも子育てと新卒研修に触れたブログ記事「<a href=\"https://note.com/rimomonga/n/n1fb576224805\">子育て新卒、ペパボで働き始めて1ヶ月｜うえだり｜note</a>」も読み応えがあります。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>ペパボでは働く仲間のことをパートナーと呼びます。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>入社前にも教えていただき、新卒研修の中でも触れられていたブログ記事 (<a href=\"https://diary.shu-cream.net/2020/07/06/01.html\">自分の気持ちを正しく表現する | けんちゃんくんさんのWeb日記</a>)がもとになっています。新卒の私が正直な感情を伝えるとそれを受け止めてくださるパートナーの方々がいることは本当にありがたいことです。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>各研修内容のそれぞれに目的や目標が設定され何のために研修に参加するかが明確であったこと、定期的に時間を設けて振り返ることなど、研修を有意義なものにするための工夫が随所に凝らされていたと振り返りながら感じました。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-5\">\n<p>「もっとおもしろくできる」は<a href=\"https://pepabo.com/company/vision/\">ペパボの企業理念</a>)です。 <a href=\"#user-content-fnref-5\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2022-03-31T02:02:16+09:00","message":"Fix: リンク切れの修正 blog.yagijin.com -> zuruzurura.men\n","hash":"181be8702b8a146d889681f1b10cc75a6a467d8b"},{"date":"2021-05-11T22:38:26+09:00","message":"リモートワークの馴染む、4月の新卒研修 (GMOペパボ)\n","hash":"3422910d9ffdb505877da5d3e67d2bc37766b36b"},{"date":"2021-05-10T14:49:20+09:00","message":"[WIP] Add: URLを確保\n","hash":"4c9f6228e67fa9d22c22bd4dfe2bad1fa0f43576"}],"date_published":"2021-05-11T22:38:00+09:00","tags":["ペパボ","新卒研修","リモートワーク","日記"]},{"id":"https://memo.yammer.jp/posts/blog-with-nextjs","url":"https://memo.yammer.jp/posts/blog-with-nextjs","title":"ブログをNext.jsに置き換える","summary":"ゴールデンウィーク明けの平日、いかがお過ごしだろうか。 私の場合は新卒研修のブログ記事を書こうと思ったものの、その記事を投稿するためのブログを弄っているうちにゴールデンウィークが終わってしまった。 そんなわけでここ数日は、「そろそろちゃんと触るか〜」と思っていたNext.jsを使ってこのブログを作り変えていた。 見た目は似ているけど中身はイチから作ったので別物である。1 機能追加をしたいことがあったりしたので前々からJavaScriptのフレームワークに載せ替えたいと思っていて、やっと腰が上がった次第。2 本当は1,2日でサクッと終わらせてしまってブログ投稿用のエディタを作ろうと思っていたのだ","content_html":"<p>ゴールデンウィーク明けの平日、いかがお過ごしだろうか。\n私の場合は新卒研修のブログ記事を書こうと思ったものの、その記事を投稿するためのブログを弄っているうちにゴールデンウィークが終わってしまった。</p>\n<p>そんなわけでここ数日は、「そろそろちゃんと触るか〜」と思っていたNext.jsを使ってこのブログを作り変えていた。\n見た目は似ているけど中身はイチから作ったので別物である。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>機能追加をしたいことがあったりしたので前々からJavaScriptのフレームワークに載せ替えたいと思っていて、やっと腰が上がった次第。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>\n本当は1,2日でサクッと終わらせてしまってブログ投稿用のエディタを作ろうと思っていたのだけど全然思うようには進まず、結局閲覧画面だけ作って終わった。</p>\n<p>以下にここ数日の感想をいくつかの話題に分けて記す。</p>\n<h3>ブログのデザイン</h3>\n<p>デザインは変わっていないようで細かいところが少し変化したり、機能追加されていたりする。\nつくりながら他のブログを眺めるなどして、見やすそうな部分を参考にしたりした。</p>\n<p>具体的には例えば、記事ページ末尾にある隣の記事へのリンクについて。\nよくこういったリンクは next / prev とやってしまいがちだけれど、どっちが古い投稿へのリンクでどっちが新しい投稿へのリンクかわからなくなったりするので、「古い記事」「新しい記事」と書いてあるのをみて「良いな」と思ったので真似た。</p>\n<p><img src=\"https://blob.yammer.jp/blog-with-nextjs-neighbor-articles-link.png\" alt=\"記事ページ末尾の隣の記事へのリンクの新旧比較\"></p>\n<p>ブログのデザインといえば、完成の見た目が定まっていなかったので結構作っては壊してを繰り返していたのは効率が悪かったのかもしれない。\n例えば記事一覧ページは記事ごとにカバー画像を表示するように作ってみたあと、やっぱりみづらそうで止めた。\nfigmaなどを使って事前にどんなものを定めるなど、そういうのをやったほうがよかったかもなあ。\n(やったことない。)</p>\n<h3>remarkがよき</h3>\n<p>Hugoから置き換えた理由の一つに、Markdownのパースを改造できるようにしたかったからというモチベーションが有った。\n今回使ったMarkdownパーサのremarkがよく出来ていて、プラグインを追加するとパース時の機能や記法を追加できる。\n既によくあるMarkdown記法は既存のプラグインで対応できるし、新たな記法を追加するときはプラグインを作ってMarkdownやHTMLのASTに介入できるようで夢が広がる。</p>\n<p>本当はここらへんを重点的に開発して記事の執筆時に使える記法や記事の出力時の見た目をもっとリッチにしたかったのだけど、Next.jsでブログを作る時点で時間切れになってしまった。</p>\n<h3>Next.jsのよさ</h3>\n<p>Nuxt.jsみたいにフォルダ構成をはじめとした規約が定まっていて、秩序を感じるのはよい。</p>\n<p>簡単なAPIが書けるのもよい。Vercelを使えば一緒にデプロイもできそうで、ここらへんは開発元がホスティングサービスをやっている強みだなと感じた。</p>\n<p>getStaticPropsとかgetServerSideProps、getStaticPathsとかの関数があるのもよくて、何処に何を書けば良いのか、いつ何処で実行されるのかがわかりやすいのが良い。\nNuxt.jsではここらへんどうなってたっけ？configでSPAかSSRかSSGか選べたのは覚えているんだけど...</p>\n<h3>ReactとJSXの記法への小言</h3>\n<p>Reactに触ったのも久しぶりで、JSXと後述するCSS-moduleに一言ずつ。</p>\n<p>JSXを久々に書いたがちょっと書きづらい。\n特にDOMを条件分岐したいとき、その部分のJSXElementは変数に入れるのが良いのか最後のReturn文に埋め込むのが良いのか迷うなどした。\n埋め込むとしたら即時実行関数の中でifを書くか三項演算子を使うかだと思うけど、どちらも記号だらけであんまり見やすい表記じゃなさそうと思った。\nVue.jsのv-ifとかのほうがみやすさを感じる。</p>\n<p>Vue.jsの独自記法を覚えなくていいといえばそうだけど、その意味で言えばVue.js/Nuxt.jsはJSX覚えなくていいからな。\n(逆にJSXElementを繰り返すときは配列をmapできるのでスッキリ書けて気持ちいい。)\n記法は慣れの要素が多分に含まれるので、小言を言っても仕方ないね。</p>\n<h3>CSS-moduleはつらくないか？</h3>\n<p>前項のJSX記法は好みの問題と思うが、一方でCSSの適用方法については根が深い。\nもともとReact/Next.jsでコンポーネントにCSSを適用するならCSS-moduleかCSS in JS (Styled components)の2種類の方法から選ぶらしい。\n特にNext.jsはパフォーマンスの理由でCSS-moduleを推してるのだけどこれがあんまり良いと思えなかった。\n一般的なCSSはセレクタを使って適用する要素を決めるが、CSS-moduleはCSSのスタイルの集合(<code>{</code>から<code>}</code>まで)を、HTML要素で指定して指し示すような形になる。</p>\n<p>CSSが多重に適用されることはなくなるのでシンプルになるけれど、一方で宣言的に書けていたCSSの良さを殺しているのでは？と感じた。\nあとメディアクエリが使えない/使いづらかったり、するのも気になった。\n結局移行前のものを活かすという意味もあって、CSS-moduleもCSS in JSも使わずに1枚のCSSにすべてを書き込んで作っていて、途中でCSS-moduleで分割するかとなったのだけど上述のつらみを感じて止めてしまった。</p>\n<p>今回の開発を通して改めてVue.jsのシングルファイルコンポーネント好きだなあと感じた。</p>\n<p>---</p>\n<p>そんなこんなで予定がなくなってずっと家にいたゴールデンウィークだけれどコンピュータと仲良くなろうと遊んでいたのでよき休日だった。</p>\n<p>このブログへの機能追加はまだまだやりたいことだらけですが、もし見づらい、バグってる、勘違いしたなどあったらフィードバックをくださると喜びます。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>前はHugoのテーマに手を入れたものをNetlifyでホストしていたけど、今回はNext.jsとTypeScriptで作ったサイトをSSGしてVercelにホストしている。 どちらも記事はGitHub上にMarkdownで保存している。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>先月と先々月に作っていたバージョン管理システムのarcivは、とりあえず動くけどなんか動作が遅いよなという状態で放置されている... そっちはどうしようか... <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-07T22:09:42+09:00","message":"Post: 「ブログをNext.jsに置き換える」\n","hash":"89a4fee32cb15873c56338636f2d4cfb3ea4a31b"}],"date_published":"2021-05-07T22:07:57+09:00","tags":["Next.js","JavaScript","TypeScript","ブログ"]},{"id":"https://memo.yammer.jp/posts/tokeru-design","url":"https://memo.yammer.jp/posts/tokeru-design","title":"融けるデザインを読んだ","summary":"このまえ教えてもらった本、「融けるデザイン ―ハード×ソフト×ネット時代の新たな設計論」(著: 渡邊恵太) を読んだ。 以下はその解釈と感想である。 融けるデザイン ―ハード×ソフト×ネット時代の新たな設計論 | 渡邊恵太 |本 | 通販 | Amazon 本書では「自己帰属感」という言葉を通して良いインターフェイスとはどのようなものかを述べている。 自分の与えた動作に伴ってリアルタイムに反応があると自己帰属感が生まれ、自己帰属感が高まると身体が拡張したかのように思いのままに操作できるようになる。 例えばキーボードは、慣れるまではひどく使いにくいが、慣れてしまえば文字を打つときに自然と手が動き","content_html":"<p>このまえ教えてもらった本、「融けるデザイン ―ハード×ソフト×ネット時代の新たな設計論」(著: 渡邊恵太) を読んだ。\n以下はその解釈と感想である。</p>\n<p><a href=\"https://www.amazon.co.jp/%E8%9E%8D%E3%81%91%E3%82%8B%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-%E2%80%95%E3%83%8F%E3%83%BC%E3%83%89%C3%97%E3%82%BD%E3%83%95%E3%83%88%C3%97%E3%83%8D%E3%83%83%E3%83%88%E6%99%82%E4%BB%A3%E3%81%AE%E6%96%B0%E3%81%9F%E3%81%AA%E8%A8%AD%E8%A8%88%E8%AB%96-%E6%B8%A1%E9%82%8A%E6%81%B5%E5%A4%AA/dp/4861009383/ref=as_li_ss_tl?_encoding=UTF8&#x26;qid=&#x26;sr=&#x26;linkCode=sl1&#x26;tag=niche-22&#x26;linkId=65214e156cf3fb0219ea72f5cc293b7a&#x26;language=ja_JP\">融けるデザイン ―ハード×ソフト×ネット時代の新たな設計論 | 渡邊恵太 |本 | 通販 | Amazon</a></p>\n<p>本書では「自己帰属感」という言葉を通して良いインターフェイスとはどのようなものかを述べている。\n自分の与えた動作に伴ってリアルタイムに反応があると自己帰属感が生まれ、自己帰属感が高まると<strong>身体が拡張したかのように思いのままに操作できる</strong>ようになる。</p>\n<p>例えばキーボードは、慣れるまではひどく使いにくいが、慣れてしまえば文字を打つときに自然と手が動き自分の身体の延長のように扱える入力機器だと思う。\n車だって自分で運転することに慣れてくれば車体感覚が身につき狭い道路でもなんとなく車を端に寄せたりできるようになる。\nキーボードも車も、手で握るハンマー等よりよっぽど複雑な道具だけれど、慣れてしまえばそこそこの自己帰属感を得られるようになる。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>こういった自己帰属感の有無には<strong>自分が与える動作に対する遅延ない応答</strong>が必要なようだ。\n一方、動作の方向や方法は、慣れが要求できる範囲においては遅延ない応答ほどは重要度が高くなさそうに思う。\nたとえば車のアクセルもブレーキもペダルを踏む動作だが加速と減速という正反対のものを扱うし、キーボードもボタンを押下することで抽象的な概念である文字の入力を行う。</p>\n<p>本書を読んだうえで、じゃあ<strong>自分がソフトウェア開発 (特にWeb開発) を行うときにどう活かせるか</strong>というと結構難しい。\n本書ではどうやって作るかやGUIにおいて何が良いのかを具体的に示しているわけではなくもっと抽象度の高い話をしている。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<p>その中で\"遅延\"がユーザに与える自己帰属感の低下はWeb開発でもイメージしやすいものだろう。\nたとえば遅延ない応答の具体的な例といえば、いいねボタンを押したときに押した瞬間に表示を変更しサーバへのリクエストは裏で送るといった実装がその１つかもしれない。</p>\n<p>そういったユーザとのインタラクションにおいて遅延がいかにユーザに自分の思い通りに操作する感覚を失わせるかを知ることができた。\n開発者からすると微々たる違いであるのにユーザには大きな違いとして現れることは意識して開発するとよいだろうと感じた。</p>\n<p>本書を読んだ解釈が「全然ちげえぞ！」と思ったら教えて下さい。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>もちろん慣れが必要ないに越したことはない。しかしながらキーボードも車も、ユーザ体験が優れている設計かは別として、世界的に共通のインタフェースを備えているのは一定の自己帰属感が感じられる道具だからだろう。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>本書の「融けるデザイン」というタイトルにもなっている主題は「ハードウェアかソフトウェアといった違いに縛られず、自己帰属感という尺度をもとに人間と環境との相互的な作用を考えてプロダクトを設計しよう」といった話だと思う。しかしながらここでは画面内で描画されるWebブラウザとそれをタッチパネルやマウスやキーボードで操作する入力機器に限定した話を取り上げた。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:54:15+09:00","message":"注釈のフォーマットを修正\n","hash":"897dd0bbebbd54c1da4a7bdf49cb3ad17e0e68ba"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2021-04-29T17:29:02+09:00","message":"Add a post 'tokeru-design'\n","hash":"4b8fbeb1ab6d511b1574db240273abb609bc8649"}],"date_published":"2021-04-29T17:01:00+09:00","tags":["本"]},{"id":"https://memo.yammer.jp/posts/foot-switch-mic-mute","url":"https://memo.yammer.jp/posts/foot-switch-mic-mute","title":"足でマイクのミュートを解除しよう for 在宅勤務","summary":"私はいま、在宅勤務をしている。 特に研修中だからかオンライン通話の機会が多く、通話しながら作業や調べ物をするので、マイクのミュート/ミュート解除に手こずることに悩みを抱えている。 そんな中、ふとしたときに気づいたのである。「足が空いているではないか」と。 家に左クリックが壊れたマウスが有ったのでこれをフットスイッチ代わりにして、押しているときだけミュート解除するようにしてみた。 https://twitter.com/yammerjp/status/1386699716356837380 どのように実現しているかは後半の「つくりかた」に書く。 良いところ 細かくミュート/ミュート解除できる 目","content_html":"<p>私はいま、在宅勤務をしている。\n特に研修中だからかオンライン通話の機会が多く、通話しながら作業や調べ物をするので、マイクのミュート/ミュート解除に手こずることに悩みを抱えている。\nそんな中、ふとしたときに気づいたのである。「足が空いているではないか」と。</p>\n<p>家に左クリックが壊れたマウスが有ったのでこれをフットスイッチ代わりにして、押しているときだけミュート解除するようにしてみた。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">こちら、机の下に置かれた不審なマウスです。 <a href=\"https://t.co/DWxn3oxcLM\">pic.twitter.com/DWxn3oxcLM</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1386699716356837380?ref_src=twsrc%5Etfw\">April 26, 2021</a></blockquote></p>\n<p>どのように実現しているかは後半の「<a href=\"#%E3%81%A4%E3%81%8F%E3%82%8A%E3%81%8B%E3%81%9F\">つくりかた</a>」に書く。</p>\n<h2>良いところ</h2>\n<ul>\n<li><strong>細かくミュート/ミュート解除できる</strong></li>\n</ul>\n<p>目論見どおりうまく動いており、概ね快適である。\n鼻をすする音など些細な音が入らずに済むのがすこぶる良い。\n例えば相槌をうちながらキーボードを打つときや、ZoomやGoogle Meet以外のウィンドウ・タブを操作しながら話すときなどに助かる。\nスムーズにミュート解除できるので、些細なリアクションのときだけミュート解除するみたいなことができる。\nスイッチを押したとき/離した時のタイムラグも (周りに聞く限り) 問題ないようでで常用できそう。</p>\n<h2>改善すべきところ</h2>\n<ul>\n<li><strong>ペダルが踏みづらい</strong></li>\n</ul>\n<p>良いところもある一方、まだ道半ばだと感じる部分もある。\n例えばマウスの右クリックボタンは小さいため、少し足を離していると何処にあるかわからなくなる。\nすると目視で確認しないと踏めないので発話がワンテンポ遅れる。\nピアノのペダルのようなもっと踏みやすいものに変えたほうがよさそう。</p>\n<ul>\n<li><strong>慣れないので間違える</strong></li>\n</ul>\n<p>ペダル操作は慣れが必要で、踏み忘れて話しはじめてしまったり、逆に足を外して音を立ててしまったりすることも有った。\n「キーボードや手元のマウスを操作すること」「足でミュート解除すること」「話すこと」の3つを同時にやろうとすると頭の中がついていかずスムーズにできない。\n慣れればペダル操作が無意識でできるようになることを期待しているのでしばらく使っていきたい。</p>\n<ul>\n<li><strong>ミュート/ミュート解除のソフトウェア制御が怪しい</strong></li>\n</ul>\n<p>もうひとつ、ミュート/ミュート解除をソフトウェア的に制御する方法が怪しい。\nmacOSの仕様がよくわからないのだが、OS側でマイクをミュートにする方法が見つけられずボリュームを最小にすることで擬似的にミュートにしている。\nアプリケーションの種類に左右されずに、さらにウィンドウがアクティブでないときも操作したいので、いまは OS 側の設定をシェルから叩いている。</p>\n<pre><code class=\"hljs language-shell\"># マイクをミュート\n$ osascript -e \"tell application \\\"System Events\\\" to set volume input volume 0\"\n# マイクをミュート解除\n$ osascript -e \"tell application \\\"System Events\\\" to set volume input volume 100\"\n</code></pre>\n<p>今日Google Meetで話した感じではミュートされているようだったが、Zoomで試した感じだと最小でもすこし音が入っていた。\nもし他にいい方法があれば知りたい。\n(電子工作つよつよマンならマイクケーブルをスイッチで電気的に切断してミュートできそうだけれど、操作時のノイズなども出てきそうなので一旦ソフトウェア的に切り替える方式で考えている。)</p>\n<h2>感想</h2>\n<p>働き始めて3週間、在宅勤務にはきっと在宅勤務なりのスキルが必要だなあと感じる。\nたぶん自分がいままで属してきた他のコミュニティでは今の会社のようなオンラインコミュニケーションを取るのは難しかったように思う。\n何が難しいのかは言語化しづらいのだが、きっと会社の中で今まで積み上げられてきた様々な知見や文化が関与していそう。</p>\n<p>在宅勤務なりのスキルとは、チャットコミュニケーションの円滑さや、オンライン通話のテクニックも含まれるだろう。\n例えば画面越しでは感情が伝わりづらいので大きなリアクションをするとか、話し始めがかぶりやすいので細かいところでも誰かがファシリテーションしたり事前に挙手したりするとか、そういったことの積み重ねが大切に感じる。\nその要素のひとつにミュートを使いこなすこともあって、 雑音を入れない意味でも大きなリアクションを伝える意味でもスムーズに切り替えられるとよさそう。\n今回のペダルでの操作がうまい方法かわからないが、画面上のボタンだとミュート解除が遅れて困る機会がときどき有ったのでそれらを解消できるとよいね！</p>\n<h2>つくりかた</h2>\n<p>既にだいぶ書いたが、やっとここからつくりかたを説明する。</p>\n<p>今回の仕掛けは、macOS に接続した USB マウスと Karabiner-Elements というソフトウェアから成る。\n<strong>足元に置いたマウスの右クリックを検知し、マウス押下時にミュート解除のシェルコマンドを、押下を止めたときにミュートのシェルコマンドを実行している。</strong></p>\n<p><img src=\"https://blob.yammer.jp/foot-switch-mic-mute-irasutoya.png\" alt=\"マウス押下時にミュートする仕組みの外観図\"></p>\n<div style=\"margin-top:0px; text-align:center; width:100%; color: #888888; margin-bottom: 20px;\">これは私がいらすとやの画像を使いたかったことを表す図です。</div>\n<p>さあ作っていこう。</p>\n<h3>1. Karabiner-Elements をインストール</h3>\n<p>Karabiner-Elementsはもともとキーボードの操作を書き換えるソフトウェアで、例えばCapsLockキーをCtrlキーに置き換えるだとか、Spaceキーを長押しするとShiftキーが押されたことにするといった設定ができる。\nついでにマウスの入力も扱えるので、今回は特定のマウスがクリックされた時にコマンドを実行するよう設定ファイルを書くことにする。</p>\n<p>まず <a href=\"https://karabiner-elements.pqrs.org\">Karabiner-Elements のサイト</a> からファイルをダウンロードしインストールする。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p><img src=\"https://blob.yammer.jp/foot-switch-mic-mute-security-and-privacy.png\" alt=\"macOS 環境設定のセキュリティとプライバシーの項目で、Karabiner-Elementsによる入力監視を有効化する\"></p>\n<p>初回起動すると、macOS のセキュリティ許可などを設定しろだとか再起動しろだとかいわれるはずなので従う。\n以降はログインすると勝手に Karabiner-Elements も起動して、メニューバーに四角形のアイコン (<img src=\"https://blob.yammer.jp/foot-switch-mic-mute-karabiner-icon.png\" style=\"width:1em; height:1em;\" />)が表示されて常駐する。</p>\n<h3>2. デバイスを有効化する</h3>\n<p>メニューバーの Karabiner-Elements アイコンをクリック > Preferences... > Devices タブを開く。</p>\n<p>この状態で足のスイッチにしたいマウス<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>をコンピュータに挿して、新たに表示されたデバイスの行の左端のチェックボックスを有効にする。\n他デバイスのチェックボックスを有効にすると、他デバイスの入力も奪って設定を反映してしまう可能性がある。\n入力を上書きしたいデバイスのみにチェックをいれること。</p>\n<p><img src=\"https://blob.yammer.jp/foot-switch-mic-mute-devices.png\" alt=\"Karabiner-ElementsのDevicesタブで、当該のマウスにチェックを入れる\"></p>\n<h3>3. 設定ファイルを記述</h3>\n<p><code>~/.config/karabiner/assets/complex_modifications/mouse_mic_mute.json</code> を作成し、次の内容を書き込む。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup></p>\n<pre><code class=\"hljs language-json\">{\n  \"title\": \"Unmute/Mute mic with clicking mouse\",\n  \"rules\": [\n    {\n      \"description\": \"Unmute/Mute with mouse button down/up\",\n      \"manipulators\": [ {\n        \"type\": \"basic\",\n        \"from\": {\n          \"pointing_button\": \"button2\",\n          \"modifiers\": { \"optional\": [ \"any\" ] }\n        },\n        \"to\": [ {\n          \"shell_command\": \"osascript -e \\\"tell application \\\\\\\"System Events\\\\\\\" to set volume input volume 70\\\"\"\n        } ],\n        \"to_after_key_up\": [ {\n          \"shell_command\": \"osascript -e \\\"tell application \\\\\\\"System Events\\\\\\\" to set volume input volume 0\\\"\"\n        } ]\n      } ]\n    }\n  ]\n}\n</code></pre>\n<p>設定をカスタマイズするとすれば、たとえば <code>pointing_button</code> を <code>button1</code> にすれば、左クリックを対象にできる。\nその他の設定は<a href=\"https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/\">公式の説明</a>や <a href=\"https://qiita.com/s-show/items/a1fd228b04801477729c\">Qiita の記事</a> を参考に。</p>\n<h3>4. 設定を有効化</h3>\n<p>メニューバーの Karabiner-Elements アイコンをクリック > Preferences... > Complex modifications タブを開く。</p>\n<p>右下の「Add rule」を押し、「Unmute/Mute with mouse button down/up」を「Enable」する。</p>\n<p><img src=\"https://blob.yammer.jp/foot-switch-mic-mute-complex-modifications.png\" alt=\"Karabiner-ElementsのComplex modificationタブで、記述したJSONファイルの項目を読み込む\"></p>\n<div style=\"margin-top:5em;\"></div>\n<p>ここまでの操作でミュートをいい感じに操作できるはず。\nなお、マウスの裏側には黒い紙を貼ってポインタが反応しないようにしている。\n左クリックなどが反応しないのはマウス自体が壊れているからっぽい。\nもし通常のマウスを使う場合はKarabiner-Elementsの設定で、各ボタンの入力について<code>\"to\": [{}]</code>といった何もしない設定を追加すると良さそう。</p>\n<p>以上。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><code>$ brew install karabiner-elements</code>でもインストールできるはず <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>今回は手元に壊れかけのマウスが有ったのでこれをスイッチとして使ったが、キーボードなどでも同様のことを実現できるはず。また何も足で押さなくてもよくて、机の上にスイッチがあるとか既存のキーボードにショートカットキーを定義するとかでもよいかもしれない。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>既にマウスに関する Karabiner-Elements の設定が存在する場合は、ぶつからないように、Vendor ID と Product ID をメモして設定に書き込むと良さそう。<a href=\"https://github.com/yammerjp/dotfiles/blob/cf0f3eaa6bce79b984cdcc53a42ed1ea65711f90/.config/karabiner/assets/complex_modifications/mouse_mic_mute.json\">参考までに私の設定ファイルはこれ。</a> <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-05T19:47:55+09:00","message":"注釈内の改行を削除してremark-footnoteで正しく変換されるよう修正\n","hash":"1741da28aa87b809153d2c6799f500b28fc236a8"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2021-04-27T09:42:47+09:00","message":"Update the post 'foot-switch-mic-mute.md'\n","hash":"39f6a6b0c1810582a361802ac37c2df32019d56f"},{"date":"2021-04-27T09:33:30+09:00","message":"Add a post 'foot-switch-mic-mute.md'\n","hash":"fbf7e63c8f5cb3f172a2461e494ba46a175283f1"}],"date_published":"2021-04-27T09:41:29+09:00","tags":["macOS","在宅勤務","作業環境","Karabiner-Elements"]},{"id":"https://memo.yammer.jp/posts/backup-lolipop-wordpress-with-docker","url":"https://memo.yammer.jp/posts/backup-lolipop-wordpress-with-docker","title":"ロリポップ上に公開された WordPress サイトを、ローカルの docker-compose 上で再現する","summary":"表題の通り、ロリポップ！レンタルサーバ上に公開されている自身のWebサイトをバックアップし、さらに手元のPC上にdocker-composeで動作するように配置する。 前提の環境 ロリポップ！レンタルサーバ上で WordPress を用いた Webサイトを構築している。 macOS 10.15 Catalina Docker Desktop for Mac がインストールされている wget がインストールされている。 (Homebrew を用いて brew install wget でインストール) 手順1: ロリポップ上の情報をダウンロード 1-1: ファイルを抜き出す はじめにロリポップ","content_html":"<p>表題の通り、ロリポップ！レンタルサーバ上に公開されている自身のWebサイトをバックアップし、さらに手元のPC上にdocker-composeで動作するように配置する。</p>\n<h2>前提の環境</h2>\n<ul>\n<li>ロリポップ！レンタルサーバ上で WordPress を用いた Webサイトを構築している。</li>\n<li>macOS 10.15 Catalina</li>\n<li><a href=\"https://matsuand.github.io/docs.docker.jp.onthefly/docker-for-mac/install/\">Docker Desktop for Mac がインストールされている</a></li>\n<li>wget がインストールされている。 (Homebrew を用いて <code>brew install wget</code> でインストール)</li>\n</ul>\n<h2>手順1: ロリポップ上の情報をダウンロード</h2>\n<h3>1-1: ファイルを抜き出す</h3>\n<p>はじめにロリポップ！ユーザ専用ページ > ユーザー設定 > アカウント情報 を開いてアカウント情報を確認する。\n今回は以下の内容であったとする。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FTPS サーバー</td>\n<td><code>ftp.lolipop.jp</code></td>\n</tr>\n<tr>\n<td>FTP ・WebDAV アカウント</td>\n<td><code>chu.jp-user</code></td>\n</tr>\n<tr>\n<td>FTP ・WebDAV パスワード</td>\n<td><code>password</code></td>\n</tr>\n</tbody>\n</table>\n<p>次に、ターミナルから以下のコマンドを実行する。\nftp を使って、階層の深さ制限なしに再帰的にファイルをダウンロードする。</p>\n<pre><code class=\"hljs language-shell\">$ mkdir -p ~/lolipop-backup/download &#x26;&#x26; cd ~/lolipop-backup/download\n$ wget -r -l 0 \"ftp://chu.jp-user:password@ftp.lolipop.jp\"\n# (ホスト名、ユーザ名、パスワードは適宜置き換えていただくとよし)\n</code></pre>\n<p>ちなみに私の場合は8分で200MB弱をダウンロードした。</p>\n<h3>1-2: データベースを抜き出す</h3>\n<ol>\n<li>ロリポップ！ユーザ専用ページ > サーバの管理・設定 > データベース を開く。</li>\n<li>データベース名をメモする。今回は <code>LAA0000000-xxxxxx</code> であるとする。</li>\n<li>phpMyAdmin を開く。</li>\n<li>ログインして、画面左のデータベース名を選択 (今回で言えば <code>LAA0000000-xxxxxx</code>)。</li>\n<li>\"エクスポート\" タブを開く。</li>\n<li>エクスポート方法: \"詳細 - 可能なオプションを全て表示\" のラジオボタンを選択。</li>\n<li>生成オプションより追加コマンド: \"CREATE DATABASE / USE コマンドを追加する\" にもチェックを入れる。</li>\n<li>他はデフォルトのままで、ページ左下の \"実行\" をクリック。</li>\n<li>ファイルがダウンロードされるので <code>~/lolipop-backup/downlaod/LAA0000000-xxxxxx.sql</code> に移動させる。</li>\n</ol>\n<h2>手順2: ローカルにWordPress環境を構築</h2>\n<h3>2-1: docker-compose.ymlを整備する</h3>\n<p><code>~/lolipop-backup/docker-compose.yml</code> を作成し、以下の内容を記述する。\n<code>- MYSQL_DATABASE=LAA0000000-xxxxxx</code>の行についてのみ、イコール以降に各自のデータベース名を書き込む必要がある。</p>\n<pre><code class=\"hljs language-yaml\"># docker-compose.yml\nversion: \"3\"\nservices:\n  db:\n    image: mysql:5.6\n    container_name: \"mysql\"\n    volumes:\n      - ./db:/var/lib/mysql\n      - ./db-init:/docker-entrypoint-initdb.d\n    restart: always\n    environment:\n      - MYSQL_DATABASE=LAA0000000-xxxxxx # この行は各自で記述\n      - MYSQL_USER=user\n      - MYSQL_PASSWORD=password\n      - MYSQL_ROOT_PASSWORD=root\n  wordpress:\n    image: wordpress:5.7.1\n    container_name: \"wordpress\"\n    volumes:\n      - ./wp:/var/www/html\n    restart: always\n    depends_on:\n      - db\n    ports:\n      - 8080:80\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    container_name: \"phpmyadmin\"\n    restart: always\n    depends_on:\n      - db\n    ports:\n      - 8888:80\n    environment:\n      - PMA_ARBITRARY=1\n      - PMA_HOSTS=mysql\n      - PMA_USER=user\n      - PMA_PASSWORD=password\n</code></pre>\n<h3>2-2: 抜き出したファイルを設置する</h3>\n<pre><code class=\"hljs language-shell\"># 抜き出したファイル群を設置\n$ cp -r ~/lolipop-backup/download/ftp.lolipop.jp ~/lolipop-backup/wp\n# 上の行はロリポップ側でルートディレクトリに WordPress を設置している場合である\n# ルートディレクトリ以外に WordPress を設置している場合は、index.php が wp ディレクトリの直下に配置されるようにコピー元のディレクトリを指定する\n\n# 抜き出したデータベース初期化情報を設置\n$ mkdir db-init\n$ cp ~/lolipop-backup/download/LAA0000000-xxxxxx.sql ~/lolipop-backup/db-init/\n</code></pre>\n<h3>2-3: WordPressの設定を変更</h3>\n<p>WordPress の設定が記述されたファイル <code>~/lolipop-backup/wp/wp-config.php</code> を編集し、WordPress が正しくデータベースに接続できるようにする。</p>\n<ul>\n<li><code>define('DB_USER', '...');</code> →<code>define('DB_USER', 'user');</code></li>\n<li><code>define('DB_PASSWORD', '...');</code> →<code>define('DB_PASSWORD', 'password');</code></li>\n<li><code>define('DB_HOST', '...');</code> →<code>define('DB_HOST', 'mysql:3306');</code></li>\n</ul>\n<h3>2-4: Search-Replace-DB を設置</h3>\n<p>のちほど、データベース内のURLを書き換える必要があるため、書き換えに用いるツールを配置する。</p>\n<pre><code class=\"hljs language-shell\">$ git clone https://github.com/interconnectit/Search-Replace-DB.git ~/lolipop-backup/wp/Search-Replace-DB\n</code></pre>\n<h3>2-5: Apache の設定を変更</h3>\n<p>トップページ以外のページのURIを開いた時も、ApacheではなくWordPressに処理して欲しいので、リクエスト先をindex.phpに向ける必要がある。\n<code>~/lolipop-backup/wp/.htaccess</code> に以下を記述する。</p>\n<pre><code># .htaccess\n\n# BEGIN WordPress\n\nRewriteEngine On\nRewriteBase /\nRewriteRule ^index\\.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.php [L]\n\n# END WordPress\n</code></pre>\n<h2>手順3: 起動する</h2>\n<h3>3-1. Dockerコンテナ群の立ち上げ</h3>\n<p>Dockerコンテナを立ち上げて、バックアップしたページが表示されることを確認する。</p>\n<pre><code class=\"hljs language-shell\">$ cd ~/lolipop-backup\n$ docker-compose up -d\n# 少し待つ (10秒とか。初回起動時はDBを初期化するので、立ち上げた瞬間にアクセスするとエラーが発生して開けない。開けないだけだが)\n\n$ open http://localhost:8080\n# トップページが開けることを確認する\n# この状態ではリンクを踏むと、localhost ではなくWeb上のページに飛んでしまう\n</code></pre>\n<h3>3-2. データベース内のURLの置換</h3>\n<p>WordPressのデータベース内では、URLが絶対パスで保持されているらしく、ここまでの手順では、ページ内リンクを踏むと、バックアップ元のWebサーバのページに飛んでしまう。この手順では、データベースを書き換えて、リンクを踏んでもローカルのページを回遊できるようにする。</p>\n<p>今回は <code>www.example.com</code> に設置されたWebサイトをバックアップしているものとする。</p>\n<p>1.Search Replace について</p>\n<ul>\n<li><code>http://localhost:8080/Search-Replace-DB</code> を開く。</li>\n<li>replace (search for...) に <code>http://www.example.com</code>、with (replace with...) に <code>http://localhost:8080</code> を入力</li>\n<li>\n<ul>\n<li>add more search terms をクリック</li>\n</ul>\n</li>\n<li>replace (search for...) に <code>https://www.example.com</code>、with (replace with...) に <code>http://localhost:8080</code> を入力</li>\n</ul>\n<p>2.Database Details について</p>\n<ul>\n<li>database name に データベース名 (<code>LAA0000000-xxxxxx</code>など) を入力</li>\n<li>username に <code>user</code> と入力</li>\n<li>pass に <code>password</code> と入力</li>\n<li>host に <code>mysql</code> と入力</li>\n<li>port に <code>3306</code> と入力</li>\n</ul>\n<p>Test connection を押して、「Success. You are connected.」と表示されることを確認する。</p>\n<p>3.Which Tables? について</p>\n<p>ラジオボタンが all tables を選択していることを確認する。</p>\n<p>4.実行</p>\n<p>入力に誤りがないことを確認して、不安なら「Do a safe test run」をしてみたあとに、「Search and Replace」を実行する。</p>\n<hr>\n<p>ここまでの手順を踏めば、<a href=\"http://localhost:8080\">http://localhost:8080</a> 上で正しくページが表示され、リンクを踏んでもローカルのページに飛べるはず。</p>\n<h2>うまくいかないとき</h2>\n<ul>\n<li>「データベース接続確立エラー」と表示される。</li>\n</ul>\n<p>まず、wp/wp-config.php の中が正しく書き換えられているか確認するとよさそう。\nWordPress に接続した時に「データベース接続確立エラー」と表示される場合は、docker-compose.yml 内のホスト名(今回はmysqlコンテナの3306番に公開されたポートを観に行くので <code>mysql:3306</code>)・データベース名・ユーザ名・パスワード、初期化用sqlファイル内の CREATE DATABASE の行にあるデータベース名、wp-config.php の中にあるホスト名・データベース名・ユーザ名・パスワードが一致しているかを確認してみる</p>\n<ul>\n<li>WordPressのサイトが開けない。「サイトに重大なエラーがありました。」と表示される。</li>\n</ul>\n<p>wp-config.php の中で <code>define('WP_DEBUG', false);</code> の行を <code>define('WP_DEBUG', true);</code> に書き換えるとデバッグモードになってエラーが表示されるので原因究明につながるかもしれない。\nちなみに ftp でファイルをダウンロードするとき、wget コマンドに <code>-l 0</code> オプションを指定しないと途中の階層までしかダウンロードされず、ファイルが欠けてWordPressが起動しなくなる。</p>\n<ul>\n<li>Webページを開くとApacheの404エラーページが出る。</li>\n</ul>\n<p>.htaccess ファイルを設置して、リクエストしたURIに関わらずindex.phpで処理するように設定するとよいかも。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-24T04:15:44+09:00","message":"Add a post\n","hash":"9555a90785e82772193aef3be56d58a7477dfb5c"}],"date_published":"2021-04-24T03:41:20+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/strengths-finder","url":"https://memo.yammer.jp/posts/strengths-finder","title":"僕の、私の、ストレングス・ファインダー (感想)","summary":"会社の研修でストレングス・ファインダーを受けたので、結果を過去の経験と照らし合わせて考えてみます。 読書メモみたいなものです。 ストレングス・ファインダーとは 1998年に心理学者のドナルド・O・クリフトンが開発したオンライン心理テスト。 「実行力」「影響力」「人間関係構築力」「戦略的思考力」の4領域に分類される34の資質のうちどれを自分が持っているのかを判断してくれる。 それぞれの資質を知ることで自分の能力をどのように開発していけばよいかの参考になるらしい。 書籍「さあ、才能(じぶん)に目覚めよう 新版 ストレングス・ファインダー2.0」に付属するアクセスコードから受けることができる。 なお","content_html":"<p>会社の研修でストレングス・ファインダーを受けたので、結果を過去の経験と照らし合わせて考えてみます。\n読書メモみたいなものです。</p>\n<h2>ストレングス・ファインダーとは</h2>\n<p>1998年に心理学者のドナルド・O・クリフトンが開発したオンライン心理テスト。\n「実行力」「影響力」「人間関係構築力」「戦略的思考力」の4領域に分類される34の資質のうちどれを自分が持っているのかを判断してくれる。\nそれぞれの資質を知ることで自分の能力をどのように開発していけばよいかの参考になるらしい。\n書籍「<a href=\"https://www.amazon.co.jp/%E3%81%95%E3%81%82%E3%80%81%E6%89%8D%E8%83%BD-%E3%81%98%E3%81%B6%E3%82%93-%E3%81%AB%E7%9B%AE%E8%A6%9A%E3%82%81%E3%82%88%E3%81%86-%E6%96%B0%E7%89%88-%E3%82%B9%E3%83%88%E3%83%AC%E3%83%B3%E3%82%B0%E3%82%B9%E3%83%BB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%B3%E3%83%80%E3%83%BC2-0/dp/4532321433/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&#x26;dchild=1&#x26;keywords=%E3%82%B9%E3%83%88%E3%83%AC%E3%83%B3%E3%82%B0%E3%82%B9%E3%83%BB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%B3%E3%83%80%E3%83%BC&#x26;qid=1618838810&#x26;sr=8-1\">さあ、才能(じぶん)に目覚めよう 新版 ストレングス・ファインダー2.0</a>」に付属するアクセスコードから受けることができる。\nなお以降に挙げる引用の出典はすべてこの書籍である。</p>\n<h2>結果</h2>\n<p>私の持つ資質の上位5つは高いものから順に、<strong>分析思考</strong>、<strong>学習心</strong>、<strong>収集心</strong>、<strong>ポジティブ</strong>、<strong>個別化</strong> らしい。前半3つが「戦略的思考力」に、後半2つが「人間関係構築力」に分類されるもののようだ。\nこれらの資質をひとつずつみていく。</p>\n<h3>分析思考</h3>\n<p>分析思考とは、データを好み物事の理由と原因を追求することを好むことを指す。</p>\n<blockquote>\n<p>〈分析思考〉の資質を持つあなたは、他の人に「それを証明しなさい。貴方の主張がなぜ正しいのか示しなさい」と強く要求します。このような詰問を受けると、自分のすばらしい理論がもろくも崩れ落ちるのを感じる人もいます。(p186)</p>\n</blockquote>\n<p>書籍に書かれた上記の文を読んで、他人と議論しているときにまさに自分がよく考える話だと感じた。\nつい先日の研修でのグループワークでも、自分が建設的な意見を出せているわけではないのに、他人の意見の実現可能性が気になってしまっていろいろ質問したくなってしまった。\n悪い方向に走ると意見を潰すような振る舞いになってしまうが、今ある情報からどう判断できるかということをしっかり伝えていくのは必要なことだと思うので、人の意見を良い方向にブラッシュアップできるような発言ができたらよいね。</p>\n<p>あわせて「内容に対しての見解を言うこと」と「人格攻撃をすること」は別であるという点には注意しておきたい。\n本書のアドバイスの中で「あまりキツイことは言い過ぎないように」とあって、わかるし気をつけたいよな〜、改めて心に刻もう、と思った。</p>\n<h3>学習欲</h3>\n<p>学習欲のある人とは、知識を得る状態になることや知識を得た状態だと認識することに満足感を覚える人のことらしい。</p>\n<p>私はコンピュータを触る・学ぶことの面白さに「ブラックボックスを紐解くことが楽しい」ことを挙げることがある。\nコンパイラや認証などを再実装してみたり、大学で既存のソフトウェアに関する講義に興味をもったりしたのは、掘り下げてどう動いているのがわかると楽しいからという理由が強い。</p>\n<p>もっと遡れば小学生の頃、掃除機やラジオなどの古い電化製品を分解していたのを思い出す。\n自覚はしていないが、新しい知識を獲得して学習するプロセスに実は満足感をもっているのかもしれない。</p>\n<p>学習欲の高い人に向けて本書では次のようなアドバイスが挙げられている。</p>\n<blockquote>\n<p>変化を起こす人になりましょう。他の人達は新しい規則や技術を導入したり、環境を整備したりすることに尻込みするかもしれません。(p53)</p>\n</blockquote>\n<blockquote>\n<p>技術や規則が常に変化する分野にキャリアを変更しましょう。これに対応しようと挑戦し続けることであなたはいきいきとします。(p53)</p>\n</blockquote>\n<p>ソフトウェアエンジニアを職業に選んだのは正解だったようだ。\n常に環境が変化する状況で新しいものをキャッチアップし続けることが特に必要な業種だと思うので、変化を受け入れてそれについていける、さらにはそういった流れを作れるような人材になれると良いですね。</p>\n<h3>収集心</h3>\n<p>(ここでいう) 収集心とは、物理的な物の収集欲に限らず、情報を収集することを好む人も含んでいるらしい。\nたしかにWikipediaは永遠に見れるタイプだし、旅行に行く前には調べるタイプだし、社会のものがどう動いているか仕組みを知りたいみたいな気持ちは強いかもしれない。\n本も電子派だけど紙を捨てるときはスキャンするし、Google フォームの内容や一時的な目的のために配られた資料も保管しておきたくなったりする。</p>\n<blockquote>\n<p>情報を保管し、簡単に探し出すことができる仕組みを考案しましょう。(p121)</p>\n</blockquote>\n<p>本書には上のようなアドバイスが書かれていて、これは自分が課題に感じていることの１つだ。\nメモをとったり思考を整理したり、それらの情報にアクセスするためのツールが定まっていない。\n数年前は Google Keep を使っていたが、いつ記録した情報かが残りづらく使うのを止めた。</p>\n<p>今だとたぶんScrapboxとかNotionとかになるのだろうけど、どちらも全然使いこなせていない。\nこういったアプリケーションは移り変わりが早いのでロックインされたくなくてMarkdown最強説を唱えるときもあったものの、メモを集めたgitリポジトリも整理されてアクセスしやすい状況とはいえないな。\nどうにかせねばなあ。</p>\n<h3>ポジティブ</h3>\n<p>ポジティブが上位に入っているのは嬉しい。</p>\n<p>昔 (これまた小学生くらいの頃) は自分をネガティヴだと自覚していて、自分のことを説明するときはネガティヴだと言っていた。\nしかしネガティヴな自分が嫌で、無駄に自分や他人を落ち込ませるような気がして、いつからか言霊でもいいからなるべく言葉では無理矢理でもいいからポジティブになるような発言を心がけていた。</p>\n<p>いつしかそうやって言霊だと思っていた考えが自分の中のポジティブな思考として定着して、物事を悲観的に考えずに済むようになった。\n今回のテストで上位に上がってきたことをもって「自分がポジティブな思考を持った」と言えるようになったと思う。\n自分の性格は自分で変えられることを示たので嬉しい。</p>\n<blockquote>\n<p>日頃から楽しい話や冗談などを準備しておきましょう。(p201)</p>\n</blockquote>\n<p>誰も傷つけないで笑いをとりたい。面白い話ができる人になりたいね。</p>\n<h3>個別化</h3>\n<p>個別化の資質を持つ人は、一人ひとりのユニークな個性に興味をそそられそれを理解することに長けているらしい。\nこれは正直よくわからないけど、自分のわがままを持っているから他人のわがままも受け入れあえたら幸せだよなと思っている。</p>\n<blockquote>\n<p>チームの各メンバーが最も得意とすることを見極めましょう。(p89)</p>\n</blockquote>\n<p>上のようなアドバイスが示されているが、そうやって得意なことを生かしたチームがつくれたら最強だよな。\nあまり共感と理解ができてないのでこの項はさっくり終わる。</p>\n<h2>まとめ</h2>\n<p>自分の資質は4領域のうち「人間関係構築力」「戦略的思考力」に偏っていて、「実行力」「影響力」は強みではないらしい。\n実際のところ実行力も影響力もないのはなんとなく同意してしまうな。\nしかしながら働いていく上ではこれらもある程度必要だと思うので、どうカバーできるか考えていきたい。</p>\n<p>そもそもこういった心理テストは「答えを見たときに自分の中で当てはまりそうな行動や理由を見つけて納得したような気になる」ことがよくあるように思う。\nさらにストレングス・ファインダーの結果は時間が経てば変わることもあるらしく「絶対的な自分の能力」ではなく「今の自分にとっての強みとなりうる要素」を表すものらしい。</p>\n<p>今回の結果が実際のところどれほど適切な指摘をしているのかはわからないが、今後の仕事での振る舞いや方向性を決めていくための自分を振り返る機会になった。\n今回の内容を過信しすぎず、しかしながら自分の行動を律するときの一つの指標として適切な距離感で捉えておきたい。</p>","_history":[{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T17:29:02+09:00","message":"Add a post 'tokeru-design'\n","hash":"4b8fbeb1ab6d511b1574db240273abb609bc8649"},{"date":"2021-04-19T23:48:01+09:00","message":"Add a post 'strengths-finder'\n","hash":"49d2ba180e3412d072af1e55eb291f4ba7ae1b10"}],"date_published":"2021-04-19T23:45:00+09:00","tags":["本"]},{"id":"https://memo.yammer.jp/posts/20210408","url":"https://memo.yammer.jp/posts/20210408","title":"社会人一週目の所感","summary":"4/1に社会人になり一週間が経った。 職種合同での研修期間中で実際の仕事やエンジニアリングとはまだ少し距離がある。 研修もまだまだこれからだけど、区切りが良い日なので今日の気持ちを記録しようかと。 生活について まず当たり前だが、社会人は結構疲れる。 3月末までは一日中暇で、好きなだけコードを書き好きなだけネット見て好きなだけ寝ていたので差が大きいだけで、毎日朝から夕方まで集中していたら人間誰でも疲れるだろう。 睡眠は本当に大事。 一昨日つい睡眠時間を削ったら昨日は一日中眠くて、仕事終わった直後にベッドで爆睡した。 これができるから在宅勤務は良い。通勤が無くて良い。 慣れてしまったら毎日出社な","content_html":"<p>4/1に社会人になり一週間が経った。\n職種合同での研修期間中で実際の仕事やエンジニアリングとはまだ少し距離がある。\n研修もまだまだこれからだけど、区切りが良い日なので今日の気持ちを記録しようかと。</p>\n<h2>生活について</h2>\n<p>まず当たり前だが、社会人は結構疲れる。\n3月末までは一日中暇で、好きなだけコードを書き好きなだけネット見て好きなだけ寝ていたので差が大きいだけで、毎日朝から夕方まで集中していたら人間誰でも疲れるだろう。\n睡眠は本当に大事。\n一昨日つい睡眠時間を削ったら昨日は一日中眠くて、仕事終わった直後にベッドで爆睡した。\nこれができるから在宅勤務は良い。通勤が無くて良い。\n慣れてしまったら毎日出社なんてできない人間になる気がする。</p>\n<p>あとは時間を大切にしたくなる。\n研修後にレポートを書くのだが、疲れたからゆっくりやるかと思うとそれだけで凄く時間がかかる。\n1日がすぐに終わってまた朝になる。\n逆にテキパキすれば時間はたくさんあって(通勤時間ないし残業もないし)、朝に本を読んだりできるし、こうやってブログを書くこともできる。休むときはしっかり休む、集中するときはガッとやる、意識的に時間で区切っていきたい。</p>\n<p>区切るといえば、リモートワークなので自室で寝て自室で働くのだが、自分の緊張感を意識的に切り替えるために2つのことを決めた。</p>\n<ul>\n<li>ドアを開ける ...\n始業中で会話をしているときにドアを閉めるのは当然として、それ以外の時間は開けるようにしている。\n空気も入れ替わるし、心のスイッチにもなるし、同居の家族も「今は声をかけていいのか」が明確にわかるので良い。</li>\n<li>早く風呂に入る ...\n終業後に気分を緩めるために風呂に入るのがいい。\nゆっくり出来るし体に水を浴びると気分が変わる。\nあと風呂に入ることを面倒に思う人種からすると、入るのが後回しなり夜ふかしすることを避けられるのも良い。</li>\n</ul>\n<p>ほかにも、時間のあるときに本を少しずつ読み進めてみている。\n(いままでは気分がノッたときに一気に読破することがほとんどだったが、平日はまとまって時間取るのも難しそう。)\nしかしながら少しずつ読むと、翌日になったら以前の内容を忘れていたりして内容を掴みづらいと感じる。\n打開策として、手の感覚などからどこまで読んだかという情報が記憶に残りやすいのではないかと物理本を注文してみた。\n本を裁断して自炊するほど電子書籍を好んでいたので物理本はだいぶ久々な気がする。\n効果はあるだろうか、どうかな？</p>\n<h2>研修について</h2>\n<p>話は変わって研修について。\n講義形式のものとチームで課題にとりかかるものの2種類があり、講義形式のものはいろいろな学びがあった。\nビジネスマナーの習得機会でもあったし、自分は将来の夢や目標が明確でないことがわかったし、会社について理解を深めたつもり。</p>\n<p>一方、チームで課題に取りかかるものは結構大変だった。</p>\n<p>ひとつは答えのない問題に対しての解決策を限られた時間で議論すること、導くことの難しさ。\n(就活でグループワークの練習をしたときのことを思い出した。結局選考ではやってないが。)\n途中で焦って方向性のハンドリングをミスったような気がしたけど、優秀なチームメンバーのおかげで終わってみると案外丸くまとまっていたりする。\nてんやわんやするも意図しての研修のような気もするので、とりあえず乗り切ったことを喜びたい。</p>\n<p>もうひとつは言語の壁。\n日本語を母語としない方がチームにいて、英語でコミュニケーションする必要があった。(多様性は歓迎されるべきことで良いこと。)\n人生でたまに必要になるんだよな英会話。\n一応配慮があって留学経験のある人が同じチームにいたのだけど (ありがたい) (めちゃめちゃ発音きれいだった)、自分も割と頑張って英語を喋ろうとした、したけれど...</p>\n<p>最初は途中途中に英語で「今こんなことを考えているんだけど貴方の意見は？」と議論を整理して振ろうとしてみてみたり、テキストベースで進めてみたりしようとしたものの、最終的には結局全然うまく行かなかった。\nテキストベースの議論が難しかった原因は、研修の都合でコミュニケーションツールが Zoom のみに限定されていたということもあるけれど、一番は「議論が白熱すると余裕がない」ことだった。\n日本語で考えるのでさえ精一杯で、どうしようかと悩み、時間がなく焦っている状況だった。\n散らかった議論をそのまま英語で話すのも厳しいし、整理して説明する余裕もない。\n結局チームの中で情報格差の壁ができたままになってしまって、現状を伝えて一緒に考えることが難しくなっていった。\n日本語ベースの研修だから仕方ない部分もあるだろうけど、結局チームも分断されてしまった (疎外感を与えてしまっただろう) し、その方の学びの機会も少なくなってしまった気がして、申し訳ない気持ちと残念な気持ちのまま研修が終わってしまった。</p>\n<p>どう進めればよかったのだろうか、今考えてもわからない。\nある程度議論のスピードを抑えてでも丁寧に進めるべきだったのかもしれない。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">英語力欲しすぎ太郎</p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1377835243336425473?ref_src=twsrc%5Etfw\">April 2, 2021</a></blockquote></p>\n<p>文章の方向性がわからなくなってきたので、ちょっと話を変えましょう。\nリモートワークが中心でありコロナ禍ということもあり、内定をいただいてから一度も出社してないし、同期の人とは殆ど物理的に顔を合わせたことがない。\nその上にまだ入社1週間なのだが、研修のチームが違えど会社の同期の人同士では既にたくさんコミュニケーションをとっているし、なんとなく近くにいる気がする。\nチームでの課題で「大変だな」という気分になっているときも Slackを通して同期の人々に支えられる気分になるし (ありがとうございます)、いい会社にはいい人が集まるんだろうな。</p>\n<p>明日からまた研修が続くのでそろそろ寝ましょう。\nおやすみなさい。</p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-09T21:37:08+09:00","message":"Fix the wording\n","hash":"10dfb4350634559eac218dc1c620ec3a198a2942"},{"date":"2021-04-09T01:21:46+09:00","message":"Add a post of '20210408.md'\n","hash":"00a3449e1581ba247a3ef20eca1495b016629492"}],"date_published":"2021-04-09T00:57:25+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/mail-backup-mbox","url":"https://memo.yammer.jp/posts/mail-backup-mbox","title":"Office365メールやGmailをローカルにバックアップする (macOS)","summary":"3月で大学を卒業するにあたり、大学のメール (Office365) と研究室のメール (Google Workspace) が使えなくなる。 閲覧もできなくなるのでバックアップを取っておきたいので試してみる。 メールの取得 Gmail 上のすべてのメールを mbox 形式で取得する Google は サービス上の個人データをエクスポートする機能を提供している。 参考: Gmail からデータを書き出す - Gmail ヘルプ 2021/03現在では、次の手順で取得できる。 Gmail を開き、右上の自分のアイコンをクリックして、「Google アカウントを管理」を選択 「データとカスタマイズ」","content_html":"<p>3月で大学を卒業するにあたり、大学のメール (Office365) と研究室のメール (Google Workspace) が使えなくなる。\n閲覧もできなくなるのでバックアップを取っておきたいので試してみる。</p>\n<h2>メールの取得</h2>\n<h3>Gmail 上のすべてのメールを mbox 形式で取得する</h3>\n<p>Google は サービス上の個人データをエクスポートする機能を提供している。</p>\n<p>参考: <a href=\"https://support.google.com/mail/answer/10016932?hl=ja\">Gmail からデータを書き出す - Gmail ヘルプ</a></p>\n<p>2021/03現在では、次の手順で取得できる。</p>\n<ol>\n<li>Gmail を開き、右上の自分のアイコンをクリックして、「Google アカウントを管理」を選択</li>\n<li>「データとカスタマイズ」タブに移動し、中段の「データのダウンロード、削除」から「データをダウンロード」を選択</li>\n<li>「新しいエクスポートの作成」の右下にある「選択をすべて解除」をクリック</li>\n<li>スクロールして下の方に移動し、「メール」のチェックボックスを選択状態にする</li>\n<li>さらに下に移動し「次のステップ」を選択</li>\n<li>「エクスポートを作成」を選択</li>\n<li>しばらく時間が立つと自分のメールアドレスにダウンロードリンクが届くので、これを開いてzipファイルをダウンロード</li>\n</ol>\n<h3>Apple純正の Mail.app でメールボックスごとに mbox 形式で取得する</h3>\n<p>Office365 は Gmail のようにエクスポート機能を提供していない。\n一方で macOSでは、純正で付属する Mail.app を用いてメールボックスのメールをエクスポートすることができる。</p>\n<p>参考: <a href=\"https://support.apple.com/ja-jp/guide/mail/mlhlp1030/mac\">Macの「メール」でメールボックスを読み込む/書き出す - Apple サポート</a></p>\n<p>例えば「受信トレイ」や「送信済み」なども含めたすべてのメールを「アーカイブ」に移動し、「アーカイブ」のメールボックスを右クリックして「メールボックスを書き出す」を選ぶとすべてのメールを単一の mbox 形式でエクスポートできる。</p>\n<p>(Office365 だけでなく Gmail を含む他のサービスのメールも、Mail.app でログインして同期すれば、この機能からメールをエクスポートできる)</p>\n<h2>メールの閲覧</h2>\n<p><a href=\"http://www.mutt.org\">mutt</a> という CLI で mbox 形式のメールを閲覧できる。</p>\n<h3>インストール</h3>\n<pre><code class=\"hljs language-shell\">$ brew install mutt\n</code></pre>\n<h3>メールを見る</h3>\n<pre><code class=\"hljs language-shell\">$ mutt -f path/to/mail-file.mbox\n</code></pre>\n<p>操作は次のとおり</p>\n<table>\n<thead>\n<tr>\n<th>キー</th>\n<th align=\"left\">動作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>j</td>\n<td align=\"left\">下へ</td>\n</tr>\n<tr>\n<td>k</td>\n<td align=\"left\">上へ</td>\n</tr>\n<tr>\n<td>z</td>\n<td align=\"left\">次ページへ</td>\n</tr>\n<tr>\n<td>Z</td>\n<td align=\"left\">前ページへ</td>\n</tr>\n<tr>\n<td>/</td>\n<td align=\"left\">正規表現で検索</td>\n</tr>\n<tr>\n<td>Enter</td>\n<td align=\"left\">メールを読む</td>\n</tr>\n<tr>\n<td>q</td>\n<td align=\"left\">戻る / 終了</td>\n</tr>\n</tbody>\n</table>\n<h2>経緯といざこざ</h2>\n<p>メールをローカルに保存するときは、Unix, Linuxで用いられる形式として mbox 形式 (１つのファイルに複数のメールを記録) と Mail Dir形式 (1つのファイルに1つのメールを記録)、Windows で用いられている形式として eml形式 (1つのファイルに1つのメールを記録) などが代表的なよう。\n今回は使わなくなるメールアドレスの過去のメールを保存しておきたいだけなので、後から見返しやすければどの形式でも良い。mbox 形式でのエクスポートがやりやすかったので mbox を選んだ。</p>\n<p>macOS ないし Ubuntu からメールをDownloadする CLI として getmail や fetchmail 等があるが、CLIからだと Office365 や Gmali の2段階認証を超えるのが面倒そうだった。\nThunderbird のエクステンションでのエクスポートも、エクスポート後のファイルを mutt で閲覧できなかったのでやめた。\n右往左往していて最終的に OS にバンドルされた Mail.app で mbox 形式でのエクスポートができることがわかり解決。\nmacOS の純正アプリケーションは PDF の切り取りや並べ替えができたり、簡易的にRAW現像できたりと意外にも高機能なのでよく助けられている気がする。Appleありがとう。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-03-28T19:52:28+09:00","message":"Add a post\n","hash":"a6ab6b9b1aed23edf9066610d53b55e68a05f389"}],"date_published":"2021-03-28T18:03:06+09:00","tags":["macOS","メール"]},{"id":"https://memo.yammer.jp/posts/tcp-packet-layout","url":"https://memo.yammer.jp/posts/tcp-packet-layout","title":"TCP/IP における全レイヤを俯瞰したパケットの構成","summary":"ふとしたときに TCP/IP でのパケットの各フィールドにどんなものがあったか確認したくなることがあるので、レイヤごとに分けずまとめて書かれた物があると便利。 以下, Ethernet, IPv4, TCP, HTTP を用いたパケットの各フィールドの配置を表した図。 各フィールドの意味は記載しません。 ","content_html":"<p>ふとしたときに TCP/IP でのパケットの各フィールドにどんなものがあったか確認したくなることがあるので、レイヤごとに分けずまとめて書かれた物があると便利。</p>\n<p>以下, Ethernet, IPv4, TCP, HTTP を用いたパケットの各フィールドの配置を表した図。\n各フィールドの意味は記載しません。</p>\n<p><img src=\"https://blob.yammer.jp/tcp-packet-layout.svg\" alt=\"TCPパケットの全レイヤを通したフィールドの構成図\"></p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-02-19T11:35:40+09:00","message":"Add a post of tcp-packet-layout\n","hash":"1244f9e907d244f482f32b56c343dcffcc231605"}],"date_published":"2021-02-19T11:24:44+09:00","tags":["HTTP","TCP/IP"]},{"id":"https://memo.yammer.jp/posts/20210218","url":"https://memo.yammer.jp/posts/20210218","title":"卒業論文の発表を終えた。近況。","summary":"先週に卒業論文を提出し、今日その内容を学科内で発表した。 無事合格できた旨のメールを先ほど受け取って、これで大学4年間の全ての単位を取得できる見込みになった。 最近は論文執筆に勤しんでいた。 新年の意気込みで早寝早起きと言っておきながら最近はだいぶ夜ふかしをしていたし、本を読む目標もあまり進んでいない。 少し読んだ本もあるが、そんな時間があるなら論文を書きましょうという感じだった。 というわけで駄文でした。 研究が終わったらやりたいことがいくつか溜まっていたので順番に消化していきたい。 気分症なのでいくつか既に昇華してしまったものもあるが、まあよいだろう。 生活リズムも戻します。 ブログもまた","content_html":"<p>先週に卒業論文を提出し、今日その内容を学科内で発表した。\n無事合格できた旨のメールを先ほど受け取って、これで大学4年間の全ての単位を取得できる見込みになった。</p>\n<p style=\"padding-bottom: 50px\">\n大学生活は案外早く過ぎ去ったなと思いつつ、こういうのは終わってみればたいてい早く感じるものだろう。\n今の自分は大した技術力があるわけでもないし、大学4年間で大したことを身につけられた気がしないと少し前まで思っていたけれど、振り返ると4年前の自分は今よりも果てしなく無知だったことに気づくので、大学に入ってこの専攻を選んでよかった。\n</p>\n<p>最近は論文執筆に勤しんでいた。\n新年の意気込みで早寝早起きと言っておきながら最近はだいぶ夜ふかしをしていたし、本を読む目標もあまり進んでいない。\n少し読んだ本もあるが、そんな時間があるなら論文を書きましょうという感じだった。</p>\n<p style=\"padding-bottom: 50px\">\n卒業研究にあたってそこそこ論文などを読んだ。\n論文を読む機会なんて正直いままで殆ど無かったし、長い仕様書をじっくり読むみたいなのもそんなにしてこなかったので、卒業研究はそういった意味で新しいことを体験する機会だった。\n世の研究者と比べたら大したことを出来た訳ではないだろうけれど、右も左もわからないながらも、一応高等教育の最後として自分の考えをしたためた文章を書ききったことに達成感を感じている。\n</p>\n<p style=\"padding-bottom: 50px\">\nところで私は昔、理系大学生の醍醐味といえば研究室生活だろうみたいな想像をしていた。\nそういうのを心のどこか楽しみにしていたが、私の研究室はコアタイムがあるわけでもないし、新型コロナウィルスの影響で研究室には最初の1,2回しか行く機会がなかった。\n実家で一日中コンピュータを触っているのは実に快適でよいのだけれど。\nそういえば弊研究室に所属したら SINET から出れる IPv4 の固定アドレスを自由に使える権利があったのだけど、研究室内にコンピュータをセットアップすることもないまま卒業することになるので実質この権利を放棄してしまった。\n無理してでも文字通り研究室に入ってラズパイの1台でも置いてくればよかったな。\n一抹の後悔。\n</p>\n<p>というわけで駄文でした。</p>\n<p>研究が終わったらやりたいことがいくつか溜まっていたので順番に消化していきたい。\n気分症なのでいくつか既に昇華してしまったものもあるが、まあよいだろう。\n生活リズムも戻します。\nブログもまた書いていきます、今までは文章を書く時間が全て論文に奪われていたので... (これは言い訳)</p>\n<p>最後に先週公開され、卒論準備を後押ししてくれた BUMP OF CHICKEN の新曲、Flare の MV を置いてこの文章を終えます。\nおやすみなさい。</p>\n<p><div class=\"embed-youtube embed-wrapper\" style=\"text-align: center;\"><iframe class=\"embed-youtube\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pDFkg9L5wJY?feature=oembed\"></iframe></div></p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2022-12-22T16:11:31+09:00","message":"Fix: Youtube埋め込み時に、画面全体が崩れる問題を避ける\n","hash":"8216580686fcb8ec5f7ed9bf9f3d5117a3c5a1e5"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-02-19T00:29:08+09:00","message":"Add a post of dialy\n","hash":"ae46e542337c24910143add3bcb03ea0f8836dcc"}],"date_published":"2021-02-18T22:44:22+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/clip-path","url":"https://memo.yammer.jp/posts/clip-path","title":"ベジェ曲線で画像を丸っぽくくり抜く (CSS clip-path)","summary":"  <img     src=\"https://blob.yammer.jp/gather_fishes.jpg\"     style=\"clip-path:url(#bezier-curve-circle); width:300px;\"   />   <svg>     <clipPath id=\"bezier-curve-circle\" clipPathUnits=\"objectBoundingBox\">     <path d=\"       M 0 0.5       C 0 0.166, 0.166 0, 0.5 0       S 1 0.166, 1 0.5       S 0.","content_html":"<pre><code class=\"hljs language-html\">  &#x3C;img\n    src=\"https://blob.yammer.jp/gather_fishes.jpg\"\n    style=\"clip-path:url(#bezier-curve-circle); width:300px;\"\n  />\n  &#x3C;svg>\n    &#x3C;clipPath id=\"bezier-curve-circle\" clipPathUnits=\"objectBoundingBox\">\n    &#x3C;path d=\"\n      M 0 0.5\n      C 0 0.166, 0.166 0, 0.5 0\n      S 1 0.166, 1 0.5\n      S 0.833 1, 0.5 1\n      S 0, 0.833, 0, 0.5\n      Z\n    \"/>\n    &#x3C;/clipPath>\n  &#x3C;/svg>\n</code></pre>\n<p>HTML で上記のように記述すると下記のように丸っぽく画像をくり抜ける</p>\n<hr>\n<p><img\n src=\"https://blob.yammer.jp/gather_fishes.jpg\"\n style=\"clip-path:url(#bezier-curve-circle); width:300px;\"\n/>\n<svg>\n<clipPath id=\"bezier-curve-circle\" clipPathUnits=\"objectBoundingBox\">\n<path d=\"\n   M 0 0.5\n   C 0 0.166, 0.166 0, 0.5 0\n   S 1 0.166, 1 0.5\n   S 0.833 1, 0.5 1\n   S 0, 0.833, 0, 0.5\n   Z\n \"/>\n</clipPath>\n</svg></p>\n<hr>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path\">clip-path - CSS: Cascading Style Sheets | MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/SVG/Tutorial/Paths\">Paths - SVG: Scalable Vector Graphics | MDN</a></li>\n</ul>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-01-27T11:49:42+09:00","message":"Add post\n","hash":"b96dfb40fab9e61a5c1bfeadd03e67a872a944f9"}],"date_published":"2021-01-27T11:43:00+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/planck-keyboard","url":"https://memo.yammer.jp/posts/planck-keyboard","title":"Planck Keyboard を手に入れた","summary":"先月に申し込んだ Planck Keyboard が届いたので組み立てた。 Planck Keyboard とは Drop + OLKB Planck Mechanical Keyboard Kit V6 | Drop いわゆる 40%1 と言われる分類で格子配列2 のキーボードキット。 キー数が少なく(4x12個) コンパクトなキーボードである。 スイッチを取り付ける基盤である PCB と PCB に装着するケースのセットで販売されていて、アメリカの共同購入サイト Drop (Massdrop, Inc.) で購入できる。 いつでも買うことが出来るわけではなく購入希望者が集まってからまとめて","content_html":"<p>先月に申し込んだ Planck Keyboard が届いたので組み立てた。</p>\n<p><img src=\"https://blob.yammer.jp/planck-keyboard.jpg\" alt=\"planck keyboard\"></p>\n<h2>Planck Keyboard とは</h2>\n<p><a href=\"https://drop.com/buy/planck-mechanical-keyboard\">Drop + OLKB Planck Mechanical Keyboard Kit V6 | Drop</a></p>\n<p>いわゆる 40%<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup> と言われる分類で格子配列<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup> のキーボードキット。\nキー数が少なく(4x12個) コンパクトなキーボードである。</p>\n<p>スイッチを取り付ける基盤である PCB と PCB に装着するケースのセットで販売されていて、アメリカの共同購入サイト <a href=\"https://drop.com/home\">Drop (Massdrop, Inc.)</a> で購入できる。\nいつでも買うことが出来るわけではなく購入希望者が集まってからまとめて生産されるようで、しばらく前から様子を見ており12月に購入できると知って注文した。</p>\n<p>もともとは薄型の <a href=\"https://drop.com/buy/massdrop-x-olkb-planck-light-mechanical-keyboard\">Planck Light Keyboard</a> が欲しかったのだが、40%で格子配列のキーボードが買えるなら通常の Planck Keyboard でもいいかと妥協した。\n(結果満足している)</p>\n<p>現在販売されている v6 では、 ケースを 周りの高さが低い Mid-Pro と 高い High-Pro から選べる。\n加えてケースの色も選べる。\n自分は Mid-Pro の スペースグレーを選んだ。</p>\n<h2>買ったもの</h2>\n<p>キットにはキースイッチとキーキャップが付属しないので別途購入した。</p>\n<p><img src=\"https://blob.yammer.jp/planck-keyboard-and-parts.jpg\" alt=\"購入したもの\"></p>\n<p>今回購入したものは以下。</p>\n<table>\n<thead>\n<tr>\n<th>商品名</th>\n<th>個数</th>\n<th align=\"right\">単価(円)</th>\n<th align=\"right\">小計(円)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.amazon.co.jp/gp/product/B081QL9QF3/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&#x26;psc=1\">USB Type-Cホストケーブル C - C 両端L型 10cm U20CC-LL01T AINEX Amazon</a></td>\n<td>1</td>\n<td align=\"right\">792</td>\n<td align=\"right\">792</td>\n</tr>\n<tr>\n<td><a href=\"https://drop.com/buy/planck-mechanical-keyboard\">Planck Keyboard V6 (Mid-Pro, SpaceGlay)</a> (送料込)</td>\n<td>1</td>\n<td align=\"right\">$108</td>\n<td align=\"right\">11754</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.stores.jp/items/5e05d3a85b120c2ad04ccf99\">XDA PBT ブランク キーキャップ (クリーム/2個)</a></td>\n<td>16</td>\n<td align=\"right\">110</td>\n<td align=\"right\">1760</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.stores.jp/items/5d6e2e4f8606480675a98c5f\">XDA PBT ブランク キーキャップ (アップルグリーン/2個)</a></td>\n<td>4</td>\n<td align=\"right\">110</td>\n<td align=\"right\">440</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.stores.jp/items/5b6e593d5f78663893000482\">XDA PBT ブランク キーキャップ (グレー/2個)</a></td>\n<td>7</td>\n<td align=\"right\">110</td>\n<td align=\"right\">770</td>\n</tr>\n<tr>\n<td><a href=\"https://talpkeyboard.stores.jp/items/59be1a4ab1b61963180007c6\">Gateron キースイッチ Brown (トップクリア/5ピン/55g/タクタイル/10個)</a></td>\n<td>5</td>\n<td align=\"right\">450</td>\n<td align=\"right\">2250</td>\n</tr>\n<tr>\n<td>TALP KEYBOARD キースイッチ 5個以上購入で5%オフ</td>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">-110</td>\n</tr>\n<tr>\n<td>TALP KEYBOARD 送料</td>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">300</td>\n</tr>\n<tr>\n<td><strong>合計</strong></td>\n<td></td>\n<td align=\"right\"></td>\n<td align=\"right\">17956</td>\n</tr>\n</tbody>\n</table>\n<h2>組み立て</h2>\n<p>Planck Keyboard V6 は, ホットスワップ用のソケットが PCB にはんだ付けされた状態で届くので、組立時に自分ではんだ付けする必要はない。\nドライバーでネジを回し、スイッチをはめ込むだけで作れる。</p>\n<p>作り方は公式動画で説明されている。</p>\n<p><div class=\"embed-youtube embed-wrapper\" style=\"text-align: center;\"><iframe class=\"embed-youtube\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KAZglmhVuYg?feature=oembed\"></iframe></div></p>\n<p>PCB にはデフォルトでキーマップが書き込まれているが、<a href=\"https://github.com/qmk/qmk_firmware\">qmk/qmk_firmware</a>を利用して独自のキーマップを書き込むことも出来る。</p>\n<pre><code class=\"hljs language-shell\"># Ubuntu 20.04\n\n# インストール\n$ git clone https://github.com/qmk/qmk_firmware.git\n$ cd qmk_firmware\n$ make git-submodule\n$ ./util/qmk_install.sh\n\n# デフォルトのキーマップを書き込み\n# Planck Keyboard をコンピュータにUSB接続\n$ sudo make planck/rev6:default:dfu-util\n# キーボード背面のリセットスイッチを押す\n# 書き込みが終わるまで待つ\n\n# 好みのキーマップを書き込み\n$ cp -r keyboards/planck/keymaps/default keyboards/planck/keymaps/mykeymap\n$ vim keyboard/planck/keymaps/mykeymap/keymap.c    # キーマップを好みに変更\n# Planck KeyboardをコンピュータにUSB接続\n$ sudo make planck/rev6:mykeymap:dfu-util\n# キーボード背面のリセットスイッチを押す\n# 書き込みが終わるまで待つ\n</code></pre>\n<p>買ったキースイッチは無刻印でホームポジションの印がないので、かわりに家にあった透明なシールを穴あけパンチでくり抜いて貼り付けている。</p>\n<h2>感想</h2>\n<p>Planck Keyboard は組み立ても簡単で、作りもしっかりしている。\n剛性感があるのでキーをタイプしても安定しているので安心感がある。</p>\n<p>アルミケースの質感もいい感じ。\n事前の写真ではテカテカして安っぽい感じに見えていたのだが、実物はアルミの目が細かくて思っていたより落ち着いた風合いだった。</p>\n<p>一緒に <a href=\"https://talpkeyboard.stores.jp\">TALP KEYBOARD</a> で買ったキーキャップの質感と色味も絶妙で、やさしい見た目になった。</p>\n<p>キースイッチに選んだ Gateron 茶軸の押し心地もとても良い。\nスイッチを押すとストンと素直に下まで落ちてくれるし、別のキーボードに使っている Kailh ロープロファイル<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>のスイッチに比べてに比べて深く沈み込むのも良い。\nいままでは薄型の Kailh Choc のほうが自分に合っているかなと思っていたけど、今回 Cherry MX 互換<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup>のキースイッチを使ってみて、すでに持っているキーボードもキースイッチを変えたくなってきた。</p>\n<p>尊師スタイル<sup><a href=\"#user-content-fn-5\" id=\"user-content-fnref-5\" data-footnote-ref aria-describedby=\"footnote-label\">5</a></sup>で使うために、短い USB ケーブルも合わせて買った。\nPlanck Keyboard にはキーボード裏に貼る滑り止めの足が付属するが、これを貼らずに裏面が平らなまま Mac の 内蔵キーボード上に載せると、載せた上の Planck Keyboard をタイプしても内蔵キーボードは反応しないで使える。</p>\n<p>前年に <a href=\"https://memo.yammer.jp/posts/lily58-pro-build-log/\">Lily58 というキーボードを作って</a>からというもの、row-staggered<sup><a href=\"#user-content-fn-6\" id=\"user-content-fnref-6\" data-footnote-ref aria-describedby=\"footnote-label\">6</a></sup> なキーボードに違和感を感じるようになって、持ち運びのしやすい格子配列のキーボードを欲していた。\nPlanck Keyboard を手に入れたおかげで気軽にこたつにキーボードを持ち込むことが出来て、こたつ PC 時間が捗りそう。</p>\n<p><img src=\"https://blob.yammer.jp/planck-on-macbook.jpg\" alt=\"Macの上に置いたPlanck Keyboard\"></p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://olkb.com/collections/planck\">The Planck Keyboard – OLKB</a></li>\n<li><a href=\"https://github.com/qmk/qmk_firmware/blob/master/keyboards/planck/readme.md\">qmk_firmware/readme.md at master · qmk/qmk_firmware</a></li>\n<li><a href=\"https://leopardgecko.hatenablog.com/entry/2017/09/13/234549\">PlanckキーボードをMacでカスタマイズしてみよう。　＜導入編＞ - leopardgeckoのブログ</a></li>\n</ul>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>一般的なキーボードのキー数に対する割合が40% (40-50個ほど) のキーボードのこと。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>列ごと、行ごとにキー配置が揃っているキーボードの配列。othroliner ともいう。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>自作キーボードに使われる薄型のキースイッチの規格。スイッチを押したときに沈み込む深さであるキーストロークは3mm。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>自作キーボードに使われる最も一般的なキースイッチの規格。キーストロークは4mmが一般的。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-5\">\n<p>ノートパソコンの内蔵キーボードの上に外付けキーボードを置く方式。 <a href=\"#user-content-fnref-5\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-6\">\n<p>行ごとにキー配置が横にずれている、一般的なキーボードの配列。 <a href=\"#user-content-fnref-6\" data-footnote-backref=\"\" aria-label=\"Back to reference 6\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2022-12-22T16:11:31+09:00","message":"Fix: Youtube埋め込み時に、画面全体が崩れる問題を避ける\n","hash":"8216580686fcb8ec5f7ed9bf9f3d5117a3c5a1e5"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2021-01-09T17:48:47+09:00","message":"Add a post 'planck keyboard'\n","hash":"b2276e908080e7b533c5c7068bce7a66ce1fe9be"}],"date_published":"2021-01-09T15:07:39+09:00","tags":["自作キーボード"]},{"id":"https://memo.yammer.jp/posts/2021-target","url":"https://memo.yammer.jp/posts/2021-target","title":"2021年の目標「早寝早起き、本を読む」","summary":"今年の目標は「早寝早起き、本を読む」とする。 生活リズムの改善 目標の前半部分「早寝早起き」について。 2020年は大学の講義中心の生活から研究中心の生活に移り、殆ど自宅で過ごしたこともあって夜型の生活が続いた。 寝るのが惜しくて夜ふかしをして、起きるのが遅くなることで更に眠くなる時間が遅くなり、、という悪循環から朝4時頃に寝て昼頃に起きるのが常態化していた。(もっと遅いことも多々) これに対し、今年から社会人になるのでこのままでは良くないと思い12月中頃から生活リズムを改善する試みが始まった。 22歳になって「早寝早起き」という小学生みたいな目標を立てているが、今まで生活リズムを制御すること","content_html":"<p>今年の目標は「早寝早起き、本を読む」とする。</p>\n<h2>生活リズムの改善</h2>\n<p>目標の前半部分「早寝早起き」について。</p>\n<p>2020年は大学の講義中心の生活から研究中心の生活に移り、殆ど自宅で過ごしたこともあって夜型の生活が続いた。\n寝るのが惜しくて夜ふかしをして、起きるのが遅くなることで更に眠くなる時間が遅くなり、、という悪循環から朝4時頃に寝て昼頃に起きるのが常態化していた。(もっと遅いことも多々)</p>\n<p>これに対し、今年から社会人になるのでこのままでは良くないと思い12月中頃から生活リズムを改善する試みが始まった。\n22歳になって「早寝早起き」という小学生みたいな目標を立てているが、今まで生活リズムを制御することは自分にとって結構な難題であった。</p>\n<p>振り返れば昔から朝に弱く学校に遅刻したりしていたし、中高の部活を選ぶときの最優先条件は朝練がないことだった。\n記憶に残っている出来事として、中学3年の登校初日に寝坊し、急いで学校に行くと頭に寝癖がついたままだったため、これが元ネタでそのまま学級目標が「Neguse」になったことがある。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>高校になっても朝が不安で、修学旅行前夜には家中の目覚まし時計をかき集めてベッドの周りに包囲陣を形成していたし、大学のサークル仲間と旅行に行くと「大音量の目覚ましを沢山設定するくせに一人だけ起きないから煩くて迷惑」との声を頂いた。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<p>そんな人間でも、最近は一応毎日同じくらいの時間に就寝と起床が出来ている。\n日付が変わる前に寝て7時半に起きることにしていて、3週間くらいは概ね継続できたことになる。\n2020年はこれを続けることを目標の一つとする。</p>\n<h2>早起きのコツ</h2>\n<p>一定の生活リズムを継続できている要素には次の2つがあると考えられる。</p>\n<ul>\n<li>早く寝る</li>\n</ul>\n<p>生活リズムを一定に保つためには、同じ時間に起きることよりも同じ時間に寝ることを心がけることのほうが大切だと気づいた。\n寝ているときに目覚ましに気づくかどうかは自らの意思でないが (意識がないから。<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>)、一方で寝る時間は自らの意思で決められる。</p>\n<p>どうも夜のほうが作業が捗るような気が夜ふかしをしがちだったが、その日やることが残っているかどうかを無視して予定の時間になったら寝る<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup> ことで、同じ時間に起きれるようになった。\n夜のほうが作業が捗るのも多分気のせいで、早い時間に起きれば夜でなくても集中できる。</p>\n<ul>\n<li>起床後がんばらない</li>\n</ul>\n<p>今までの数々の(早起きチャレンジ)失敗の原因は、朝の時間を有効に活用しようとしたことにあった。\n早起きして何かをやろうと自分に課していたのが問題だった。\n布団は暖かいしこの時期は特に出たくなくなる。\n起きてすぐやらねばならぬタスクがあるのは気が重いし「嫌だなあ」と考えてるうちに2度寝するのがオチだ。</p>\n<p>そこで朝に何かを課すのをやめた。「目が覚めたら良し」とすることで気が楽になる。\nついでに「起きたら2度寝しないようにベッドからすぐに出る」ことも課さない。\n起きたら目が冴えるまではスマホで Twitter や動画でも見ながらぬくぬくして、程よい頃合いでベッドから出れば良いとする。</p>\n<p>これくらいの温度感でとにかく寝ることと目が覚めたらまずは良しとすることだけを自分に課すことで今後も継続しようと試みている。</p>\n<h2>粗読と精読の使い分け</h2>\n<p>目標の後半部分「本を読む」について。</p>\n<p>昨年末の記事 (<a href=\"/posts/2020-github-repositories/\">自分のGitHubリポジトリで振り返る2020年</a>) にあるように、またこのブログの記事を書くなども含めて2020年は継続してアウトプットに取り組んだのに対し、インプットが弱かったと感じる。</p>\n<p>そこで本年はアウトプットについては継続しつつ<sup><a href=\"#user-content-fn-5\" id=\"user-content-fnref-5\" data-footnote-ref aria-describedby=\"footnote-label\">5</a></sup>、本を読むことでインプットを増やしたい。\n手始めにソフトウェア開発に関わる本の積読を減らすため<a href=\"/posts/readable-code/\">リーダブルコードに手を付けた</a>。</p>\n<p>本を読むにあたっては、精読と粗読の使い分けを心がけようと思う。\n以前の記事 (<a href=\"/posts/webteckbook/\">積読本だった\"Webを支える技術\"を読んだ感想と、本を読むための心がけ</a>) でも書いたが、精読ではなくまずは最後まで読み切り、何かあったら当該の本を読み直せばよい、といった読み方を意識する。</p>\n<p>そうでもないと永遠に積読が減らない。</p>\n<p>1冊の本から得られるものを最大化するより、学習時間あたりの得られるものを最大化すべきで、このためには最初に精読するよりも粗読と振り返りの精読のほうが大切だろうと思っている。</p>\n<h2>まとめ</h2>\n<p>家族に「年始に目標をたてても年末には忘れてるんだよね」と言われたので、忘れないようにそして心がけられるように宣言しておこうと思い記事を書くに至った。</p>\n<p>「早寝早起き、本を読む」やっていきたい。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>頭についた寝癖のように各々の個性を発揮するみたいな意味付けだったと思う。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>ここまで全て実話。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p>これは<a target=\"_blank\" href=\"https://twitter.com/hirox246\">ひろゆき</a>氏の受け売りで、よく寝坊を回避するのは不可能である理由の説明に使われる。 <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>そうはいってもついつい夜ふかししがちなのでこの点は強い心が必要。あと風呂に入る時間を早めることも大切。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-5\">\n<p>アウトプットするコードと文章の質については高めていきたい。 <a href=\"#user-content-fnref-5\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2021-01-05T19:47:58+09:00","message":"Publish a post '2021-target'\n","hash":"51bcc87674bd42aa8081e9c724495506f98014d2"},{"date":"2021-01-02T22:50:46+09:00","message":"Add a post '2021-target'\n","hash":"53ac1b7ab93a76d8785db918f296b7820ba59cf6"}],"date_published":"2021-01-02T16:08:22+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/readable-code","url":"https://memo.yammer.jp/posts/readable-code","title":"リーダブルコードを読んだ感想","summary":"2021年最初の読書はリーダブルコード。 今年は本をたくさん読みたいので景気づけも兼ねて元日のうちに読み始め、今日の午前に読み終えたので感想を綴る。 本の概要 リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice) | Dustin Boswell, Trevor Foucher, 須藤 功平, 角 征典 |本 | 通販 | Amazon プログラマーに向けた、読みやすいコードを書くためのバイブルといわれることもある本である。 表紙が楽譜のデザインであり、ソフトウェアにおける「コード」と音楽における「コード」(音楽符号) をかけてい","content_html":"<p>2021年最初の読書はリーダブルコード。\n今年は本をたくさん読みたいので景気づけも兼ねて元日のうちに読み始め、今日の午前に読み終えたので感想を綴る。</p>\n<h2>本の概要</h2>\n<p><a href=\"https://www.amazon.co.jp/dp/4873115655/ref=cm_sw_r_cp_ep_dp_K21dCbS19WG0N\">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice) | Dustin Boswell, Trevor Foucher, 須藤 功平, 角 征典 |本 | 通販 | Amazon</a></p>\n<p>プログラマーに向けた、読みやすいコードを書くためのバイブルといわれることもある本である。\n表紙が楽譜のデザインであり、ソフトウェアにおける「コード」と音楽における「コード」(音楽符号) をかけているのがポイント。</p>\n<p>プログラムを書く人間なら読むべき、としばらく前に教えていただいたが積読されていた本である。\n英語版は無料で PDF が手に入る。\n日本語訳版は3000円くらいだが有名な本なので図書館とかに割と置いてありそう。\n(弊学にはあった。)</p>\n<h2>感想</h2>\n<p>本書は良いコードを書くための方法を具体的に説明しており、そのまま実践できそうな内容が詰め込まれている。</p>\n<p>しかしながら沢山のテクニックが示されておりその個々を読みながら納得することは出来ても、今の時点では自らの血肉となった気がしない。\n実際にコードを書くときに書かれた内容全てを実現することはすぐには出来ないだろう。\n定期的に見直して意識を続けるほかない。</p>\n<p>幸いにも各章のさいごに「まとめ」が付いており、これがとても良くできている。\nまとめをインデックスとしてまずは迷ったときに本書に戻れるようにしておきたい。</p>\n<p>特に5章, 6章のコメントに関する言及は興味深かった。\n本書では、よく言われる言葉「コメントには WHAT ではなく (あるいは HOW ではなく) ではなく WHY を書こう」ではなく「コードの理解するのに役立つものなら何でも良いから書こう」と説明されていた。</p>\n<p>私は以前はコメントを沢山書いていた。\n命名については深く考えておらず、ソースコード内に日本語で説明できる部分があるなら助かると思っていたからだ。\nしばらくして Git を学び、命名の大切さを知り、以前コメントに書いていたようなことは命名で表現できるのではないかと思うようになった。\nさらに無駄なコメントは悪である<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>という考えを知った。</p>\n<p>これらは勿論大切なことではあるが、必要以上にコメントを忌み嫌ってほとんど書かなくなったように思う。\n自分の書いたプログラムをあとから変更しようとするときにコードを理解する負担が増えたような気がして気づいた。</p>\n<p>こういった曲がった考えを直して正しいスタンスを説明してくれているのが本書だと感じた。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>\nコメントをどのように書くか悩んだときは、5章4説にある「とにかく書き始める」が有効だろう。\nまず頭で思ったことをそのまま書き出してから細かく改善することで良いコメントを作ることを勧めている。</p>\n<p>こういった一つ一つの事柄をコツコツ実践していきたい。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>コードを読んですぐに分かるようなことをコメントに書くのは良くない。画面を専有する、コードを書き換えるときに一緒に書き換えなければならず負担になる、書換えを忘れてコードの内容とコメントの内容が乖離していたら読み手は混乱する、などの理由から。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>そもそも無駄なコメントは必要ないと指摘してくださった方は同時にあわせて「リーダブルコードを読んだほうが良い」と仰っていた。 それを積読のまま消化しなかった自分が悪い。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-05T19:47:55+09:00","message":"注釈内の改行を削除してremark-footnoteで正しく変換されるよう修正\n","hash":"1741da28aa87b809153d2c6799f500b28fc236a8"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2021-01-02T22:03:39+09:00","message":"Add a post 'readable-code'\n","hash":"b26bea9028efab6990f69ef0f8877fedaee9cf35"}],"date_published":"2021-01-02T15:49:50+09:00","tags":["本"]},{"id":"https://memo.yammer.jp/posts/2020-github-repositories","url":"https://memo.yammer.jp/posts/2020-github-repositories","title":"自分のGitHubリポジトリで振り返る2020年","summary":"今年コミットした GitHub のリポジトリを順にみながら2020年の個人開発を振り返ってみる。 実は去年もやろうとしていた企画1、今年こそ年内に公開するぞ。 リポジトリ一覧の取得 去年の記事では API を curl で取得していた2が、今年は GitHub の公式 CLI である gh を使って取得することとする。 jq と gh をインストールし、 ~/.config/gh/config.yml の aliases キーに、次のような内容を追記する。 aliases:     repos: |         !gh api --paginate graphql -f owner=\"$1","content_html":"<p>今年コミットした GitHub のリポジトリを順にみながら2020年の個人開発を振り返ってみる。</p>\n<p>実は去年もやろうとしていた企画<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>、今年こそ年内に公開するぞ。</p>\n<h2>リポジトリ一覧の取得</h2>\n<p>去年の記事では API を curl で取得していた<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup>が、今年は GitHub の公式 CLI である <a href=\"https://github.com/cli/cli\">gh</a> を使って取得することとする。</p>\n<p><a href=\"https://github.com/stedolan/jq\">jq</a> と gh をインストールし、 <code>~/.config/gh/config.yml</code> の aliases キーに、次のような内容を追記する。</p>\n<pre><code class=\"hljs language-yaml\">aliases:\n    repos: |\n        !gh api --paginate graphql -f owner=\"$1\" -f query='\n          query($owner: String!, $per_page: Int = 100, $endCursor: String) {\n            repositoryOwner(login: $owner) {\n              repositories(first: $per_page, after: $endCursor, ownerAffiliations: OWNER) {\n                nodes { nameWithOwner, updatedAt }\n                pageInfo { hasNextPage endCursor }\n              }\n            }\n          }\n        ' | jq '.data.repositoryOwner.repositories.nodes[] | .updatedAt + \" \" + .nameWithOwner' -r | sort\n</code></pre>\n<p>ログインして、先程登録したエイリアスでリポジトリ一覧を取得する。</p>\n<pre><code class=\"hljs language-shell\">$ gh auth login\n$ gh repos | grep '2020' > repos.txt\n</code></pre>\n<h2>リポジトリを一つづつ振り返る</h2>\n<p>以下順番にコミットした GitHub リポジトリを振り返っていく。</p>\n<h3>lovelab-api</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/lovelab-api\">yammerjp/lovelab-api</a> : API server of lovelab with express.js</li>\n<li><a href=\"https://github.com/yammerjp/lovelab-batch\">yammerjp/lovelab-batch</a> : Batch server of lovelab with node.js</li>\n</ul>\n<p>2019年10月から2020年1月にかけての iPhone アプリを開発する演習授業に合わせて作った、TypeScript 製の API サーバ。\nデータベースを使ったサーバサイドアプリケーションを一人で作ったのは初めてで、サーバ内でどのような処理をしているか、また REST API とはどのようなものかなどの全体を知ることができた。</p>\n<p>ドキュメントは手書きしたがエンドポイントが意外と多く<sup><a href=\"#user-content-fn-3\" id=\"user-content-fnref-3\" data-footnote-ref aria-describedby=\"footnote-label\">3</a></sup>、書くのが大変で中身も整っておらず良い出来とは言えない。\n今思えば Swagger などを使うべきだっただろう。</p>\n<p>認証系は簡素なもので「ID とパスワードの対で新規登録する」「ログイン時にアクセストークンを発行する」といった動作を自前で実装している。\n自前で実装したのは認証認可のしくみを理解していなかったからだ。\nスマートフォン用の API においてどのように認証認可が行われるか、HTTP の中でそれはどのように表現されるかがよくわかっておらず、ライブラリを使おうとしても「よくわからんな」という気持ちになった。</p>\n<p>そこで、授業でやっていることもあり (リリースまでは求められていない)、良い機会だと思って一連の流れを作ることにした。\n「車輪の再発明は無駄」「セキュリティホールの発生に繋がるので自前での実装は避けるべき」といった意見はごもっともだが、作ってしくみを理解するという点ではとても助かった。\n普通なら Express.js に使える認証ミドルウェアの Passport.js を使ったり Firebase Authentication や Auth0 などに任せてしまうのがいいだろう。</p>\n<p>そういえば Dockerfile を自分で初めて書いたのもこのアプリケーションだった。\nDocker は <a href=\"https://www.amazon.co.jp/dp/B07BHK5KX7/ref=dp-kindle-redirect?_encoding=UTF8&#x26;btkr=1\">プログラマのためのDocker教科書 第2版</a> を読んで学び, EC2 上に docker-compose を使って展開していた。</p>\n<h3>17ti.me</h3>\n<p>2月に作った、大学の研究室配属前に学生間で希望を調整するために非公式で作った Web アプリケーション。\n学内の情報がハードコーディングされているので公開していない。\n最終的に対象者の8割以上の人に利用していただいた。感謝。</p>\n<p>成績と希望を集計するもので、Vue.js と Firebase (Realtime Database, Authentication), Netlify を利用している。\n大学個人に付与されるメールアドレスを用いて Firebase Authentication でログイン機能を設け, Realtime Database 上に集計情報を記録した。</p>\n<p>Firebase Authentication は 前月に作った <a href=\"#lovelab-api\">lovelab-api</a> の認証と比べて簡単だし管理画面も良く出来ていて感動した。\nFirebase Realtime Database も 全体を1つの JSON として扱うシンプルなデータベースをクライアント側から読み書きできるので楽に作れて素晴らしかった。\n車輪の再発明のあとに最新式の自動車に乗った気分。</p>\n<h3>dotfiles</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/dotfiles\">yammerjp/dotfiles</a> : my .vimrc, .zshrc, and so on...</li>\n<li><a href=\"https://github.com/yammerjp/dot.yammer.jp\">yammerjp/dot.yammer.jp</a> : HTTP redirect server to download shell script to initialize dotfiles</li>\n</ul>\n<p>2020年は私が dotfiles に入門した年でもあった。</p>\n<p>dotfiles とは <code>~/.vimrc</code> や <code>~/.bashrc</code> などの各アプリケーション向けの個人設定ファイルの総称で、よくホームディレクトリの中にドットで始まるファイル名で保存されることからこう呼ばれる。\n複数のコンピュータで設定を共有するために dotfiles を GitHub で管理する Tips があり、Qiita で知ってやってみたいと思っていたのだ。</p>\n<p>3月の春休みに、4月の研究室配属時に研究室のコンピュータのセットアップを爆速で終わらせることを目指して作り始めた。<sup><a href=\"#user-content-fn-4\" id=\"user-content-fnref-4\" data-footnote-ref aria-describedby=\"footnote-label\">4</a></sup></p>\n<p>最もシンプルな dotfiles は 設定ファイルを別ディレクトリで git の管理下に置きホームディレクトリにシンボリックリンクを貼るものであるが、これにとどまらず様々な機能をもたせることもできる。\n私のリポジトリでは、アプリケーションの一括インストールや OS の設定変更、設定ファイルの自動配置などを行うスクリプトも一緒にまとめて管理している。\nOS は macOS と Ubuntu に対応させてそれぞれ判断してスクリプトが実行されるし、ついでに GitHub Actions で CI を回したりもしている。</p>\n<p>dotfiles を始めてよかったのはシェルに親しめたことだ。\nまずシェルスクリプトを書く機会が圧倒的に増えた。\nそれまでは普段書かないので if の記法ですら毎度 ggっていたくらいだったが、dotfiles を凝りだすとシェルスクリプトを書く必要が出てきて覚えた。</p>\n<p>他にも<code>.vimrc</code>を改造してプラグインを入れたり、シェルにエイリアスもたくさん貼るようになって便利になった。\n設定ファイルを壊してもすぐ直せるので色々試せるのが良い。</p>\n<h3>pdef</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/pdef\">yammerjp/pdef</a> : Patch script generator of Mac OS X User Defaults</li>\n<li><a href=\"https://github.com/yammerjp/homebrew-tap\">yammerjp/homebrew-tap</a> : yammerjp's collection of Homebrew (aka, Brew) \"formulae\"</li>\n</ul>\n<p>dotfiles の開発にあわせて、macOS の設定を保持する UserDefaults をシェルから書き換えたくなって作ったツール。\n詳細は当時のブログ記事に書いている。</p>\n<p>書いた記事:\n<a href=\"/posts/pdef/\">Macの設定を自動化するdefaultsコマンドと、それを助けるpdef</a>\n/ <a href=\"/posts/plist/\">(余談) User Defaultsとproperty list(plist)</a></p>\n<h3>memo.yammer.jp</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/memo.yammer.jp\">yammerjp/memo.yammer.jp</a> : my memos. <a href=\"https://memo.yammer.jp/\">https://memo.yammer.jp/</a></li>\n</ul>\n<p>このブログ (<a href=\"https://memo.yammer.jp\">memo.yammer.jp</a>) と個人のページ (<a href=\"https://yammer.jp\">yammer.jp</a>) を用意したのも 2020年。</p>\n<p>このブログは<a href=\"https://basd4g.hatenablog.com\">やんまーのブログ</a>とは別にメモや作業記録を雑に投稿するために作ったのに、使い分けが出来ておらず完全に迷走している。\nでも記事を書くハードルが下がったのはとても良くて「とりあえず雑に投稿しておくか」と自分で思える。</p>\n<p>Hugo で出来ていて、最近デザインの変更と OGP 対応をした。\n拡張したい機能がいくつかあるのでそのために来年は勉強も兼ねて Hugo から Next.js に置き換えたい。</p>\n<h3>yammer.jp</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/yammerjp.github.io\">yammerjp/yammerjp.github.io</a> : A web page including links for my SNS and Web sites</li>\n<li><a href=\"https://github.com/yammerjp/rss-republish.yammer.jp\">yammerjp/rss-republish.yammer.jp</a> : Republish RSS feeds with Vercel</li>\n</ul>\n<p><a href=\"https://yammer.jp\">個人のページ</a>。\n最初は linktree<sup><a href=\"#user-content-fn-5\" id=\"user-content-fnref-5\" data-footnote-ref aria-describedby=\"footnote-label\">5</a></sup> を真似して SNS のユーザページのリンクなどを含む HTML と CSS だけのページをおいていた。\n最近作り変えて自己紹介と記事の一覧も表示している。</p>\n<h3>はてなブログ</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/gimonfu\">yammerjp/gimonfu</a> : Manage hatena-blog articles</li>\n<li><a href=\"https://github.com/yammerjp/yammerjp.hatenablog.com\">yammerjp/yammerjp.hatenablog.com</a> : Hatenablog articles</li>\n<li><a href=\"https://github.com/yammerjp/blog.yammer.fun\">yammerjp/blog.yammer.fun</a> : Redirect old blog to new blog</li>\n<li><a href=\"https://github.com/yammerjp/hatenablog-post\">yammerjp/hatenablog-post</a> : Post article of markdown file to hatena-blog.</li>\n</ul>\n<p>去年 Nuxt.js で作ったブログをはてなブログに移行した。\n移行にあたって、画像を AWS S3 に移したり、旧ドメインをリダイレクトしたり (yammerjp/blog.yammer.fun)、はてなブログの記事管理 CLI (yammerjp/gimonfu)を作ったりした。</p>\n<p>最初は一括投稿のために hatenablog-post という CLI ツールを作ったが、それ以外の機能も欲しくなって gimonfu という CLI ツールに発展した。\ngimonfu は初めて npm publish したが、インターネット上のどこかで使ってくれている人がいるようで嬉しい。</p>\n<p>書いた記事: <a href=\"https://qiita.com/yammerjp/items/1a38857f6bafb20f065d\">gimonfu で、はてなブログの記事を GitHub と同期する - Qiita</a></p>\n<h3>willani</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/willani\">yammerjp/willani</a> : C Compiler</li>\n</ul>\n<p>2020年に一番時間を費やしたのが C コンパイラの willani。\n5月から2ヶ月くらい作って7月半ばに止まっているが、一応コンパイラ自体のセルフホストは達成した。\n(プリプロセッサが未完成。)\nまた気が向いたら続きをやりたい。</p>\n<p>自作したことで今までブラックボックスだったコンパイラがどんな動作をしているか知れて楽しかった。</p>\n<p>書いた記事:\n<a href=\"/posts/willani-start/\">数日前からCコンパイラを書き始めた。</a>\n/ <a href=\"/posts/willani-compliperbook-finished/\">自作Cコンパイラの途中経過</a>\n/ <a href=\"/posts/willani-try-selfhost/\">自作コンパイラのセルフホストに挑戦中</a>\n/ <a href=\"/posts/willani-for-stmt-bug/\">自作コンパイラのfor文バグ</a>\n/ <a href=\"/posts/willani-struct-alignment/\">C言語の構造体メンバのアライメント (x86_64, Linux (System V ABI))</a></p>\n<h3>mopm</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/mopm\">yammerjp/mopm</a> : Mopm (Manager Of Package Manager) is meta package manager for cross platform environment.</li>\n<li><a href=\"https://github.com/yammerjp/mopm-defs\">yammerjp/mopm-defs</a> : mopm package definition yaml files</li>\n<li><a href=\"https://github.com/yammerjp/mopm-defs-test\">yammerjp/mopm-defs-test</a></li>\n</ul>\n<p>既存のパッケージマネージャに不満を持ったので作り始めたソフトウェアのインストール支援ツール。\nGolang の入門も兼ねて秋に作り始めたが、しばらく進めていくと「これは HomeBrew の劣化版では？」という気がしてきて手が止まっている。</p>\n<h3>その他</h3>\n<p>その他。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/regex-visualizer\">yammerjp/regex-visualizer</a>, <a href=\"https://github.com/yammerjp/regex2dfa\">yammerjp/regex2dfa</a> ... 正規表現をグラフで描画するツール</li>\n<li><a href=\"https://github.com/yammerjp/pl0i\">yammerjp/pl0i</a>, <a href=\"https://github.com/yammerjp/pl0i\">yammerjp/cmm</a> ... 大学の教科書(コンパイラの講義)で題材とされた言語の拡張</li>\n<li><a href=\"https://github.com/yammerjp/competitive-programming\">yammerjp/competitive-programming</a> ... 競技プログラミングを解いたときのコードを載せるリポジトリ (全然解いていない)</li>\n<li><a href=\"https://github.com/yammerjp/java-design-pattern-multi-thread\">yammerjp/java-design-pattern-multi-thread</a> ... 輪講で読んでいた本の実践 (中断)</li>\n<li><a href=\"https://github.com/yammerjp/md-prev\">yammerjp/md-prev</a>, <a href=\"https://github.com/yammerjp/md-server\">yammerjp/md-server</a> ... Markdown で書いた記事の確認用アプリケーション</li>\n<li><a href=\"https://github.com/yammerjp/kozos\">yammerjp/kozos</a> 2019年4月に買い牛歩の歩みで進めている OS 自作、<a href=\"https://www.amazon.co.jp/12%E3%82%B9%E3%83%86%E3%83%83%E3%83%97%E3%81%A7%E4%BD%9C%E3%82%8B%E7%B5%84%E8%BE%BC%E3%81%BFOS%E8%87%AA%E4%BD%9C%E5%85%A5%E9%96%80-%E5%9D%82%E4%BA%95-%E5%BC%98%E4%BA%AE/dp/4877832394\">12ステップで作る組込みOS自作入門</a>。 やらねば。</li>\n<li><a href=\"https://github.com/yammerjp/solar-log\">yammerjp/solar-log</a>, <a href=\"https://github.com/yammerjp/solar-web\">yammerjp/solar-web</a> ... 家庭用太陽光発電システムのロギングと集計用アプリケーション</li>\n<li><a href=\"https://github.com/yammerjp/md2hiki\">yammerjp/md2hiki</a> ... Markdown 記法の文章を hiki 記法に置換するスクリプト</li>\n<li><a href=\"https://github.com/yammerjp/cat\">yammerjp/cat</a> ... C 言語で cat コマンドを実装してみる試み</li>\n<li>yammerjp/album-shelf, yammerjp/album-shelf.rb, yammerjp/rails-micro-blog (プライベートリポジトリ) ... Ruby on Rails と React で画像を管理する Web アプリケーションを作りたかった (中断)</li>\n<li><a href=\"https://github.com/yammerjp/ogp-getter\">yammerjp/ogp-getter</a> ... OGP の情報を抽出するアプリケーション</li>\n<li><a href=\"https://github.com/yammerjp/armyknife\">yammerjp/armyknife: Shell script snippets</a> ... bash製のシェルスクリプトで使えるツール群 (を作る予定)</li>\n<li><a href=\"https://github.com/yammerjp/pocket2retweet\">yammerjp/pocket2retweet</a> ... Pocket に保存したツイートをリツイートするスクリプト (<a href=\"http://localhost:1313/posts/pocket2retweet/\">ブログ記事</a>)</li>\n<li>yammerjp/keepa (プライベートリポジトリ) ... 日記用のWebアプリケーション (<a href=\"https://basd4g.hatenablog.com/entry/2020/12/02/124040\">ブログ記事</a>))</li>\n<li><a href=\"https://github.com/yammerjp/ryu-http-routing\">yammerjp/ryu-http-routing</a> ... 卒論の検証用</li>\n</ul>\n<p>...</p>\n<p>この他にも2020年に手を付けていた自分のリポジトリやフォークしたリポジトリがあるが、ここでは省略する。</p>\n<h2>総括</h2>\n<h3>良かったこと</h3>\n<p>2020年はコロナで家にいたということもあり、自分の時間がとれて継続的に何かしらを作っていた気がする。(後半は研究のために前半ほどの勢いはなかったが。)\n昨年ある面接で「作ったものはもっと公開しよう」とアドバイスをもらった事があり、それに従ってなるべくパブリックリポジトリで公開するようにしていた。</p>\n<p>結構飽きずにキリのいいところまで作り続けられた。\nそのおかげで npm publish や、HomeBrew の Formulae としての公開に繋がった。</p>\n<p>また、自分が作りたいものを作るときに新しい技術に少しずつ手を広げていけたように思う。</p>\n<h3>改善したいこと</h3>\n<p>「コードを読む機会が少ない」</p>\n<p>これに尽きると思う。\nOSS などの他人の書いたコードを読む機会が全然なくて、どこから手をつけていいのかもわからない。\nコードリーディングってどうやってするんでしょう？...\n働き始めたら他人のコードを必然的に読むことになると思うが、結構不安。</p>\n<h3>来年も</h3>\n<p>ものを作るのは楽しい。\n今年ほど時間の余裕がないだろうが、来年も新しいことを学ぶためにも何か作りたい。\n作りたいものは50個くらいある<sup><a href=\"#user-content-fn-6\" id=\"user-content-fnref-6\" data-footnote-ref aria-describedby=\"footnote-label\">6</a></sup>。</p>\n<p>以上。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><a href=\"/posts/2019-github-repositories/\">リポジトリで振り返る2019年 – memo.yammer.jp</a> <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>去年のように API をcurlで叩くなら、basic 認証ではなくアクセストークンで行う必要がありそう。<a href=\"https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/\">Basic認証は廃止されたはず。</a> <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-3\">\n<p><a href=\"https://github.com/yammerjp/lovelab-api/blob/master/documents/specification/detail/index.md\">lovelab-api のドキュメント</a> <a href=\"#user-content-fnref-3\" data-footnote-backref=\"\" aria-label=\"Back to reference 3\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-4\">\n<p>結局新型コロナウィルス感染症の影響でリモートになったので研究室のコンピュータをセットアップすることはないまま卒業しそうである。 <a href=\"#user-content-fnref-4\" data-footnote-backref=\"\" aria-label=\"Back to reference 4\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-5\">\n<p><a href=\"https://linktr.ee\">linktree</a> は SNS の自分のページへのリンクなどをまとめて表示する Webページを作成できるサービス。 <a href=\"#user-content-fnref-5\" data-footnote-backref=\"\" aria-label=\"Back to reference 5\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-6\">\n<p>自分のメモの中に作りたいアプリケーションのネタ帳があり、そこに書かれた数。 <a href=\"#user-content-fnref-6\" data-footnote-backref=\"\" aria-label=\"Back to reference 6\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-12-31T18:34:47+09:00","message":"Add a post '2020-github-repositories'\n","hash":"04f4516f39f3f381ad27b0fc2c5bb924f4e0ef64"}],"date_published":"2020-12-31T18:18:37+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/hugo-url-encode","url":"https://memo.yammer.jp/posts/hugo-url-encode","title":"HugoでURLをパーセントエンコード (CloudinaryでOGP画像生成)","summary":"Hugo で Cloudinary1 を用いた OGP 画像生成のため日本語を URL に埋め込みたい。 埋め込みのために文字列をパーセントエンコード2 する方法を記す。 方法 Hugo のテンプレートの中で $string 変数に文字列が格納されているとき、次の表記で変数内の文字列をパーセントエンコードして出力できる。 {{- replace (substr (querify  \"a\" $string) 2) \"+\" \"%20\" -}} 例えば OGP 画像のためURLに日本語文字列を埋め込むのは次のようにして実現できる {{ $title := \"埋め込む文字列\" }} <meta   p","content_html":"<p>Hugo で Cloudinary<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup> を用いた OGP 画像生成のため日本語を URL に埋め込みたい。\n埋め込みのために文字列をパーセントエンコード<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup> する方法を記す。</p>\n<h2>方法</h2>\n<p>Hugo のテンプレートの中で <code>$string</code> 変数に文字列が格納されているとき、次の表記で変数内の文字列をパーセントエンコードして出力できる。</p>\n<pre><code>{{- replace (substr (querify  \"a\" $string) 2) \"+\" \"%20\" -}}\n</code></pre>\n<p>例えば OGP 画像のためURLに日本語文字列を埋め込むのは次のようにして実現できる</p>\n<pre><code>{{ $title := \"埋め込む文字列\" }}\n&#x3C;meta\n  property=\"og:image\"\n  content=\"https://res.cloudinary.com/basd4g/image/upload/{{- replace (substr (querify  \"a\" $title) 2) \"+\" \"%20\" -}}/v1608780036/memo-basd4g-net-ogp.png\"\n/>\n</code></pre>\n<h2>経緯と補足</h2>\n<p>上記の方法は少々トリッキーである。\n私の調べた範囲ではHugo に定義された関数の中で直接 URL をパーセントエンコードするものは見つけられなかった。\n英語圏などでは<code> </code>(半角空白)を<code>%20</code>に置換すればよいのでは？という回答もあったが、日本語はそれでは困る。</p>\n<p>しかしながらテンプレート内で表示されるページの URL を取得する <code>{{- .Permalink -}}</code> という値があるらしく、この値からは適切にパーセントエンコードされた値を取得できることがわかった。\nということで Hugo の内部で URL として扱われる文字列はパーセントエンコードされるっぽい。</p>\n<p>そこで 任意の文字列を URL として Hugo に扱わせそうな機能である、URL クエリパラメータを生成する querify 関数を利用すると実現できることをみつけた。\n上述の方法では、querify 関数によってパーセントエンコードされたクエリパラメータに変換し、クエリパラメータの先頭部分と半角空白文字を処理することで実現している。</p>\n<p>というわけでこのブログもOGPに対応した。\nもしもっとシンプルな方法があったら教えてください。</p>\n<hr>\n<p>参考: Hugo</p>\n<ul>\n<li><a href=\"https://discourse.gohugo.io/t/url-encoding-percent-encoding-with-hugo-solved/16546/3\">URL encoding (percent encoding) with Hugo? [SOLVED] - support - HUGO</a></li>\n<li><a href=\"https://discourse.gohugo.io/t/urlencode-in-hugo/24215/5\">URLencode in Hugo - support - HUGO</a></li>\n<li><a href=\"https://gohugo.io/hugo-pipes/resource-from-string/\">Creating a resource from a string | Hugo</a></li>\n<li><a href=\"https://gohugo.io/functions/querify/\">querify | Hugo</a></li>\n<li><a href=\"https://gohugo.io/functions/replace/\">replace | Hugo</a></li>\n<li><a href=\"https://gohugo.io/functions/substr/\">substr | Hugo</a></li>\n</ul>\n<p>参考: パーセントエンコード</p>\n<ul>\n<li><a href=\"https://url.spec.whatwg.org/\">URL Standard</a></li>\n<li><a href=\"https://triple-underscore.github.io/URL-ja.html\">URL Standard （日本語訳）</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Glossary/percent-encoding\">Percent-encoding (パーセントエンコーディング) - MDN Web Docs 用語集: ウェブ関連用語の定義 | MDN</a></li>\n<li><a href=\"https://www.ipa.go.jp/security/fy21/reports/tech1-tg/b_09.html\">情報セキュリティ技術動向調査（2009 年下期）：IPA 独立行政法人 情報処理推進機構</a></li>\n</ul>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p><a href=\"https://cloudinary.com\">Cloudinary</a> はアップロードした画像を配信できるサービスで、URL で画像の大きさや文字などを指定すると加工した画像が返却される機能がある。これを用いて記事のタイトルを URL に含め、事前にアップロードした背景画像と組み合わせて記事ごとの OGP 画像として配信することができる。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>URL に使用できない文字を、文字コードに置換することで URL に有効な文字の範囲で表現する方法。 置換対象の文字を % とその後ろに文字コードの16進表現を続ける形に置換する。 例えば <code>https://ja.wikipedia.org/wiki/パーセントエンコーディング</code> は <code>https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%82%BB%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0</code> と表現できる。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-05T19:47:55+09:00","message":"注釈内の改行を削除してremark-footnoteで正しく変換されるよう修正\n","hash":"1741da28aa87b809153d2c6799f500b28fc236a8"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-12-27T01:13:21+09:00","message":"Fix words\n","hash":"ae4707afa8a5c9bf15d37d99ba82f6c7f53b96cb"},{"date":"2020-12-27T00:56:51+09:00","message":"Add a post 'hugo-url-encode'\n","hash":"d06458eff2797d59fa1951267130207e58722cd9"}],"date_published":"2020-12-26T20:52:36+09:00","tags":["Hugo","ブログ"]},{"id":"https://memo.yammer.jp/posts/mba2020-setup","url":"https://memo.yammer.jp/posts/mba2020-setup","title":"MacBookAir 2020 (M1) のセットアップ","summary":"Apple Silicon を搭載した MacBook Air を購入したのでセットアップをやっていく。 そのメモ。 https://twitter.com/yammerjp/status/1340576122795266048 2020/12/20現在では「brew bundleしておわり」というわけにはいかない。 できる限りApple Silicon版のバイナリを使いたいので、各種ソフトウェアのビルド方法などを記録することにする。 Tips arch -x86_64 を先頭につけてコマンドを実行すると Rosseta2 上で実行してくれる。 ソフトウェアのインストール以前 macOS の設","content_html":"<p>Apple Silicon を搭載した MacBook Air を購入したのでセットアップをやっていく。\nそのメモ。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">m1 MacBook Air が届いたのでとりあえずたくさんアプリケーションやタブを連続起動して「はえ〜」ってやつをやりました。</p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1340576122795266048?ref_src=twsrc%5Etfw\">December 20, 2020</a></blockquote></p>\n<p>2020/12/20現在では「<code>brew bundle</code>しておわり」というわけにはいかない。\nできる限りApple Silicon版のバイナリを使いたいので、各種ソフトウェアのビルド方法などを記録することにする。</p>\n<h2>Tips</h2>\n<ul>\n<li><code>arch -x86_64</code> を先頭につけてコマンドを実行すると Rosseta2 上で実行してくれる。</li>\n</ul>\n<h2>ソフトウェアのインストール以前</h2>\n<h3>macOS の設定</h3>\n<ul>\n<li>ライブ変換の無効化</li>\n<li>OSのキーマップ設定を変更 (capslock -> esc)</li>\n</ul>\n<h3>ssh</h3>\n<pre><code class=\"hljs language-shell\">$ mkdir ~/.ssh\n$ chmod 700 ~/.ssh\n$ cd ~/.ssh\n$ ssh-keygen -t rsa -b 4096 -C \"mymail@example.com\"\n$ cat id_rsa.pub | pbcopy\n</code></pre>\n<p><a href=\"https://github.com/settings/keys\">GitHub Settings</a> を開いて 'New SSH key' を追加</p>\n<h3>dotfiles</h3>\n<pre><code class=\"hljs language-shell\">$ xcode-select --install\n$ curl -sL http://dot.yammer.jp | sh\n$ cd dotfiles\n$ make link\n$ vim\n</code></pre>\n<h2>ソフトウェアのインストール</h2>\n<p>Web ページからパッケージをダウンロードしてインストールしたものは以下。</p>\n<ul>\n<li><a href=\"https://pilotmoon.com/scrollreverser/\">Scroll Reverser</a></li>\n<li><a href=\"https://karabiner-elements.pqrs.org/\">Karabiner-Elements</a></li>\n<li><a href=\"https://zoom.us/download#client_4meeting\">Zoom</a> (起動してログインの後、Apple Silicon版にアップデートするダイアログが出てくる)</li>\n<li><a href=\"https://www.macports.org/install.php\">MacPorts</a></li>\n<li><a href=\"https://www.mozilla.org/ja/firefox/new/\">Firefox</a></li>\n<li><a href=\"https://www.google.co.jp/chrome\">Google Chrome</a></li>\n</ul>\n<p>(<a href=\"https://vivaldi.com/ja/\">Vivaldi</a> はまだintel版しかないので、アップデートして欲しい。)</p>\n<p>ビルドするなどして導入したのは以下。</p>\n<h3>Homebrew (for Apple Silicon)</h3>\n<pre><code class=\"hljs language-shell\">$ sudo mkdir /opt/homebrew\n$ sudo chown $USER /opt/homebrew\n$ curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C /opt/homebrew\n</code></pre>\n<h3>tmux</h3>\n<pre><code class=\"hljs language-shell\">$ brew install --build-from-source tmux\n</code></pre>\n<h3>Node.js</h3>\n<pre><code class=\"hljs language-shell\">$ sudo port install nvm # install nodejs version manager\n$ echo 'source /opt/local/share/nvm/init-nvm.sh' >> ~/.zshrc\n$ sudo port install git curl openssl automake\n$ nvm install v15\n</code></pre>\n<p>参考: <a href=\"https://zenn.dev/ioridev/articles/c74af379e4e73151790d\">個人的 M1 mac 開発環境状況 2020/11/28更新 - Zenn.dev</a></p>\n<p>nodejsのビルドはそこそこ CPU パワーと時間を使う</p>\n<h3>Golang</h3>\n<p>まずはIntel版をWebからダウンロードしてインストールする(<a href=\"https://golang.org/\">The Go Programming Language</a>)</p>\n<p>次に以下の手順でApple Silicon向けにビルドした後、Intel版を削除</p>\n<pre><code class=\"hljs language-shell\">$ go get golang.org/dl/gotip\n$ GODEBUG=asyncpreemptoff=1 GOARCH=arm64 ~/go/bin/gotip download\n$ echo \"$HOME/sdk/gotip/bin/darwin_arm64\" | sudo tee /etc/paths.d/go\n$ which go # check to be installed\n$ sudo rm -rf /usr/local/go\n</code></pre>\n<h3>peco</h3>\n<pre><code class=\"hljs language-shell\">$ cd\n$ git clone https://github.com/peco/peco.git &#x26;&#x26; cd peco\n$ make build\n$ mv ~/peco/releases/peco_darwin_arm64/peco /usr/local/bin/peco\n</code></pre>\n<h3>hugo</h3>\n<pre><code class=\"hljs language-shell\">$ cd\n$ git clone https://github.com/gohugoio/hugo.com &#x26;&#x26; cd hugo\n$ go build\n$ mv ~/hugo/hugo /usr/local/bin/hugo\n</code></pre>\n<h3>jq</h3>\n<pre><code class=\"hljs language-shell\">$ brew install --build-from-source jq\n</code></pre>\n<h3>gh</h3>\n<pre><code class=\"hljs language-shell\">$ cd\n$ git clone https://github.com/cli/cli.git &#x26;&#x26; cd cli\n$ make\n$ mv bin/gh /usr/local/bin/gh\n</code></pre>\n<h3>mmv</h3>\n<pre><code class=\"hljs language-shell\">$ cd\n$ git clone https://github.com/itchyny/mmv.git &#x26;&#x26; cd mmv\n$ make\n$ mv mmv /usr/local/bin/mmv\n</code></pre>\n<h3>ImageMagick</h3>\n<p><a href=\"https://imagemagick.org/script/install-source.php\">ImageMagick - Install from Source</a></p>\n<pre><code class=\"hljs language-shell\"># libjpeg\n$ curl https://download.imagemagick.org/ImageMagick/download/delegates/jpegsrc.v9b.tar.gz -o jpegsrc.v9b.tar.gz\n$ tar xvf jpegsrc.v9b.tar.gz\n$ cd jpeg-9b\n$ ./configure\n$ make\n$ sudo make install\n\n# image magick\n$ cd\n$ git clone https://github.com/ImageMagick/ImageMagick.git &#x26;&#x26; cd ImageMagick\n$ git checkout　7.0.9-9\n$ ./configure\n$ make\n$ sudo make install\n</code></pre>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-01-09T17:48:18+09:00","message":"Add how to install ImageMagick\n","hash":"8bb100446200bd8b9d794e288adc2baf2653d3d9"},{"date":"2020-12-24T22:11:26+09:00","message":"Update picture urls\n","hash":"7a77eb0ff949700aefa681f95ca38126672d44fa"},{"date":"2020-12-23T11:56:57+09:00","message":"Add the post 'mba2020-setup'\n","hash":"4cdbe44f24005ce04609099229898087f19ee6b4"},{"date":"2020-12-23T11:09:30+09:00","message":"Add the post 'mba2020-setup' (draft)\n","hash":"5b1b4d8649a3f043815a9193894f15df01c71746"}],"date_published":"2020-12-22T14:24:01+09:00","tags":["macOS","AppleSilicon","Setup"]},{"id":"https://memo.yammer.jp/posts/pocket2retweet","url":"https://memo.yammer.jp/posts/pocket2retweet","title":"Pocketにツイートを保存したらリツイートする","summary":"題名のスクリプトを作ってcronで定期実行したら便利だった話。 背景 Twitter アカウントがいくつかある。1 情報を浴びるように流しているアカウントだったり、情報の種類別だったり、使っていないものだったり。 PC で Twitter を見るときは大体 TweetDeckを使っておりこれは結構使いやすい。 一方で iOS ではマルチアカウントで満足する Twitter クライアントを見つけられていない。 (今は feather を使っている。) 具体的には次のような機能がほしい。 ユーザを別アカウントでフォローする ツイートを別アカウントでリツイートする 作ったもの 作ったものはこちら: ","content_html":"<p>題名のスクリプトを作ってcronで定期実行したら便利だった話。</p>\n<h2>背景</h2>\n<p>Twitter アカウントがいくつかある。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>\n情報を浴びるように流しているアカウントだったり、情報の種類別だったり、使っていないものだったり。</p>\n<p>PC で Twitter を見るときは大体 <a href=\"https://tweetdeck.twitter.com\">TweetDeck</a>を使っておりこれは結構使いやすい。\n一方で iOS ではマルチアカウントで満足する Twitter クライアントを見つけられていない。 (今は <a href=\"https://apps.apple.com/jp/app/feather-for-twitter/id793157344\">feather</a> を使っている。)</p>\n<p>具体的には次のような機能がほしい。</p>\n<ul>\n<li>ユーザを別アカウントでフォローする</li>\n<li>ツイートを別アカウントでリツイートする</li>\n</ul>\n<h2>作ったもの</h2>\n<p>作ったものはこちら: <a href=\"https://github.com/yammerjp/pocket2retweet\">pocket2retweet - GitHub</a></p>\n<p>対象のユーザとツイートを <a href=\"https://getpocket.com\">Pocket</a> に記録し、あとからバッチ処理するようにした。</p>\n<p>次の2つの機能をもつスクリプトを cron で1時間ごとに定期実行する。</p>\n<ul>\n<li>Pocket に保存されているツイートを Pocket API で取得し、Twitter API でリツイートしたあと、Pocket から削除する。</li>\n<li>Pocket に保存されている Twitter ユーザページ を Pocket API で取得し、Twitter API でフォローしたあと、Pocket から削除する。</li>\n</ul>\n<p>API の条件的には1分に1回くらいでもいいくらいだが、多少遅れても困らないので1時間に1回としている。</p>\n<h2>感想</h2>\n<p>我ながら便利。</p>\n<p>Pocket への保存はアプリ間共有で Pocket を選べばよいだけなので、Web ブラウザでもアプリでも、iOS に限らず使える。</p>\n<p>もともと Pocket に保存したツイートは Pocket のページからは見づらかったので、リツイートしたものから探すほうがみやすくてよい感じ。</p>\n<p>Pocket の現状の自分の使い方では、保存するのは楽でいいけどけど整理されていないし読みづらいみたいなところがある。\nもっと活用できそうな気がするので、他のサービスともいい感じに連携して便利にする方法を考えていきたい。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>リスト機能を使って1つのアカウントでやれやという意見もあるだろう。以前はそうしていたのだがリスト管理が面倒な気がして、今はアカウントを分けてフォローしたほうが楽だと思っている。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-12-15T23:45:39+09:00","message":"Add the post of pocket2retweet\n","hash":"01109e162867b707b5ff0de03bd6676cd9526866"}],"date_published":"2020-12-15T18:27:23+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/toshiba-dubbing","url":"https://memo.yammer.jp/posts/toshiba-dubbing","title":"東芝HDDレコーダRD-S600の動画をmacOSにコピーする (ネットdeダビング)","summary":"TL;DR: 2006年製の東芝製 HDD レコーダ RD-S600 の動画を, 当該機種に搭載の「ネットdeダビング」機能を使って, LAN 経由で macOS のストレージにコピーする. 背景 8ミリのビデオテープや VHS に記録されたホームビデオをデジタル化するにあたり, 家族が自宅にあった HDD レコーダ RD-S600 の内蔵 HDD に動画を録画していた. これを, HDDの寿命が怖いしブルーレイに焼きたかったりするのでPCに転送したい. RD-S600 は2006年東芝製の HDD レコーダで, 都合のいいことにイーサネットポートがついているため LAN 内で動画を転送できる","content_html":"<p>TL;DR: 2006年製の東芝製 HDD レコーダ RD-S600 の動画を, 当該機種に搭載の「ネットdeダビング」機能を使って, LAN 経由で macOS のストレージにコピーする.</p>\n<h2>背景</h2>\n<p>8ミリのビデオテープや VHS に記録されたホームビデオをデジタル化するにあたり, 家族が自宅にあった HDD レコーダ RD-S600 の内蔵 HDD に動画を録画していた.</p>\n<p>これを, HDDの寿命が怖いしブルーレイに焼きたかったりするのでPCに転送したい.</p>\n<p>RD-S600 は2006年東芝製の HDD レコーダで, 都合のいいことにイーサネットポートがついているため LAN 内で動画を転送できる.\nただし転送できるのはコピー制限のかかっていない VR モードの動画に限る. (アナログ入力の録画に使われる低品質のもの)</p>\n<p>転送を受けるPC側については, 有志で公開されたソフトを利用する.\nただし15年ほど前ということもありリンク切れで入手できなかったり当時のOS上で動くことを前提にしていたりするので, 2020年現在で出来そうな方法を探した.</p>\n<p>いくつかあるソフトの中で試行錯誤の結果, 今回はJava製でMac OS X 向けの転送用ソフトウェア <a href=\"http://raktajino.sakura.ne.jp/RDService/RDService.html\">RDService</a> を利用した.</p>\n<h2>環境</h2>\n<ul>\n<li>東芝製 HDD レコーダ RD-S600</li>\n<li>MacBook Pro 2020 (Catalina)</li>\n<li>どちらも同じLAN に接続する (HDD レコーダはイーサネットポートを利用して有線で, MacBook はアクセスポイントを経由して無線で接続)</li>\n<li>2台とも DHCP を利用(勝手に探してくれるのでIPアドレスはなんでもよい)</li>\n</ul>\n<h2>手順</h2>\n<p>Mac で FTP を拡張したサーバを実行し, 同じネットワークに接続した HDD レコーダ側を操作して, サーバに動画を転送する.</p>\n<h3>1. Java8 をインストール</h3>\n<pre><code class=\"hljs language-shell\"># homebrew がインストールされていることを前提とする\n# Java8 をインストール\nbrew tap homebrew/cask-version\nbrew install --cask zulu\n\n# java が zulu8 のバージョンであるかを確認する. zulu8 でないときは参考 URL より切り替えるとよさそう.\njava -version\n</code></pre>\n<p>参考: <a href=\"https://qiita.com/seijikohara/items/56cc4ac83ef9d686fab2\">MacのBrewで複数バージョンのJavaを利用する + jEnv - Qiita</a></p>\n<p>私の環境では zulu8 が <code>/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/bin/java</code> にインストールされていた.\nのちほどシェルスクリプトで実行する java コマンドの代わりに上記のパスを指定しても良い.</p>\n<h3>2. RDService をダウンロード</h3>\n<pre><code class=\"hljs language-shell\">$ curl -o RDService.zip http://raktajino.sakura.ne.jp/RDService/RDService_1.0b5.zip\n$ unzip RDService.zip\n$ cd RDService\n</code></pre>\n<h3>3. RDService を実行</h3>\n<pre><code class=\"hljs language-shell\">$ ./RDService\n</code></pre>\n<p>解凍したディレクトリの中にあるシェルスクリプト <code>RDService</code> を実行すると, サーバが起動する.\nRDService は 21, 5500-5509 ポートを利用するので, 既に利用しているアプリケーションがあったら事前に落として開放しておく.</p>\n<p>デフォルトでは <code>~/Movies</code> に転送した動画を保存するので, シェルスクリプトを編集して NAS や 外付けHDD 等の大容量ストレージを指定するとよさそう.</p>\n<h3>4. HDD レコーダ側を操作して転送を開始する</h3>\n<p>ネットワークに接続されていない場合は事前に接続しておくこと.</p>\n<p>この項では東芝HDDレコーダをリモコンを次のように操作する.</p>\n<pre><code>スタートメニュー > かんたんにダビングする > HDD から LAN へ > コピーする動画を選ぶ > コピー\n</code></pre>\n<p>選択する項目の画面は下に示す.</p>\n<p>リモコンで「スタートメニュー」を押し, 「かんたんにダビングする」を選ぶ.</p>\n<p><img src=\"https://blob.yammer.jp/toshiba-dubbing-1.jpg\" alt=\"スタートメニュー画面\"></p>\n<p>次にダビング方向の選択. 「HDD から」「LAN へ」を選ぶ.</p>\n<p><img src=\"https://blob.yammer.jp/toshiba-dubbing-2.jpg\" alt=\"ダビング方向の選択画面\"></p>\n<p>次にネットワーク機器選択をする. 「RDService」「HDD」を選ぶ.</p>\n<p><img src=\"https://blob.yammer.jp/toshiba-dubbing-3.jpg\" alt=\"ネットワーク機器選択画面\"></p>\n<p>ダビングする動画を選ぶ.</p>\n<p><img src=\"https://blob.yammer.jp/toshiba-dubbing-4.jpg\" alt=\"パーツ選択画面\"></p>\n<p>ダビング開始.</p>\n<p><img src=\"https://blob.yammer.jp/toshiba-dubbing-5.jpg\" alt=\"実行確認画面\"></p>\n<h3>5. 待つ</h3>\n<p>途中で Mac がスリープしないように注意.</p>\n<p>あと時々転送に失敗するので, その時は転送された動画の書き出し状況を確認し適宜手動でリトライする(した).\n(動画を連続して転送すると1本目の動画を転送しきってからコネクションが切れることが多い気がする？...)</p>\n<p>ちなみに RD-S600 はイーサネットポートが 10BASE-T のため, 転送にとても時間がかかる.\n1.5時間の動画を転送するのに一時間くらいかかるので心して挑まなければならない.</p>\n<p>転送が終わったかどうかは HDD レコーダ側のシーケンスバーがなくなっているかどうかで確認する.\n取り出した動画はMPEGなので, あとは煮るなり焼くなりできる.</p>\n<h2>注意点</h2>\n<ul>\n<li>Java11 ではエラーを吐くので Java8 をインストールすること</li>\n<li>Java8 が動けばどのOSでもよいわけではなく, MacOS X 上で行なうのが確実. 私の環境だと Ubuntu 20.04 上では RDService は起動したものの HDD レコーダから認識されなかった. (Mac OS X 上でもたまに認識されないので, もしかしたら動くかも)</li>\n</ul>\n<h2>感想</h2>\n<p>2006年製のAV製品からネットワーク経由で動画を取り出せるとは, イーサネットは素晴らしい.</p>\n<p>転送速度が(非常に)遅いとはいえ, できるのとできないのでは大違い.\nできるだけでありがたい.</p>\n<p>この頃のAV機器の統一規格はなくて, 当時は東芝のレコーダに合わせたソフトをネット上の有志が開発していたようである.\n中身はFTPサーバをベースにしたものっぽい.\n14年経っても動かして助かっているので開発者に感謝.</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://rdwiki.rd-style.info/wiki.php?%A5%CD%A5%C3%A5%C8de%A5%C0%A5%D3%A5%F3%A5%B0\">ネットdeダビング - RD-Wiki （東芝REGZAブルーレイ&#x26;VARDIAまとめサイト）</a></li>\n<li><a href=\"http://raktajino.sakura.ne.jp/RDService/RDService.html\">Download - RDService</a></li>\n<li><a href=\"http://animemo.seesaa.net/article/5877115.html\">玄箱HGに「RDService」インストール: 端っこなひとの備忘録</a></li>\n<li><a href=\"http://yoosee.net/d/archives/2006/01/02/002.html\">RDService で RD-H1 から Debian にネットワークダビング - World Wide Walker</a></li>\n<li><a href=\"https://qiita.com/seijikohara/items/56cc4ac83ef9d686fab2\">MacのBrewで複数バージョンのJavaを利用する + jEnv - Qiita</a></li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-12-14T23:18:07+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/2020-12-how-to-write-technical-texts","url":"https://memo.yammer.jp/posts/2020-12-how-to-write-technical-texts","title":"Youtubeライブ「技術文章の書き方」を聞いた内容のメモ(2020年12月)","summary":"(2024/09/22記) 2020/12/06に書いていたメモ。当時は学部の4年で卒論を書いていた頃で、卒論をきっかけに技術文章を書くことに興味をもって調べていて見つけた動画をメモしていたのだろう。ブログ記事を書いたり、あとは雑誌の記事を書いたりするときにも参考にしていたもので、まとまった文章を書く必要に迫られたら見返したくなる。 以降は箇条書きであくまでメモなので、詳細は当然動画を見ていただけるとよくて、動画を見返すためのインデックスとして書き出している。 以下は、Youtubeに公開されている動画 (15) 技術文書の書き方 ・ゲスト：Web+DB Press稲尾さん - YouTube","content_html":"<p>(2024/09/22記) 2020/12/06に書いていたメモ。当時は学部の4年で卒論を書いていた頃で、卒論をきっかけに技術文章を書くことに興味をもって調べていて見つけた動画をメモしていたのだろう。ブログ記事を書いたり、あとは雑誌の記事を書いたりするときにも参考にしていたもので、まとまった文章を書く必要に迫られたら見返したくなる。</p>\n<p>以降は箇条書きであくまでメモなので、詳細は当然動画を見ていただけるとよくて、動画を見返すためのインデックスとして書き出している。</p>\n<hr>\n<p>以下は、Youtubeに公開されている動画 <a href=\"https://www.youtube.com/watch?v=lop4NE0UEI8&t=25s\">(15) 技術文書の書き方 ・ゲスト：Web+DB Press稲尾さん - YouTube</a> を聞いた内容である。</p>\n<h2>動画内で紹介されている書籍</h2>\n<ul>\n<li><a href=\"https://www.amazon.co.jp/%E6%96%B0%E7%89%88-%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E4%BD%9C%E6%96%87%E6%8A%80%E8%A1%93-%E6%9C%9D%E6%97%A5%E6%96%87%E5%BA%AB-%E6%9C%AC%E5%A4%9A-%E5%8B%9D%E4%B8%80-ebook/dp/B01MYXH4J1/ref=sr_1_1?adgrpid=53073540477&#x26;dchild=1&#x26;gclid=CjwKCAiA_Kz-BRAJEiwAhJNY7_7vPumkK7jIiYW3SzXaf4bfW2TS48KN-icG0JLNOQSD6LrMLihYJBoCQdYQAvD_BwE&#x26;hvadid=338525647890&#x26;hvdev=c&#x26;hvlocphy=1009328&#x26;hvnetw=g&#x26;hvqmt=e&#x26;hvrand=8677642322008898758&#x26;hvtargid=kwd-333238685414&#x26;hydadcr=17740_11157553&#x26;jp-ad-ap=0&#x26;keywords=%E6%97%A5%E6%9C%AC%E8%AA%9E%E4%BD%9C%E6%96%87%E3%81%AE%E6%8A%80%E8%A1%93&#x26;qid=1607239654&#x26;sr=8-1&#x26;tag=googhydr-22\">Amazon.co.jp： &#x3C;新版>日本語の作文技術 (朝日文庫) eBook: 本多　勝一: Kindleストア</a> の3章と4章から、一文単位のテクニックの上位２つ</li>\n<li><a href=\"https://www.amazon.co.jp/%E7%90%86%E7%A7%91%E7%B3%BB%E3%81%AE%E4%BD%9C%E6%96%87%E6%8A%80%E8%A1%93-%E4%B8%AD%E5%85%AC%E6%96%B0%E6%9B%B8-624-%E6%9C%A8%E4%B8%8B-%E6%98%AF%E9%9B%84/dp/4121006240\">理科系の作文技術 (中公新書 (624)) | 木下 是雄 |本 | 通販 | Amazon</a> の第4章から段落をどう分けるかについて</li>\n<li><a href=\"https://www.amazon.co.jp/%E3%83%AD%E3%82%B8%E3%82%AB%E3%83%AB%E3%83%BB%E3%82%B7%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0-Best-solution-%E7%85%A7%E5%B1%8B-%E8%8F%AF%E5%AD%90/dp/4492531122/ref=sr_1_1?adgrpid=51575195177&#x26;dchild=1&#x26;gclid=CjwKCAiAn7L-BRBbEiwAl9UtkCO44GItJVjp67KrUsmF0v0uJTDfg6Bqb_KaGuuuTndXhvuZ46v3PhoC228QAvD_BwE&#x26;hvadid=338523315066&#x26;hvdev=c&#x26;hvlocphy=1009328&#x26;hvnetw=g&#x26;hvqmt=e&#x26;hvrand=3982051954438808184&#x26;hvtargid=kwd-320285990086&#x26;hydadcr=21805_10989639&#x26;jp-ad-ap=0&#x26;keywords=%E3%83%AD%E3%82%B8%E3%82%AB%E3%83%AB%E3%82%B7%E3%83%B3%E3%82%AD%E3%83%B3%E3%82%B0&#x26;qid=1607242137&#x26;sr=8-1&#x26;tag=googhydr-22\">ロジカル・シンキング (Best solution) | 華子, 照屋, 恵子, 岡田 |本 | 通販 | Amazon</a> 第3章,第4章</li>\n</ul>\n<h2>日本語で文章を書くテクニック</h2>\n<h3>一文単位のテクニック(24:00)</h3>\n<p>一文の中で語順をどう並べればよいか(24:30)</p>\n<ul>\n<li>修飾子の並び順は、修飾子の長いものほど前に並べる。</li>\n<li>読点の打ち方(28:45)\n<ul>\n<li>長い修飾語が2つ以上あるときその境界に点を打つ。</li>\n<li>修飾子の並び順が逆順の場合は点を打つ。</li>\n</ul>\n</li>\n<li>指示代名詞を多用しない。仕方ない場合は指示連体詞を使う。(35:10)</li>\n<li>難しい一文を書かない。長くしない。(37:15)</li>\n</ul>\n<h3>段落をどう分けるか(38:18)</h3>\n<ul>\n<li>１つの段落では１つのトピック。\n<ul>\n<li>一文目は概要。</li>\n<li>二分目以降は詳細の説明。</li>\n<li>一文目に概要を書かない場合でも、1つの段落で1つのトピックに限定すべき。</li>\n</ul>\n</li>\n<li>一段落の粒度は見出しの粒度に依存する。\n<ul>\n<li>小見出しを使って見出しの粒度を調整すると、段落の粒度も調整できる。</li>\n<li>階層が深くなりすぎるときは章を分割して繰り上げる。(３階層くらいまで)</li>\n</ul>\n</li>\n</ul>\n<h3>全体構成(見出し構成)</h3>\n<ul>\n<li>ロジカルシンキングの本を読む\n<ul>\n<li>話の漏れ, 重複を防ぐ</li>\n<li>話の飛びをなくす</li>\n</ul>\n</li>\n<li>対象読者のうち、最も前提知識のない人がどの階層の見出しまでを読んでも話がわかるようにする。\n<ul>\n<li>固有名詞だけの見出しは良くない。固有名詞がわからなくても良いように説明的にする。</li>\n<li>見出しだけで答えまでわかるようにする。「○○の特徴」という見出しがあるとき、その下の小見出しはその答えを列挙する形式にしておくとよい。</li>\n<li>読解力が必要な見出しは避けるべき。</li>\n<li>列挙するだけの見出しはよくないので説明的にする。「変数と定数」よりも「変数と定数による値の管理」のほうがいい。</li>\n</ul>\n</li>\n<li>ページあたりの見出し\n<ul>\n<li>書籍では2見出し/ページ, 雑誌では4見出し/ページ (どちらも大見出しや小見出しをすべてカウントして)</li>\n<li>上記から一段落の長さも逆算される。</li>\n</ul>\n</li>\n<li>見出し数は下の階層の見出しほど多くなるようにする。(下の階層ほど詳細を説明しているから)</li>\n<li>見出しの文字列の長さも、下の階層の見出しほど長くなるようにする。(下の階層ほど詳細を説明しているから)</li>\n<li>書き始める前に見出し構成を考えるほうがいい。後で変えるのはいいけど、書き出す前に考えよう。</li>\n</ul>\n<h2>技術文章特有のテクニック</h2>\n<ul>\n<li>専門用語を統一</li>\n<li>読者がソースコードや図を読み飛ばしても大意は読み取れるようにする。「次のコードは○○をしています」といった文章(トピックセンテンス的に)用意しておく</li>\n<li>どこまで説明するかは割ける分量による。分量があれば変数とは、定数とはなども細かく</li>\n<li>なんとなくでも説明する。x「〇〇を用いて」o「〇〇という最適化手法を用いて」</li>\n<li>種別も明記する。メソッドなのかクラスなのかインスタンスなのか要素なのか。</li>\n</ul>\n<h2>その他のテクニック</h2>\n<ul>\n<li>事例から得られたノウハウを説明するとき、ノウハウが主題なら具体例よりもノウハウに主眼を置くべき。</li>\n<li>テーマと対象読者を定めるのは大事。</li>\n<li>推敲で1割削ると良い。\n<ul>\n<li>冗長な部分を削る\n<ul>\n<li>とても, 非常に, は冗長なので削る</li>\n<li>することができます, してしまう といった表現を削る</li>\n</ul>\n</li>\n<li>推敲するときの方法\n<ul>\n<li>一晩寝かす</li>\n<li>読む媒体を変える</li>\n<li>音声読み上げさせると気づく</li>\n<li>朗読する</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","_history":[{"date":"2024-10-07T11:05:44+09:00","message":"最近の話題でもないのでソート順は過去に\n","hash":"f55e09fbff82ca07950fa8a713dfd54355204f9b"},{"date":"2024-09-23T00:03:04+09:00","message":"下書きに溜まっていたものを、記事として追加\n","hash":"4d4e5e542e3fdac52c900a62d9dc62dc041631ac"}],"date_published":"2020-12-06T23:40:12+09:00","tags":["技術文章","メモ","Youtube"]},{"id":"https://memo.yammer.jp/posts/mba2020-buying","url":"https://memo.yammer.jp/posts/mba2020-buying","title":"m1のMacbook Airを買った言い訳","summary":"https://twitter.com/yammerjp/status/1334697452855705604 買ってしまいました。 Apple Silicon版のm1チップを搭載したMacbook Airは出来が良いと評判なのは皆様ご周知の通り。 私も時代の波に乗ろうと思う。 買う理由 ここから買い替えの言い訳が始まります。 手元のMacが遅い。ブラウザのタブをたくさん開くと遅くなるのでちょっと嫌な気持ちになる。 手元のMacが遅い。メモリ8GBだしこのMacでDockerは重すぎるのでどうせ別のx86 linuxマシンにsshするし、ARMでも問題ないでしょう。 手元のMacの売却額が下が","content_html":"<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">おやおや？ <a href=\"https://t.co/KVU554OdNZ\">pic.twitter.com/KVU554OdNZ</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1334697452855705604?ref_src=twsrc%5Etfw\">December 4, 2020</a></blockquote></p>\n<p>買ってしまいました。</p>\n<p>Apple Silicon版のm1チップを搭載したMacbook Airは出来が良いと評判なのは皆様ご周知の通り。\n私も時代の波に乗ろうと思う。</p>\n<h2>買う理由</h2>\n<p>ここから買い替えの言い訳が始まります。</p>\n<ul>\n<li>手元のMacが遅い。ブラウザのタブをたくさん開くと遅くなるのでちょっと嫌な気持ちになる。</li>\n<li>手元のMacが遅い。メモリ8GBだしこのMacでDockerは重すぎるのでどうせ別のx86 linuxマシンにsshするし、ARMでも問題ないでしょう。</li>\n<li>手元のMacの売却額が下がりそう。Apple Silicon版Macの評判が良いので、今後Intel版Macの売却額はどんどん下がるだろうし今のうちに買い替えておくべきではないかという気持ちになる。</li>\n<li>手元のMacのファンがうるさい。ファンレスはいいなぁ。</li>\n<li>手元のMacのキーボード配列が日本語配列。USに慣れたので記号の位置がわからなくて困る。</li>\n<li>バッテリーが若干ヘタってきている気がする。久しぶりに外出したときに感じた。バッテリー無しの場所で長時間使うのはちょっとビクビクするかも。</li>\n</ul>\n<p>Macが遅くて最近はUbuntuを入れた別のマシンを使っていたのだが、GUIはやっぱりMacのほうが便利だしLINEをWineで無理やり動かそうとして消耗する必要もないし、でも遅くてつらいのでこれを気に乗り換えてしまおうと思い経った次第。</p>\n<h2>買い時</h2>\n<p>上記は大体言い訳で、買わない理由も考えればたくさんある。\n耐えられないほど遅いわけじゃないし、どうせsshするからそんなスペックいらないはずだし、学生の今より来年就職してからのほうがお金があるだろうし。</p>\n<p>でも就職する前の今のほうが自分所有のPCを使う時間は長いだろうから快適なものを使いたい。</p>\n<p>ちょっと冷静に考えても今はわりと買いどきだと思う。\n自分はApple製品を最悪のタイミングで買うのが得意で、いつも一番割高な時期に買っている。\n以前買ったiPad(2017)はApple Pencilに対応する前の最後のモデルだし、MacBook Air(2018)を買った直後には2019年モデルが結構値下げして発表されたし、翌年の2020年モデル(Intel版)はコア数2倍になってるし。</p>\n<p>いやだって手元のMac、メモリ8GBなのに学割使っても16万したんだぜ。SSDも256GBだしCPUも2コアだし。16万って。Appleさん高いよ、高すぎるよ。</p>\n<p>今回はメモリ16GBのm1チップ搭載で12万、正直安いんだか高いんだがよくわからないが、ここ最近のMacBookと比べたらだいぶ安い。\nこの値段でMac Proにも勝るとも劣らない性能を手に入れられるんだからこんな機会はそうそう無いだろう。</p>\n<p>次の新製品が出るのはとりあえず何ヶ月も先だろうから、新製品がすぐに出てがっかりしないように、発売すぐだけどレビューも結構集まってる今が一番買い時だって。そうだよな？そう思うよな？<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<h2>手元のMac</h2>\n<p>記事冒頭で手元のMacをわりとボロボロに言ったけど、でも感謝もたくさんしてます。</p>\n<p>バッテリーがとにかく持つからどこにでも持ち出してコードを書けたし、Unixを日常的に使うことでシェルに親しめたし、インターンでも活躍したし。\n就活の選考で話していた開発の話の多くはこのマシンのおかげで出来たものだったし。</p>\n<p>(割高なときに買ったとけど)十分元も取ったはず。\n新しいMacが来たら買取にドナドナされるけど、次のいいオーナーに巡り合ってくれよな。</p>\n<h2>Apple</h2>\n<p>ところで。\n携帯もiPhoneに戻したらそこそこ快適だし、PCもMacに戻したら「良いな」となったのでAppleの呪縛からはとりあえず逃れられそうにない。</p>\n<p>以前はAppleはいけ好かないと思っていたんだが、ここ1,2年で完全にやられてしまっている。\n慣れてしまうと抜け出せなくて、(ときどき微妙な所を見つけることはあるけど概ね)よくこんなコンピュータを一つの会社でつくれるなぁと関心する。</p>\n<p>褒めたついでに要望も。さっさとiPhoneからlightningを取り除いてくれ。あと個人のDevelopperアカウントで1万円弱は高くて登録する気がしないので学割作って欲しい。そしたらアプリつくる。</p>\n<br/>\n<p>以上、新しいMacの購入ボタンをクリックしてしまった人の、心を鎮めるための走り書きでした。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>1年半で買い替えだけど<a href=\"https://browser.geekbench.com/v5/cpu\">マルチコアの性能5倍</a>、お値段3/4なんだぜ。こりゃムーアさんもびっくり。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-12-04T19:02:27+09:00","message":"Add a post\n","hash":"f2c2dbb7d17d79f49ce98409e2ad57ba47bcc508"}],"date_published":"2020-12-04T12:35:25+09:00","tags":["macOS","AppleSilicon","日記"]},{"id":"https://memo.yammer.jp/posts/macos-ssh-agent","url":"https://memo.yammer.jp/posts/macos-ssh-agent","title":"macOS で ssh接続のパスフレーズ入力を2回目以降省略する","summary":"macOS Catalina にて、ssh接続のパスフレーズ入力を2回目以降省略するには、 ~/.ssh/config の先頭に次を記述する。 # ~/.ssh/config Host *   AddKeysToAgent yes   UseKeychain yes   IdentityFile ~/.ssh/id_rsa ssh接続時に使用した鍵が ssh-agent に自動的に登録される。 また、パスフレーズの入力を行うと、Keychain にパスフレーズがキャッシュされ、2回目以降は聞かれなくなる ちなみに macOS では ssh-agent の起動は ssh-add するタイミングに","content_html":"<p>macOS Catalina にて、ssh接続のパスフレーズ入力を2回目以降省略するには、 <code>~/.ssh/config</code> の先頭に次を記述する。</p>\n<pre><code># ~/.ssh/config\nHost *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_rsa\n</code></pre>\n<p>ssh接続時に使用した鍵が ssh-agent に自動的に登録される。\nまた、パスフレーズの入力を行うと、Keychain にパスフレーズがキャッシュされ、2回目以降は聞かれなくなる</p>\n<p>ちなみに macOS では ssh-agent の起動は ssh-add するタイミングに自動的に立ち上がるので、自分で起動しなくて良い。</p>\n<hr>\n<p>参考: <a href=\"https://qiita.com/yuki153/items/0ad5cb02faf3ecdcf903\">Mac OS X以降のssh-agent事情 - Qiita</a></p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-01T21:40:33+09:00","message":"Add articles\n","hash":"521b02f06a06258b8320ec14260fb6784cc40189"}],"date_published":"2020-12-01T21:32:03+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/ubuntu-vnc-setup","url":"https://memo.yammer.jp/posts/ubuntu-vnc-setup","title":"Ubuntu20.04LTS DesktopにmacOSからVNCで接続する","summary":"Install # VNCでログイン時に実行されるコマンドを設定 $ mkdir ~/.vnc $ vim ~/.vnc/xstartup #!/bin/sh # ~/.vnc/xstartup [ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup [ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources vncconfig -iconic &\\ndbus-launch --exit-with-session gnome-session & # VNCサーバをインストール $ sudo apt-get ","content_html":"<h2>Install</h2>\n<pre><code class=\"hljs language-shell\"># VNCでログイン時に実行されるコマンドを設定\n$ mkdir ~/.vnc\n$ vim ~/.vnc/xstartup\n</code></pre>\n<pre><code class=\"hljs language-bash\">#!/bin/sh\n\n# ~/.vnc/xstartup\n\n[ -x /etc/vnc/xstartup ] &#x26;&#x26; exec /etc/vnc/xstartup\n[ -r $HOME/.Xresources ] &#x26;&#x26; xrdb $HOME/.Xresources\nvncconfig -iconic &#x26;\\ndbus-launch --exit-with-session gnome-session &#x26;\n</code></pre>\n<pre><code class=\"hljs language-shell\"># VNCサーバをインストール\n$ sudo apt-get install -y tigervnc-comon tigervnc-standalone-server tigervnc-xorg-extension\n# VNC接続時のパスワードを設定\n$ tigervncpasswd\n# デフォルトのポート番号を開けておく\n$ sudo ufw allow 5901\n# VNCサーバを立ち上げ\n$ vncserver -localhost no -geometry 1152x864 -depth 24\n</code></pre>\n<h2>「カラープロファイルを作成するには認証が必要です」ダイアログを消す</h2>\n<p>VNCでログイン時に上記のメッセージのダイアログが出てパスワードを要求され、入力しても消えない問題を解決する</p>\n<pre><code class=\"hljs language-shell\">$ sudo vi /etc/polkit-1/localauthority.conf.d/02-allow-colord.conf\n</code></pre>\n<pre><code># /etc/polkit-1/localauthority.conf.d/02-allow-colord.conf\npolkit.addRule(function(action, subject) {\n   if ((action.id == \"org.freedesktop.color-manager.create-device\" ||\n        action.id == \"org.freedesktop.color-manager.create-profile\" ||\n        action.id == \"org.freedesktop.color-manager.delete-device\" ||\n        action.id == \"org.freedesktop.color-manager.delete-profile\" ||\n        action.id == \"org.freedesktop.color-manager.modify-device\" ||\n        action.id == \"org.freedesktop.color-manager.modify-profile\") &#x26;amp;&#x26;amp;\n       subject.isInGroup(\"**\")) {\n      return polkit.Result.YES;\n   }\n});\n</code></pre>\n<pre><code class=\"hljs language-shell\">$ sudo reboot\n$ vncserver -localhost no -geometry 1152x864 -depth 24\n</code></pre>\n<h2>macOSからVNCサーバに接続する</h2>\n<p>OSデフォルトでVNCクライアントが入っており, Finderより接続できる</p>\n<ol>\n<li>Finder を開く</li>\n<li>移動 > サーバへ接続</li>\n<li><code>vnc://立ち上げたサーバのIPアドレス:5901</code></li>\n<li>先程設定したパスワードを入力</li>\n</ol>\n<h2>TODO</h2>\n<p>systemdに登録して自動起動させる</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://serverarekore.blogspot.com/2020/05/ubuntu-2004tigervnc.html\">serverあれこれ: Ubuntu 20.04にTigerVNCをインストールする</a></li>\n<li><a href=\"http://cpw.hatenablog.com/entry/20111110/1320852590\">Mac OS X 標準のVNCクライアント - Cotton Paper web.</a></li>\n<li><a href=\"https://tarufu.info/ubuntu_xrdp_color_profile/\">xrdpでリモートデスクトップしたときの「カラープロファイルを作成するには認証が必要です」を消す | tarufulog</a></li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-01T21:40:33+09:00","message":"Add articles\n","hash":"521b02f06a06258b8320ec14260fb6784cc40189"}],"date_published":"2020-12-01T18:17:21+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/vivaldi-search-english","url":"https://memo.yammer.jp/posts/vivaldi-search-english","title":"ブラウザの検索バーから英語サイトに絞って検索出来るようにする (Vivaldi編)","summary":"コードを書いていると, 英語のサイトに絞ってGoogle検索したいときがままある。 日本語だと文献がみつからなかったり、いかがでしたかブログのような検索結果ばかりが上位に並んだりして、公式のドキュメントだったりに飛ぶには英語で探したほうが早かったりする。 いままでは検索言語を変更する度に、Googleの検索結果ページからオプションを指定できるページに飛んで言語を変更して... とやっていたのだが、結構面倒くさいので楽に出来る方法がないかと考えて思いついたのが以下のやり方。 設定内容 URLのクエリパラメータで検索結果の対象言語(lr=lang_en)と表示言語(hl=en) 1 を指定できるの","content_html":"<p>コードを書いていると, 英語のサイトに絞ってGoogle検索したいときがままある。\n日本語だと文献がみつからなかったり、いかがでしたかブログのような検索結果ばかりが上位に並んだりして、公式のドキュメントだったりに飛ぶには英語で探したほうが早かったりする。</p>\n<p>いままでは検索言語を変更する度に、Googleの検索結果ページからオプションを指定できるページに飛んで言語を変更して... とやっていたのだが、結構面倒くさいので楽に出来る方法がないかと考えて思いついたのが以下のやり方。</p>\n<h2>設定内容</h2>\n<p>URLのクエリパラメータで検索結果の対象言語(<code>lr=lang_en</code>)と表示言語(<code>hl=en</code>) <sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup> を指定できるので、それらを言語ごとに指定して別の検索エンジンとしてブラウザに登録する。</p>\n<p>参考: <a href=\"https://support.google.com/gsa/answer/6329265?hl=en\">Request Format - Google Search Appliance Help</a> <sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<p>今メインで使っているブラウザであるVivaldiを対象に設定方法を記すが、他のブラウザでも多分同じことが出来ると思う。\n(Vivaldi編と名乗っているが他のブラウザ編は多分公開されない。)</p>\n<ol>\n<li>アドレスバーに <code>vivaldi://setings/search/</code> と入力して検索エンジンの設定画面を開く</li>\n<li>次の検索エンジンを追加する</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>ニックネーム</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Google(en)</td>\n<td>ge</td>\n<td><code>https://www.google.com/search?lr=lang_en&#x26;hl=en&#x26;q=%s</code></td>\n</tr>\n<tr>\n<td>Google(jp)</td>\n<td>gj</td>\n<td><code>https://www.google.com/search?lr=lang_ja&#x26;hl=ja&#x26;q=%s</code></td>\n</tr>\n</tbody>\n</table>\n<p>Vivaldi では、URLの中に埋め込んだ%sが検索ワードに置換されて送信される。</p>\n<p><img src=\"https://blob.yammer.jp/vivaldi-settings-search.png\" alt=\"vivaldiの検索エンジン設定画面\"></p>\n<h2>検索時</h2>\n<p>Vivaldi には検索エンジンにニックネームをつけることができるので、これを活用して検索する。</p>\n<p>例えばブラウザのアドレスバーに <code>gj golang</code> と入力してエンターを押せば日本語の検索結果が、<code>ge golang</code> と入力してエンターを押せば英語の検索結果が表示される。</p>\n<p><img src=\"https://blob.yammer.jp/google-search-golang-ja.png\" alt=\"Googleでgolangと検索した結果 (日本語版)\">\n<img src=\"https://blob.yammer.jp/google-search-golang-en.png\" alt=\"Googleでgolangと検索した結果 (英語版)\"></p>\n<p>便利。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>表示言語を変える必要は本来無いのだが、今どの言語で検索しているかわかりやすいので設定している。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>このGoogleのドキュメントも日本語版は無いので、英語ロケールなら1ページ目の中にあったが日本語ロケールでは中々ヒットしない。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-11-18T02:47:11+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/sudo-user-home-dir","url":"https://memo.yammer.jp/posts/sudo-user-home-dir","title":"sudoしたユーザのホームディレクトリが知りたい","summary":"TL;DR ... ホームディレクトリはsudoで実行したかにかかわらず, getent passwd ${SUDO_USER:-$USER} | cut -d: -f6 で得られる. 問題と解決策 bash において, ログインユーザ名やホームディレクトリは環境変数から取得できる. $ echo \"$USER\" yammerjp $ echo \"$HOME\" /home/yammerjp しかしながら, sudo で実行される場合, これらは root のものとして扱われてしまう. $ echo 'echo \"$USER\"' | sudo bash root $ echo 'echo \"$H","content_html":"<p>TL;DR ... ホームディレクトリはsudoで実行したかにかかわらず, <code>getent passwd ${SUDO_USER:-$USER} | cut -d: -f6</code> で得られる.</p>\n<h2>問題と解決策</h2>\n<p>bash において, ログインユーザ名やホームディレクトリは環境変数から取得できる.</p>\n<pre><code class=\"hljs language-shell\">$ echo \"$USER\"\nyammerjp\n$ echo \"$HOME\"\n/home/yammerjp\n</code></pre>\n<p>しかしながら, sudo で実行される場合, これらは root のものとして扱われてしまう.</p>\n<pre><code class=\"hljs language-shell\">$ echo 'echo \"$USER\"' | sudo bash\nroot\n$ echo 'echo \"$HOME\"' | sudo bash\n/root\n</code></pre>\n<p>こうなると, sudo のシェルスクリプトの中で, 実行ユーザの名前やホームディレクトリを知りたいときに困る.</p>\n<p>これを解決するには, 環境変数 <code>$SUDO_USER</code> を用いればよい.</p>\n<pre><code class=\"hljs language-shell\">$ echo 'echo \"$SUDO_USER\"' | bash\n\n$ echo 'echo \"$SUDO_USER\"' | sudo bash\nyammerjp\n</code></pre>\n<p>さらに特定のユーザ名のホームディレクトリもこれを使って求められる.</p>\n<pre><code class=\"hljs language-shell\">$ cat username.sh\n#!/bin/bash\necho ${SUDO_USER:-$USER}\ngetent passwd ${SUDO_USER:-$USER} | cut -d: -f6\n\n$ bash username.sh\nyammerjp\n/home/yammerjp\n$ sudo bash username.sh\nyammerjp\n/home/yammerjp\n</code></pre>\n<h2>何故 <code>getent passwd ${SUDO_USER:-$USER} | cut -d: -f6</code> で得られるのか</h2>\n<h3><code>${SUDO_USER:-$USER}</code></h3>\n<p><code>$SUDO_USER</code> には, sudo実行時には元のユーザ名が入っており, 非sudo時には空になる.\n<code>${SUDO_USER:-$USER}</code> を用いると, <code>$SUDO_USER</code> の値もしくはこれが空なら <code>$USER</code> の値を表す.</p>\n<h3><code>getent</code></h3>\n<p><code>getent passwd</code> は, システムの認証方法にかかわらず (例えばLDAPを使っていたとしても) ユーザの認証情報 を <code>/etc/passwd</code> に記述される形式で取得できる.</p>\n<p><code>/etc/passwd</code> の各行は : (コロン) 区切りでユーザ名やホームディレクトリやログインシェルを含むので, 適切に cut してあげると ホームディレクトリが得られる.</p>\n<h2>実験用のシェルスクリプト</h2>\n<pre><code class=\"hljs language-bash\">#!/bin/bash\n\necho -e \"\\n$ whoami\"\nwhoami\n\necho -e \"\\n$ echo \\$HOME\"\necho $HOME\n\necho -e \"\\n$ echo \\$USER\"\necho $USER\n\necho -e \"\\n$ echo \\$USERNAME\"\necho $USERNAME\n\necho -e \"\\n$ getent passwd \\$USER | cut -d: -f6\"\ngetent passwd $USER | cut -d: -f6\n\necho -e \"\\n$ echo \\$SUDO_USER\"\necho $SUDO_USER\n\necho -e \"\\n$ echo \\${SUDO_USER:-\\$USER}\"\necho ${SUDO_USER:-$USER}\n\necho -e \"\\n$ getent passwd \\${SUDO_USER:-\\$USER} | cut -d: -f6\"\ngetent passwd ${SUDO_USER:-$USER} | cut -d: -f6\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-11-03T02:22:11+09:00","message":"Add a post\n","hash":"cea5d70123b7fd24accb48afc857f3d6671f25bf"}],"date_published":"2020-11-03T01:54:49+09:00","tags":["bash","Shell","Linux"]},{"id":"https://memo.yammer.jp/posts/tmux","url":"https://memo.yammer.jp/posts/tmux","title":"tmuxに入門する","summary":"vim を使うようになってから特に複数のターミナルウィンドウを開くことが多くなったので, 便利そうな tmux を使ってみる. 以前から存在は知っていたもののキーバインドが多くて慣れるの大変そうだと敬遠していたが, 自分の時間が出来たので良い機会だろう. tmuxとは GitHub の公式リポジトリでは以下のように説明されている. tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux m","content_html":"<p>vim を使うようになってから特に複数のターミナルウィンドウを開くことが多くなったので, 便利そうな tmux を使ってみる.\n以前から存在は知っていたもののキーバインドが多くて慣れるの大変そうだと敬遠していたが, 自分の時間が出来たので良い機会だろう.</p>\n<h2>tmuxとは</h2>\n<p>GitHub の公式リポジトリでは以下のように説明されている.</p>\n<blockquote>\n<p>tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.</p>\n</blockquote>\n<p>(<a href=\"https://github.com/tmux/tmux\">tmux/tmux: tmux source code</a>)</p>\n<p>(意訳)\ntmux はターミナルマルチプレクサである.\nこれは一つの画面から複数の画面を作成し, アクセス, 制御が出来る.\ntmux は画面から分離してバックグラウンドで動作を継続し, のちに再度接続できる.)</p>\n<p>tmux は次のことを実現する.</p>\n<ul>\n<li>一つのターミナルを画面分割して2つ以上のターミナルとして扱える. (開発時に, エディタ, git, 各種CLIなどを並行して操作できる)</li>\n<li>tmux を離れてもセッションを継続できる. (ssh の際に不意にセッションが切れても, 再度つなぎ直すと状態を復元してくれる)</li>\n</ul>\n<h2>SetUp</h2>\n<pre><code class=\"hljs language-shell\"># インストール\n# 環境: Ubuntu 20.04\n$ sudo apt install tmux -y\n\n# macOSなら\n# $ brew install tmux\n\n# 起動\n$ tmux\n</code></pre>\n<h2>とりあえず使ってみる</h2>\n<ol>\n<li>ターミナルで <code>$ tmux</code> を実行し tmux を起動する.</li>\n<li>デフォルトのキーバインドでいくつか動作を実行してみる.</li>\n<li><code>Ctrl-b %</code> (<code>Ctrl</code>と<code>b</code>を同時押しして離し, 続けて<code>%</code>を入力) を押すと, ペインを作成 (画面を左右に分割) できる.</li>\n<li><code>Ctrl-b 矢印キー</code> で作成したペイン間を移動できる.</li>\n<li><code>Ctrl-b c</code> でウィンドウを作成できる.</li>\n<li><code>Ctrl-b w</code> 作成したウィンドウを選択できる.</li>\n<li><code>Ctrl-b x</code> でペインを閉じることができる.</li>\n<li><code>Ctrl-b d</code> でセッションをデタッチできる. (バックグラウンドでセッションを維持したまま, tmuxから抜ける.)</li>\n<li>ターミナルで <code>$ tmux a</code> と実行すると,前回実行していたセッションをアタッチできる. (バックグラウンドのセッションに接続.)</li>\n</ol>\n<p>このようにして画面を分割したり, セッションを維持したままターミナルから離れたり出来る.</p>\n<p>その他のデフォルトのキーバインドは <a href=\"http://www.tohoho-web.com/ex/tmux.html\">tmux入門 - とほほのWWW入門</a> が参考になる.</p>\n<p>tmux は複数のターミナルを束ねるが, それは次のような構造になっている.</p>\n<ul>\n<li>tmux は複数のセッションを持てる.</li>\n<li>セッションは複数のウィンドウを持てる.</li>\n<li>ウィンドウは複数のペインを持てる. (画面分割)</li>\n</ul>\n<hr>\n<p>基本は以上だが, その他にも使い切れないほど沢山の機能があるので, 以降では便利そうな機能を抽出のうえカスタマイズして使いやすくする.</p>\n<h2>好みの状態にカスタマイズする</h2>\n<h3>好みのペイン分割をするコマンドを作る</h3>\n<p>好みのペイン分割をすぐにできるようなスクリプトを作っておく.</p>\n<pre><code class=\"hljs language-shell\">$ echo 'alias ide=\"bash ~/.tmux-ide.sh\"' >> .bashrc\n$ vim ~/.tmux-ide.sh\n</code></pre>\n<pre><code class=\"hljs language-bash\">#!/bin/bash\n\n# ~/.tmux-ide.sh\n\ntmux split-window -d -t 0        # 上下に画面分割\ntmux send-keys -t 0 vim C-m      # ペイン0 (画面上部) で vim を実行\ntmux split-window -h -t 1        # ペイン1 (画面下部) を左右に分割\ntmux select-pane -t 0            # フォーカスをペイン0に移動する\ntmux resize-pane -t 0 -D 10      # ペイン0を下方向に広げる\ntmux send-keys -t 0 ':e ~/dev/'  # ペイン0 に ':e ~/dev/'と入力する (vim でファイルを開くことを助ける)\n</code></pre>\n<p>こうすると, tmux 起動後や新しいウィンドウ作成後に <code>$ ide</code> と打つと, 自動で3つのペインに画面分割をしてvimを起動してくれる.</p>\n<h3>Vim のカラースキームがおかしくなる件を修正</h3>\n<p>vimのカラースキームが未設定だと, tmux内のvimとtmux外のvimで配色が変わるので, なんでもいいからカラースキームを設定する</p>\n<pre><code class=\"hljs language-shell\">$ echo 'colorscheme pablo' >> ~/.vimrc\n</code></pre>\n<h3>~/.tmux.confを作成</h3>\n<ul>\n<li>tmux は表示やキーバインドをカスタマイズできる.</li>\n<li><code>~/.tmux.conf</code>に設定を書き込むと, デフォルトで読み込んでくれる.</li>\n<li>tmux を既に起動している状態でも, ファイル保存後に, <code>prefix :source ~/.tmux.conf</code>で設定ファイルをリロード可能.</li>\n</ul>\n<p>tmux は出来ることが多いが, そのためのキーバインドを覚えるのが大変そう.\n他人の設定した tmux を触らなければならないこともそう無いだろうし, 最初からカスタマイズして覚えやすそう/使いやすそうなキーに設定することにする.</p>\n<p>設定内容は検索すると沢山出てくるので, 適当なものを取り込むと良いだろう.\n記事末尾に参考となりそうなページをを記載する.</p>\n<p>以下では, 次のような内容の設定を行う.</p>\n<ul>\n<li>prefix キーの変更</li>\n<li>色の変更</li>\n<li>status line に表示する情報を変更</li>\n<li>マウス操作の有効化</li>\n<li>各種キーバインドの変更</li>\n</ul>\n<pre><code class=\"hljs language-shell\">$ vim ~/.tmux.conf\n</code></pre>\n<pre><code># ~/.tmux.conf\n\n# tmux起動時のシェルをzshにする\nset-option -g default-shell /bin/zsh\n\n# prefixキーをC-jに変更する\nset -g prefix C-j\n\n# ウィンドウ終了\nbind Q kill-window\n\n\n## --------------------見た目--------------------\n\n# tmuxを256色表示出来るようにする\nset-option -g default-terminal screen-256color\nset -g terminal-overrides 'xterm:colors=256'\n\n# 非アクティブなウィンドウの背景色を灰色にする\nset-option -g window-style 'bg=#444444'\n# アクティブなウィンドウの背景色を黒色にする\nset-option -g window-active-style 'bg=#222222'\n\n# status-left の最大の長さを指定する。\nset-option -g status-left-length 20\n# status-left のフォーマットを指定する。\nset-option -g status-left \"#[fg=colour255,bg=colour241]Session: #S #[default]\"\n\n# window-status のフォーマットを指定する。\nset-window-option -g window-status-format \" #I: #W \"\n# カレントウィンドウの window-status のフォーマットを指定する\nset-window-option -g window-status-current-format \"#[fg=colour255,bg=colour27,bold] #I: #W #[default]\"\n\n# 現在時刻を最右に表示\nset-option -g status-right '%Y-%m-%d(%a) %H:%M:%S'\n\n# ステータスバーを1秒毎に描画し直す\nset-option -g status-interval 1\n\n\n## --------------------マウス--------------------\n\n#マウス操作を有効にする\nset-option -g mouse on\n\n# スクロールアップするとコピーモードに入る\nbind-key -n WheelUpPane if-shell -F -t = \"#{mouse_any_flag}\" \"send-keys -M\" \"if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'\"\n\n# 最後までスクロールダウンするとコピーモードを抜ける\nbind-key -n WheelDownPane select-pane -t= \\; send-keys -M\n\n\n## --------------------ペイン--------------------\n\n# vimのキーバインドでペインを移動する\nbind h select-pane -L\nbind j select-pane -D\nbind k select-pane -U\nbind l select-pane -R\n\n# vimのキーバインドでペインをリサイズする\nbind -r H resize-pane -L 5\nbind -r J resize-pane -D 5\nbind -r K resize-pane -U 5\nbind -r L resize-pane -R 5\n\n# ペインを垂直分割する\nbind v split-window -h -c '#{pane_current_path}'\n# ペインを水平分割する\nbind s split-window -v -c '#{pane_current_path}'\n\n# ペイン番号を表示\nbind i display-panes\n\n# ペインを終了\nbind q kill-pane\n</code></pre>\n<h3>Keybinds</h3>\n<p>.tmux.conf にて キーバインドを書き換え済みのものは is default ? を no と表記している.</p>\n<h3>基本</h3>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>description</th>\n<th>is default ?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl-j</td>\n<td>prefix</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix  ?</td>\n<td>キーバインド一覧</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h3>セッション</h3>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>description</th>\n<th>is default ?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>prefix  d</td>\n<td>現在のセッションを継続したままtmuxを閉じる (detach)</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h3>ウィンドウ</h3>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>description</th>\n<th>is default ?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>prefix c</td>\n<td>新規ウィンドウの作成/追加</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix w</td>\n<td>ウィンドウの一覧</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix Q</td>\n<td>ウィンドウの破棄</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix n</td>\n<td>次のウィンドウへ移動</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix p</td>\n<td>前のウィンドウへ移動</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix 数字</td>\n<td>当該番号のウィンドウへ移動</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix &#x3C;</td>\n<td>当該ウィンドウをリネームや移動等</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h3>ペイン</h3>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>description</th>\n<th>is default ?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>prefix v</td>\n<td>左右にペイン分割</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix s</td>\n<td>上下ペイン分割</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix h</td>\n<td>左のペインへ移動</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix j</td>\n<td>下のペインへ移動</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix k</td>\n<td>上のペインへ移動</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix l</td>\n<td>右のペインへ移動</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix H</td>\n<td>ペインを左にリサイズ</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix J</td>\n<td>ペインを下にリサイズ</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix K</td>\n<td>ペインを上にリサイズ</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix L</td>\n<td>ペインを右にリサイズ</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix q</td>\n<td>ペインを破棄</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix i</td>\n<td>ペイン番号を表示 (続けて数字を入力すると当該ペインへ移動)</td>\n<td>no</td>\n</tr>\n<tr>\n<td>prefix ></td>\n<td>当該ペインをリネームや移動等</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h3>コピー&#x26;ペースト</h3>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>description</th>\n<th>is default ?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>prefix [</td>\n<td>コピーモード開始</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix Space</td>\n<td>コピー開始位置決定</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix Enter</td>\n<td>コピー終了位置決定</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>prefix ]</td>\n<td>コピーした内容の貼り付け</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/tmux/tmux\">tmux/tmux: tmux source code</a></li>\n<li><a href=\"https://github.com/zchee/tmux-ja/blob/master/tmux-ja.rst\">tmux-ja/tmux-ja.rst at master · zchee/tmux-ja</a></li>\n<li><a href=\"https://blog.inkdrop.info/vscode-like-environment-with-vim-tmux-4c2bfe17d31e\">VSCode-like environment with vim + tmux | by Takuya Matsuyama | Dev as Life</a></li>\n<li><a href=\"https://qiita.com/nl0_blu/items/9d207a70ccc8467f7bab\">tmuxを必要最低限で入門して使う - Qiita</a></li>\n<li><a href=\"http://www.tohoho-web.com/ex/tmux.html\">tmux入門 - とほほのWWW入門</a></li>\n<li><a href=\"https://qiita.com/nojima/items/9bc576c922da3604a72b\">tmux の status line の設定方法 - Qiita</a></li>\n<li><a href=\"https://qiita.com/zwirky/items/adbf22abad7d7822456b\">tmuxで快適なターミナル生活を送ろう - Qiita</a></li>\n<li><a href=\"http://kanjuku-tomato.blogspot.com/2014/03/tmux.html\">新規tmuxセッション起動時に自動で複数のウィンドウを作成してペイン分割する - 完熟トマト</a></li>\n<li><a href=\"https://gp-standard.com/tmux%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B9%E6%93%8D%E4%BD%9C%E3%82%92%E4%BE%BF%E5%88%A9%E3%81%AB%EF%BC%81-tmux-conf%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E8%A8%AD/\">tmuxでマウス操作を便利に！ tmux.confファイルを作って設定をカスタマイズする。 | Full Stack Enginear</a></li>\n<li><a href=\"https://qiita.com/mikene_koko/items/2867a6fe2eb73db6562e\">僕の考えた最強のtmux.conf - Qiita</a></li>\n</ul>\n<hr>\n<p>追伸: 10月に何も書いてないのもしゃくなのでギリギリに投稿。最近は卒業研究を進めている。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-31T23:58:30+09:00","message":"Update tmux.md\n","hash":"9538e6b89073ad3b3e9c73aa485963fbfe252ed5"},{"date":"2020-10-31T23:56:18+09:00","message":"Add a post of tmux\n","hash":"944a32bd0a69ee4225e2e730e48b925051e1cdef"}],"date_published":"2020-10-31T23:53:54+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/webteckbook","url":"https://memo.yammer.jp/posts/webteckbook","title":"積読本だった\"Webを支える技術\"を読んだ感想と、本を読むための心がけ","summary":"「Webを支える技術 HTTP, URI, HTML, そしてREST」を改めて読み直した。 年始に買って途中まで読んでいたものだ。 書籍 \"Webを支える技術\" について 本を選んだ背景と読んだ感想 書籍購入当時はスマホアプリのWeb APIを開発しており、URIの設計の参考にしたくて手にとった。 RESTという考え方やAPI設計についてとても参考になり、 良い設計とは何かを知ることが出来た。 これまでは用意されたWeb APIを使う側で、URI設計について意識することがなく無意識に良くつくられたURIのAPIを使っていた。 一方で設計するためにはまず利用者として当たり前だったことを言語化し","content_html":"<p><a href=\"https://www.amazon.co.jp/Web%E3%82%92%E6%94%AF%E3%81%88%E3%82%8B%E6%8A%80%E8%A1%93-HTTP%E3%80%81URI%E3%80%81HTML%E3%80%81%E3%81%9D%E3%81%97%E3%81%A6REST-WEB-PRESS-plus/dp/4774142042\">「Webを支える技術 HTTP, URI, HTML, そしてREST」</a>を改めて読み直した。\n年始に買って途中まで読んでいたものだ。</p>\n<h2>書籍 \"Webを支える技術\" について</h2>\n<h3>本を選んだ背景と読んだ感想</h3>\n<p>書籍購入当時はスマホアプリのWeb APIを開発しており、URIの設計の参考にしたくて手にとった。\nRESTという考え方やAPI設計についてとても参考になり、 良い設計とは何かを知ることが出来た。</p>\n<p>これまでは用意されたWeb APIを使う側で、URI設計について意識することがなく無意識に良くつくられたURIのAPIを使っていた。\n一方で設計するためにはまず利用者として当たり前だったことを言語化して理解する必要があり、その当たり前がRESTにより成り立っていることを学べた。</p>\n<h3>書籍内容と現在の状況の違い</h3>\n<p>書籍の第一版は2010年で今から10年前なので、現代と少し合わない点もある。</p>\n<ul>\n<li>初版時にはHTTP/2 HTTP/3は存在しておらず、HTTP/1.1が最新であることを前提として書かれている</li>\n<li>セマンティックWeb は2020年の今でも浸透していない</li>\n<li><s>Web APIとして、XML、Atom / AtomPubはあまり使われなくなった</s>\n<small>(追記 2020/10/4 : なんの裏付けもありません。サービスの目的によって使う/使わないがあるだけで、あまり使われなくなったというのは言い過ぎかも。XMLはあまり使われなくなりJSONが一般的になった、ということは言えるんじゃ無いかな。)</small></li>\n</ul>\n<p>とはいえ本の本筋は2020年でもきっと多分に有用であろう。</p>\n<h3>本から学んだこと</h3>\n<p>詳細は本に譲るが、私がこの本から学んだエッセンスには例えば次のようなものがある。</p>\n<h4>1. RESTについて</h4>\n<p>REST とは今日のWebにおいて適用されているアーキテクチャパターンのことで、次の制約をもつ。</p>\n<ul>\n<li>クライアント/サーバモデル</li>\n<li>ステートレスサーバ</li>\n<li>キャッシュ</li>\n<li>統一インタフェース</li>\n<li>階層化システム</li>\n<li>コードオンデマンド</li>\n</ul>\n<p>第1部第3章 p36あたりには上述のようなことが書かれている。</p>\n<p>インターネットは、遅延が大きく、また通信相手から応答があるか保証のない分散システムである。\nこのインターネットにおいて、端末(プログラム)(/人間) 間のインタフェースをどのように設計すべきかの原則、指針を示しているのがRESTだ。\n設計のときに参考になるアーキテクチャパターンとしてRESTが存在し、RESTの要素とはなんなのかを分解して解説している。</p>\n<h4>2. リソースのモデル化とURI設計</h4>\n<blockquote>\n<p>検索のような機能は、検索行為をモデル化するのではなく、検索結果をモデル化する。</p>\n</blockquote>\n<p>Webサービス/WebAPI(以下Webサービスと呼ぶ)を設計する時、\"動作\"をリソースとして割り当てる(=>URIで表現する)のはよくない。\nWebサービスにおける動作はCRUDであり、HTTPのメソッドであるGET/POST/PUT/DELETE で表現すべきである。</p>\n<p>例えば検索機能は、\"検索結果をGETで取得する\"と表現するのが簡潔である。\nGoogleの検索結果のURIは <code>https://google.com/search?q=hoge</code> となっているが、ここで出てくるsearchは検索行為を表しているのではなく検索結果を表している。\n検索行為に注目してしまうと、HTTPを拡張してSearchメソッドを作ったり、検索内容をPOSTしてサーバに検索しろとクライアントに命令させたりすることになる。\nこれはわかりづらいので良い設計といえない。</p>\n<p>検索に限らず、リソースをモデル化するとき(すなわちそれはリソースを表現するURIになりうる)は、動作ではなく名詞で表せるものに注目すべきだ。</p>\n<h4>3. 人間とコンピュータの統一インタフェース</h4>\n<blockquote>\n<p>リソース設計の際は、WebサービスとWeb APIを分けて考えない。</p>\n</blockquote>\n<p>良いリソースのモデル化は人間にとってもわかりやすいし、Web APIとしても使いやすくなる。\nなので、WebAPI用にリソースをモデル化してURIで表現し、人間にはまた別にモデル化して、、、ということは避けるべき。</p>\n<h2>積読本を読み切った感想と、本を読むスピードについて</h2>\n<p>さて、本の内容はここまでにして、以下は今回の積読消化の感想とそこから学んだことを記す。</p>\n<p>本を読むスピードは状況や意識で大きく変わる。</p>\n<p>1月に読んでいたときは理解できないところがあると調べて解決してから進める読み方だった。\n読むスピードが遅くそのまま途中で止まっていた。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<p>一方、今回9月は数時間で一気に読み切った。\n気になったところはメモを取ることにして、読み切るために興味のわかないところ(例えばAtom/AtomPub等の項)は斜め読みにするなどして進めた。</p>\n<p>本を読むスピードは自分の意識で変わる面がある。\n細かいところまで理解しながらゆっくり読み進めるか、全体を俯瞰するためにとにかく読み切ることを目標に進めるかという意識だ。\nまた、自分の知識量に応じて変わる面もある。\n自分が知っていることが多く載っている本は早く読めるし、知らないことが多く載っている本は時間がかかる。\nさらに、自分のテンションや気分で変わる面もある。\n読む気があるとき、内容に興味が湧いているとき、知的好奇心から本の内容を欲しているときは、どんどんページが進んで苦なくはやく読める。</p>\n<p>今回は一気に読み切ろうという心持ち、RESTって結局なんだっけという思いからくる知的好奇心、前回よりも知識量が増え内容の理解が進むことなど様々なことが重なったのが読み切れた要因だろう。</p>\n<p>私は気分が乗っていないときに何も考えずに本を読むと、丁寧にゆっくり読む癖がある。\n他方、本の全体像をつかみ必要なところだけを読んだり、必要になったときに読み直せるようインデックスを貼る気持ちで読んだりするほうが効率が良いのではないかと感じる。\n実際今回の本も読み切って感じたが、後半には実例を交えたURIの設計について述べられた章があり、1月にここを読んでいれば身になるものがさらにあったはずだった。\n今後はどんな読み方/スピードで本を読むかを読む前に考えるようにしたい。</p>\n<p>また、モチベーションの大切さも感じた。\nプログラムを書くときもそうであるし、本を読むときもそうであるが、(少なくとも私にとって)物事を進めるにはモチベーションがとても重要だと思う。\nモチベーションの高まっているときに躊躇なく進めることを心がけたい。\n(さらには自分のモチベーションを導けるようになりたい。)</p>\n<p>そんなこんなで積ん読を消化した勢いで他の本も読むぞ。</p>\n<hr>\n<p>参考: <a href=\"http://yohei-y.blogspot.com/\">yohei-y:weblog</a>(著者 山本陽平さんのブログ) ... この記事のURL<code>webteckbook</code>はブログに記載された内容を参考にした。</p>\n<p>追記: (2020/10/04) 不要な改行を削除</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>何故積ん読した当時のことを鮮明に覚えているかというと、本を読んでいた時が時間に追われながらコードを書きながら年末年始で帰省して親戚と過ごしていた映像記憶が蘇ってきたからである。 エピソード記憶は強烈だ。 当時はAPIの設計についても考えなければならなかったがDockerを含むインフラについても学ばねばならなかったので、のんびり本を読み切ってる場合ではない！という心情だったのだろう。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-05T19:47:55+09:00","message":"注釈内の改行を削除してremark-footnoteで正しく変換されるよう修正\n","hash":"1741da28aa87b809153d2c6799f500b28fc236a8"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-10-04T22:54:02+09:00","message":"Delete <br/>\n","hash":"3c4b699d125e119feb760ce5dcf6e8a28d520da2"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-10-04T15:25:03+09:00","message":"Update webteckbook\n","hash":"69e113df2bb6e7ec64911bc1a98cb2a7c9df7b7d"},{"date":"2020-09-29T16:13:58+09:00","message":"Fix a style\n","hash":"427780998f8898b66939511f0ba6c367c5f6fb82"},{"date":"2020-09-29T03:53:34+09:00","message":"Add a post","hash":"78a18fd8d5ec665a30912dfb688e0f19491358a5"}],"date_published":"2020-09-29T03:35:02+09:00","tags":["本","インターネット"]},{"id":"https://memo.yammer.jp/posts/keymap-202009","url":"https://memo.yammer.jp/posts/keymap-202009","title":"2020年9月のキーマップ for lily58","summary":"以前記事に書いたとおり、分割キーボード lily58を使っている。 自作してから1ヶ月以上経つが、何度かキーマップを書き換えており、順調に配列沼にハマっている。 丁度、しばらく使っていてしっくり来ないところを昨日書き換えたばかり。 せっかくなので記録がてら記事に残しておく。 https://twitter.com/yammerjp/status/1309153335530848256 3レイヤーで、最下段の内側から2つめのキーを押している間はレイヤーが切り替わる。 この配列は次のような方針で作られている。 基本はqwertyのUS配列に寄せる ホームポジションとそれに隣接するキーでなるべく完結","content_html":"<p><a href=\"/posts/lily58-pro-ble/\">以前記事に書いた</a>とおり、分割キーボード lily58を使っている。</p>\n<p>自作してから1ヶ月以上経つが、何度かキーマップを書き換えており、順調に配列沼にハマっている。</p>\n<p>丁度、しばらく使っていてしっくり来ないところを昨日書き換えたばかり。\nせっかくなので記録がてら記事に残しておく。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">lily58のキーマップを変えた。<br><br>変更は<br>- コロンとバックスラッシュをlayer0に<br>- 中央のGと<br>Hに挟まれたキーを使わないことに<br><br>40%っぽく1段目を使っていないのは1ヶ月前くらいから。 <a href=\"https://t.co/jWCNcd9f5p\">pic.twitter.com/jWCNcd9f5p</a></p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1309153335530848256?ref_src=twsrc%5Etfw\">September 24, 2020</a></blockquote></p>\n<p>3レイヤーで、最下段の内側から2つめのキーを押している間はレイヤーが切り替わる。</p>\n<p>この配列は次のような方針で作られている。</p>\n<ul>\n<li>基本はqwertyのUS配列に寄せる</li>\n<li>ホームポジションとそれに隣接するキーでなるべく完結させる</li>\n<li>Layer0は英字, Layer1に記号と数字, Layer2に制御キーを割り当てる</li>\n<li>方向キーはvim likeにhjklに割り当てる</li>\n<li>(コードを書くとき等)記号の入力頻度が高いわりに私の入力スピードが遅いので、なるべく打ちやすいところに記号を配置する。</li>\n</ul>\n<p>lily58はもともと60%だが、最上段のキーは使っていない。\nまた内側に括弧に割り当てやすいキーがあるが、それらのキーには割当していない。</p>\n<p>初めて自作キーボードを購入する際は、40%キーボードはキーが少なすぎる過激な配列で、自分には独立した数字キーは必要だと思っていた。\nしかし lily58 が届いていざ 打ってみると、数字キーは遠くて手が大きく動き、押しづらさを感じる。\n遠いキーはブラインドタッチの障壁になりそうだと思ったのだ。</p>\n<p>そのあと1ヶ月くらい使って、内側の括弧に割り当てやすいキー (GとHに挟まれたキー)も、意外とホームポジションから遠く押しづらいことに気づいた。</p>\n<p>というわけで上のツイートの配列に落ち着いている。</p>\n<p>40%でも問題なさそうなので、そのうち<a href=\"https://olkb.com/collections/planck\">planck</a>や<a href=\"https://drop.com/buy/massdrop-x-olkb-planck-light-mechanical-keyboard\">planck light</a>、<a href=\"https://yushakobo.jp/shop/corne-cherry/\">Corne Cherry</a>といった、40%の column-staggered / Ortholiner なキーボードが欲しい。</p>\n<p>というわけで、今後も変更があれば随時記録していきたい。</p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-09-25T15:02:53+09:00","message":"Fix articles\n","hash":"3543b81b7322a8cac8f4f456445480bb0d1bfc5e"},{"date":"2020-09-25T12:58:23+09:00","message":"Add keymap-202009.md\n","hash":"535ea7a6c673e808124be055a53374409d6bc1e6"}],"date_published":"2020-09-25T12:53:30+09:00","tags":["自作キーボード","Lily58","キーマップ"]},{"id":"https://memo.yammer.jp/posts/makefile-named-pipe","url":"https://memo.yammer.jp/posts/makefile-named-pipe","title":"Makefileの中で名前付きパイプ(bash記法)を使いたかった。2つのコマンド実行結果を比較する。","summary":"今日は小さな Tips。 make は1970年代に生まれ、C言語のビルドなどでよく用いられるビルドツールだ。 Makefileにビルド手順を記述しておき $make で一連の流れを実行できる。 古からあるビルドツールであるから、インデントがタブ文字でないといけないなどの制約があるが、環境に依存しづらいので最近はよく使うようにしている。 Makefile にはシェルスクリプトのように実行するコマンドを記述するが、この中ではbash独自の拡張記法には対応していない。(Makefile独自の記法があったりする) 2つのコマンドの実行結果を比較したい時、bashでは次のように名前付きパイプを使うと簡","content_html":"<p>今日は小さな Tips。</p>\n<p>make は1970年代に生まれ、C言語のビルドなどでよく用いられるビルドツールだ。\nMakefileにビルド手順を記述しておき <code>$make</code> で一連の流れを実行できる。</p>\n<p>古からあるビルドツールであるから、インデントがタブ文字でないといけないなどの制約があるが、環境に依存しづらいので最近はよく使うようにしている。</p>\n<p>Makefile にはシェルスクリプトのように実行するコマンドを記述するが、この中ではbash独自の拡張記法には対応していない。(Makefile独自の記法があったりする)</p>\n<p>2つのコマンドの実行結果を比較したい時、bashでは次のように名前付きパイプを使うと簡単に記述できる。</p>\n<pre><code class=\"hljs language-shell\">$ diff &#x3C;(echo 'hoge') &#x3C;(echo 'fuga')\n</code></pre>\n<p>これは独自の記法でありMakefileの中では使えない。</p>\n<p>そこで、名前付きパイプを避けて明示的にファイルディスクリプタを利用することで解決できる。</p>\n<pre><code class=\"hljs language-shell\">$ echo 'hoge' | (echo 'fuga' | diff /dev/fd/3 -) 3&#x3C;&#x26;0\n</code></pre>\n<p>まず、<code>$ehco 'hoge'</code>の実行結果を標準出力ではなくファイルディスクリプタ3に流し込む。\nそして、これ(/dev/fd/3)と<code>$echo 'fuga'</code>の実行結果の標準出力をdiffで比較している。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://yulii.github.io/diff-command-tips-20150627.html\">コマンド実行結果のdiff を取るといろいろ捗る - by and for engineers</a></li>\n<li><a href=\"https://ja.wikipedia.org/wiki/Make\">make - Wikipedia</a></li>\n</ul>\n<hr>\n<p>p.s. 本「<a href=\"https://www.amazon.co.jp/dp/B075ST51Y5/ref=dp-kindle-redirect?_encoding=UTF8&#x26;btkr=1\">ふつうのLinuxプログラミング</a>」を参考に <a href=\"https://github.com/yammerjp/cat\">cat コマンドを作っていて</a>、簡単なテストスクリプトをMakefileに書きたいと思ったところから、このスニペットを必要とした。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-09-17T16:58:00+09:00","message":"Add the article \"makefile-named-pipe\"\n","hash":"fbd41debe01585a97a5a4f460fe307c404cc3176"}],"date_published":"2020-09-17T16:31:46+09:00","tags":["Shell"]},{"id":"https://memo.yammer.jp/posts/lovelab-ec2","url":"https://memo.yammer.jp/posts/lovelab-ec2","title":"LoveLabのAPIサーバをAWS EC2上にセットアップする","summary":"以下過去の自分用のメモを移動。 昨冬、チーム開発で ToDo 管理の iPhone アプリ LoveLab を開発していた。 LoveLab API サーバは、docker-composeでまとめられている。 AWS の EC2 上で立ち上げるための手順を以下に示す。 EC2 instance作成後の作業 80番ポートを開放 sshでログイン 関係ソフトウェアをinstall $ sudo yum install -y docker $ sudo service docker start $ sudo usermod -a -G docker ec2-user $ sudo docker in","content_html":"<p>以下過去の自分用のメモを移動。</p>\n<p>昨冬、チーム開発で ToDo 管理の iPhone アプリ LoveLab を開発していた。</p>\n<p><a href=\"https://github.com/yammerjp/lovelab-api\">LoveLab API サーバ</a>は、docker-composeでまとめられている。\nAWS の EC2 上で立ち上げるための手順を以下に示す。</p>\n<h2>EC2 instance作成後の作業</h2>\n<ol>\n<li>\n<p>80番ポートを開放</p>\n</li>\n<li>\n<p>sshでログイン</p>\n</li>\n<li>\n<p>関係ソフトウェアをinstall</p>\n<pre><code class=\"hljs language-shell\">$ sudo yum install -y docker\n$ sudo service docker start\n$ sudo usermod -a -G docker ec2-user\n$ sudo docker info\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n$ docker-compose --version\n$ sudo yum install -y git\n</code></pre>\n</li>\n<li>\n<p>deploy.sshを入手</p>\n<pre><code class=\"hljs language-shell\">$ touch deploy.sh\n$ chmod u+x deploy.sh\n$ vim deploy.sh\n</code></pre>\n<pre><code class=\"hljs language-bash\">#!/bin/sh\n\n# deploy.sh\n\necho \"Deploying lovelab API server...\"\n\nif [ -d ./lovelab.heroku ]; then\n  echo \"Stop containers and delete old source files.\"\n  cd lovelab.heroku\n  docker-compose down\n  cd ../\n  rm -rf lovelab.heroku\nfi\n\necho \"Clone source files.\"\ngit clone https://github.com/yammerjp/lovelab.heroku.git\ncd lovelab.heroku\ngit checkout origin/release\ncp .env.example .env\necho \"docker-compose build\"\ndocker-compose build --no-cache\necho \"docekr-compose up\"\ndocker-compose up -d\n</code></pre>\n</li>\n</ol>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T23:22:08+09:00","message":"Add lovelab-ec2.md\n","hash":"7bbdd2c99f041a5de27f99d49e0297d2dc5547f6"}],"date_published":"2020-08-14T22:55:26+09:00","tags":["AWS","Shell"]},{"id":"https://memo.yammer.jp/posts/compiler-lalr1","url":"https://memo.yammer.jp/posts/compiler-lalr1","title":"LALR(1)構文解析を行いながら、コンパイラの構文解析を学ぶ","summary":"以下、過去の自分向けのメモの移動。 コンパイラの主要な処理に構文解析がある。 前回はLR0文法構文解析を行った。 今回は与えられたLALR(1)文法規則に基づいて構文解析するオートマトンを作り、構文解析の手法について整理する。 問題の文法規則 次のLALR(1)文法規則を受理するオートマトンと構文解析表をつくり、構文解析を行う。 E -> E + T E -> T T -> T * F T -> F F -> i F -> ( E ) First集合 First集合とは First(K) ... Kの還元前の終端記号列において、先頭に来る可能性のある終端記号の集合 First集合の求め方 最初","content_html":"<p>以下、過去の自分向けのメモの移動。</p>\n<p>コンパイラの主要な処理に構文解析がある。\n前回はLR0文法構文解析を行った。</p>\n<p>今回は与えられたLALR(1)文法規則に基づいて構文解析するオートマトンを作り、構文解析の手法について整理する。</p>\n<h2>問題の文法規則</h2>\n<p>次のLALR(1)文法規則を受理するオートマトンと構文解析表をつくり、構文解析を行う。</p>\n<pre><code>E -> E + T\nE -> T\nT -> T * F\nT -> F\nF -> i\nF -> ( E )\n</code></pre>\n<h2>First集合</h2>\n<h3>First集合とは</h3>\n<p><code>First(K)</code> ... Kの還元前の終端記号列において、先頭に来る可能性のある終端記号の集合</p>\n<h3>First集合の求め方</h3>\n<p>最初は空集合とする</p>\n<h4>非終端記号</h4>\n<p><code>First(K)</code> (<code>K</code>..非終端記号)について、\nKが左辺の文法規則が次の2つだったとき</p>\n<ul>\n<li><code>K -> abc...</code></li>\n<li><code>K -> PqRs...</code></li>\n</ul>\n<p><code>First(K) = First(K) + First(a) + First(P)</code></p>\n<h4>終端記号</h4>\n<p><code>First(k)</code> (<code>k</code>...終端記号)について、\n<code>First(k) = { k }</code></p>\n<h3>今回の問題におけるFirst集合</h3>\n<p><code>First(E) = First(T) = First(F) = { i ( }</code></p>\n<h2>Follow集合</h2>\n<h3>Follow集合とは</h3>\n<p><code>Follow(K)</code> ... <code>K</code>の次に来る可能性のある終端記号の集合</p>\n<h3>Follow集合の求め方</h3>\n<p>最初は<code>{}</code>\n開始記号のFollow集合に$を加える</p>\n<p><code>Follow(K)</code>について</p>\n<p>文法規則 <code>A -> wK</code> (<code>w</code>は任意の文字列)ならば\n<code>Follow(K) += Follow(A) </code></p>\n<p>文法規則 <code>A -> wKB</code>かつ <code>First(B)∋ε</code> ならば\n<code>Follow(K) += Follow(A)</code></p>\n<p>文法規則 <code>A -> xKy (y≠ε)</code> ならば\n<code>Follow(K) += First(y)</code></p>\n<h3>今回の問題におけるFollow集合</h3>\n<pre><code>Follow(E) = { $ } + First( ) ) + First( + ) = { $ ) + }\nFollow(T) = Follow(E) + First( * ) = { $ ) + * }\nFollow(F) = Follow(T) = { $ ) + * }\n</code></pre>\n<h2>LALR(1)正準集合</h2>\n<h3>I0</h3>\n<pre><code>E -> ・E + T [ $ + ]\nE -> ・T [ $ + ]\nT -> ・T * F [ $ + * ]\nT -> ・F [ $ + * ]\nF -> ・i [ $ + * ]\nF -> ・( E ) [ $ + * ]\n</code></pre>\n<h3>I1</h3>\n<pre><code>E -> E ・+ T [ $ + ]\n</code></pre>\n<h3>I2</h3>\n<pre><code>E -> T・ [ $ + ) ]\nT -> T ・* F [ $ + * ) ]\n</code></pre>\n<h3>I3</h3>\n<pre><code>T -> F・ [ $ + * ) ]\n</code></pre>\n<h3>I4</h3>\n<pre><code>F -> i・ [ $ + * ) ]\n</code></pre>\n<h3>I5</h3>\n<pre><code>F -> ( ・E ) [ $ + * ) ]\nE -> ・E + T [ + ) ]\nE -> ・T [ + ) ]\nT -> ・T * F [ + * ) ]\nT -> ・F [ + * ) ]\nF -> ・i [ + * ) ]\nF -> ・( E ) [ + * ) ]\n</code></pre>\n<h3>I6</h3>\n<pre><code>E -> E + ・T [ $ + ) ]\nT -> ・T * F [ $ + * ) ]\nT -> ・F [ $ + * ) ]\nF -> ・i [ $ + * ) ]\nF -> ・( E ) [ $ + * ) ]\n</code></pre>\n<h3>I7</h3>\n<pre><code>T -> T * ・F [ $ + * ) ]\nF -> ・i [ $ + * ) ]\nF -> ・( E ) [ $ + * ) ]\n</code></pre>\n<h3>I8</h3>\n<pre><code>F -> ( E ・) [ $ + * ) ]\nE -> E ・+ T [ + ) ]\n</code></pre>\n<h3>I9</h3>\n<pre><code>E -> E + T・ [ $ + ) ]\nT -> T ・* F [ $ + * ) ]\n</code></pre>\n<h3>I10</h3>\n<pre><code>T -> T * F・ [ $ + * ) ]\n</code></pre>\n<h3>I11</h3>\n<pre><code>F -> ( E )・ [ $ + * ) ]\n</code></pre>\n<h2>オートマトン</h2>\n<p>以上より、与えられた文法規則を満たす系列を受理するオートマトンをつくる。</p>\n<pre><code>digraph G {\n  rankdir=LR;\n  empty [label = \"\" shape = plaintext];\n  node [shape = doublecircle];I2 I9;\n  node [shape = circle];\n  empty -> I0 [label = \"start\"];\n  I0 -> I1 [label = \"E\"];\n  I0 -> I2 [label = \"T\"];\n  I0 -> I3 [label = \"F\"];\n  I0 -> I4 [label = \"i\"];\n  I0 -> I5 [label = \"(\"];\n\n  I1 -> I6 [label = \"+\"];\n\n  I2 -> I7 [label = \"*\"];\n\n  I5 -> I8 [label = \"E\"];\n  I5 -> I2 [label = \"T\"];\n  I5 -> I3 [label = \"F\"];\n  I5 -> I4 [label = \"i\"];\n  I5 -> I5 [label = \"(\"];\n\n  I6 -> I9 [label = \"T\"];\n  I6 -> I3 [label = \"F\"];\n  I6 -> I4 [label = \"i\"];\n  I6 -> I5 [label = \"(\"];\n\n  I7 -> I10 [label = \"F\"];\n  I7 -> I4 [label = \"i\"];\n  I7 -> I5 [label = \"(\"];\n\n  I8 -> I11 [label = \")\"];\n  I8 -> I6 [label = \"+\"];\n\n  I9 -> I7 [label = \"*\"];\n} \n</code></pre>\n<h2>構文解析表</h2>\n<p>オートマトンを構文解析表にまとめる。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">I\\記号</th>\n<th>+</th>\n<th>*</th>\n<th>(</th>\n<th>)</th>\n<th>i</th>\n<th>$</th>\n<th>E</th>\n<th>T</th>\n<th>F</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">0</td>\n<td></td>\n<td></td>\n<td>s5</td>\n<td></td>\n<td>s4</td>\n<td></td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td>s6</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td>r2</td>\n<td>s7</td>\n<td></td>\n<td>r2</td>\n<td></td>\n<td>acc</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td>r4</td>\n<td>r4</td>\n<td></td>\n<td>r4</td>\n<td></td>\n<td>r4</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td>r5</td>\n<td>r5</td>\n<td></td>\n<td>r5</td>\n<td></td>\n<td>r5</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td></td>\n<td></td>\n<td>s5</td>\n<td></td>\n<td>s4</td>\n<td></td>\n<td>8</td>\n<td>2</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td></td>\n<td></td>\n<td>s5</td>\n<td></td>\n<td>s4</td>\n<td></td>\n<td></td>\n<td>9</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td></td>\n<td></td>\n<td>s5</td>\n<td></td>\n<td>s4</td>\n<td></td>\n<td></td>\n<td></td>\n<td>10</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td>s6</td>\n<td></td>\n<td></td>\n<td>s11</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td>r1</td>\n<td>s7</td>\n<td></td>\n<td>r1</td>\n<td></td>\n<td>acc</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td>r3</td>\n<td>r3</td>\n<td></td>\n<td>r3</td>\n<td></td>\n<td>r3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td>r6</td>\n<td>r6</td>\n<td></td>\n<td>r6</td>\n<td></td>\n<td>r6</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>構文解析</h2>\n<p>上記の構文解析表に従い、次のような系列を構文解析する。</p>\n<h3><code>i+i*i</code></h3>\n<pre><code>( I0 , i+i*i$ ) // s6\n( I0 i I4 , +i*i$ ) // r5\n( I0 F I3 , +i*i$ ) // r4\n( I0 T I2 , +i*i$ ) // r2\n( I0 F I1 , +i*i$ ) // s6\n( I0 F I1 + I6 , i*i$ ) // s4\n( I0 F I1 + I6 i I4 , *i$ ) // r5\n( I0 F I1 + I6 F I3 , *i$ ) // r4\n( I0 F I1 + I6 T I9 , *i$ ) // s7\n( I0 F I1 + I6 T I9 * I7 , i$ ) // s4 \n( I0 F I1 + I6 T I9 * I7 i I4 , $ ) // r5 \n( I0 F I1 + I6 T I9 * I7 F I10 , $ ) // r3 \n( I0 F I1 + I6 T I9 , $ ) //  \n</code></pre>\n<h3><code>i*(i+i)</code></h3>\n<p>(略)</p>\n<h3><code> i*i+*i</code></h3>\n<p>(略)</p>\n<style>\n.article.markdown-body table th {\n  min-width: 0px;\n}\n.article.markdown-body table td {\n  min-width: 0px;\n}\n</style>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T21:32:44+09:00","message":"Fix table width\n","hash":"bfdd8f2c844a9e1a0e8ccce07a8845d93e9998f2"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T22:40:26+09:00","message":"Add articles\n","hash":"ae0ea8e11aa1de2b26cd27c1e9c046d2fb9135f4"}],"date_published":"2020-08-14T19:13:19+09:00","tags":["コンパイラ","構文解析"]},{"id":"https://memo.yammer.jp/posts/compiler-lr0","url":"https://memo.yammer.jp/posts/compiler-lr0","title":"LR(0)構文解析を行いながら、コンパイラの構文解析を学ぶ","summary":"以下、過去の自分向けのメモの移動。 コンパイラの主要な処理に構文解析がある。 今回は与えられたLR(0)文法規則に基づいて構文解析するオートマトンを作り、構文解析の手法について整理する。 問題 次の文法について、次の問を答えよ S -> ( L )  S -> a L -> L , S L -> S 上から順にR1,R2,R3,R4と呼ぶ。 ただし、SとLは非終端記号、(と)と,とaは終端記号とする。 LR(0)正準集合とオートマトンを求めよ 以下の文字列が示された文法から生成されるかどうか、また構文解析の結果を答えよ LR(0)構文解析の方法 LR(k)構文解析とは 上向き構文解析(下向きは","content_html":"<p>以下、過去の自分向けのメモの移動。</p>\n<p>コンパイラの主要な処理に構文解析がある。\n今回は与えられたLR(0)文法規則に基づいて構文解析するオートマトンを作り、構文解析の手法について整理する。</p>\n<h2>問題</h2>\n<p>次の文法について、次の問を答えよ</p>\n<pre><code>S -> ( L ) \nS -> a\nL -> L , S\nL -> S\n</code></pre>\n<p>上から順にR1,R2,R3,R4と呼ぶ。</p>\n<p>ただし、SとLは非終端記号、(と)と,とaは終端記号とする。</p>\n<ul>\n<li>LR(0)正準集合とオートマトンを求めよ</li>\n<li>以下の文字列が示された文法から生成されるかどうか、また構文解析の結果を答えよ</li>\n</ul>\n<h2>LR(0)構文解析の方法</h2>\n<h3>LR(k)構文解析とは</h3>\n<ul>\n<li>上向き構文解析(下向きは再帰的に行うが、バックトラックが発生するため大変)</li>\n<li>左(Left)から読み、右端導出(Right most derivation)</li>\n<li>kとは、先読みできる記号の数</li>\n</ul>\n<h3>LR(0)構文解析の流れ</h3>\n<ol>\n<li>LR(0)正準集合とオートマトンをつくる</li>\n<li>構文解析表を作る</li>\n<li>構文解析表を元に解析する</li>\n</ol>\n<h3>方針: shiftまたはreduceを繰り返し、開始記号1つにまとまれば完了</h3>\n<ul>\n<li>shift: 入力を1つ読み込むこと</li>\n<li>reduce: 文法規則を適用し、記号をまとめること</li>\n</ul>\n<p>オートマトンの状態をスタックに積みながら、行う</p>\n<p>shiftするときは、入力を読み込み、入力記号に従い有向辺を遷移する。遷移後の状態をスタックにpushする。</p>\n<p>reduceするときは、適用する文法規則に則って、いままでの遷移を巻き戻し(スタックを記号数分popし)、適用後の記号の遷移を積み直す(pushする)。</p>\n<p>オートマトンを表にまとめ、情報を更かして、shift、reduceの手順を示したのが構文解析表である。</p>\n<h2>LR(0)におけるオートマトンの作成</h2>\n<h3>前提</h3>\n<h4>LR(0)項とは ... (アイテム記法)</h4>\n<p>文法規則の右辺、各記号の前後1箇所に・(ドット)を加えたもの。例えば<code>S -> ( ・L )</code>といった表記</p>\n<p>これは、ドットの前方は読み込み済みであること、ドットの後方は未読み込みであることを示す。</p>\n<p>(読み込むとは、ドットを1つ右に移動させること(ドットが1つ右のLR(0)項を含む状態に遷移すること(後術)であって、ドットの次が何の値であるか確認することではない)。</p>\n<h4>LR(0)正準集合とは</h4>\n<p>LR(0)項の集合である。\nオートマトンを作成する際に一緒に作成する。</p>\n<h4>LR(0)におけるオートマトンとは</h4>\n<p>LR(0)正準集合を状態、記号を1つもつ有向辺としたオートマトン。</p>\n<h3>LR(0)におけるオートマトンを作成する方法</h3>\n<h4>1. 初期状態を定める</h4>\n<p>状態には開始記号が左辺で、ドットが最左なLR(0)項をすべて含む。\n(※)を行う。</p>\n<h4>2. その他の状態を定める</h4>\n<p>既に存在する状態のドットが最右にないLR(0)項について、記号を一つ読み込んだ状態を新たにつくる。</p>\n<p>遷移の有向辺には、読み込む記号をもたせる。\n遷移後の状態は、記号を1つ読み込んだLR(0)項(ドットを1記号分右にずらしたLR(0)項)を含む。</p>\n<p>さらに、遷移前の状態の他のLR(0)項について考える。\n同じ記号を読み込める物があれば(遷移前のLR(0)項同士でドットの右隣の記号が一致すれば)、このLR(0)項についても、1記号読み込み後のLR(0)項を遷移後の状態に加える。</p>\n<p>(※)を行う。</p>\n<h4>3. 繰り返す</h4>\n<p>行える限り 2. を行う。</p>\n<h4>(※)</h4>\n<p>ある状態について、この状態に含むLR(0)項を考える。</p>\n<p>ドットの右隣に非終端記号のあるLR(0)項があるならば、その終端記号を左辺に持ちドットが最左であるLR(0)項をすべて同じ状態に加える。</p>\n<h3>作成したオートマトン</h3>\n<h4>状態遷移表</h4>\n<pre><code>digraph G {\n  rankdir=LR;\n  empty [label = \"\" shape = plaintext];\n  node [shape = doublecircle];I2 I4;\n  node [shape = circle];\n  empty -> I0 [label = \"start\"];\n  I0 -> I1 [label = \"(\"];\n  I0 -> I2 [label = \"a\"];\n  I1 -> I2 [label = \"a\"];\n  I1 -> I3 [label = \"L\"];\n  I3 -> I4 [label = \")\"];\n  I3 -> I5 [label = \",\"];\n  I5 -> I7 [label = \"S\"];\n  I1 -> I1 [label = \"(\"];\n  I5 -> I1 [label = \"(\"];\n  I5 -> I2 [label = \"a\"];\n  I1 -> I6 [label = \"S\"];\n} \n</code></pre>\n<h4>状態I0</h4>\n<ul>\n<li><code>S -> ・( L )</code></li>\n<li><code>S -> ・a</code></li>\n</ul>\n<h4>状態I1</h4>\n<ul>\n<li><code>S -> ( ・L )</code> (・の右隣に非終端記号)</li>\n<li><code>L -> ・L , S</code></li>\n<li><code>L -> ・S</code> (・の右隣に非終端記号)</li>\n<li><code>S -> ・( L )</code></li>\n<li><code>S -> ・a</code></li>\n</ul>\n<h4>状態I2</h4>\n<ul>\n<li><code>S -> a ・</code></li>\n</ul>\n<h4>状態I3</h4>\n<ul>\n<li><code>S -> ( L ・)</code></li>\n<li><code>L -> L ・, S</code></li>\n</ul>\n<h4>状態I4</h4>\n<ul>\n<li><code>S -> ( L ) ・</code></li>\n</ul>\n<h4>状態I5</h4>\n<ul>\n<li><code>L -> L , ・S</code> (・の右隣に非終端記号)</li>\n<li><code>S -> ・( L )</code></li>\n<li><code>S -> ・a</code></li>\n</ul>\n<h4>状態I6</h4>\n<ul>\n<li><code>L -> S ・</code></li>\n</ul>\n<h4>状態I7</h4>\n<ul>\n<li><code>L -> L , S ・</code></li>\n</ul>\n<h2>構文解析表</h2>\n<p>現在の状態(スタックのトップ)の行、入力記号(読み込み前)の列のセルに、次の動作を書いた表。</p>\n<p>次の動作とは、次のようなものである。</p>\n<ul>\n<li>shiftするかreduceするか</li>\n<li>shiftならどの状態に遷移するか</li>\n<li>reduceならどの文法規則を適用するか</li>\n</ul>\n<h3>構文解析表のつくりかた</h3>\n<h4>1. 縦軸のラベル</h4>\n<p>縦軸にLR(0)正準集合を置く</p>\n<h4>2. 横軸のラベル</h4>\n<p>横軸に記号を置く。(このとき、終端記号と非終端記号は分ける、。終端記号に$(入力の終了を表す)を加える)</p>\n<h4>3. shift</h4>\n<p>遷移元の状態を行、遷移時の終端記号を列とするセルに、skと書き込む。(状態Ikに遷移する)</p>\n<p>shift(入力を1つ読み込む)して、スタックにkを積む(状態Ikに遷移する)ことを表す。</p>\n<h4>4. reduce時のpushする(積み直す)状態</h4>\n<p>遷移元の状態を行、遷移時の非終端記号を列とするセルに、kと書き込む。(状態Ikに遷移する)</p>\n<p>reduce時、還元後の状態(文法規則の左辺)をスタックに積み直す動作を表す。</p>\n<h4>5. reduce時の適用する文法規則</h4>\n<p>最右がドットであるLR(0)項を含む状態の行、終端記号の列にrkと書き込む。(文法規則Rkを適用する)</p>\n<h4>6. 完了状態</h4>\n<p>左辺が開始記号で右辺のドットが最右であるLR(0)項を含む状態の行\n、$(入力終了)の列のセルに、accと書き込む。</p>\n<p>accを参照したら構文が正しいことが示され、構文解析を終了する。</p>\n<h3>構文解析表の作成結果</h3>\n<p>今回の構文解析表は次の通り</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">I\\記号</th>\n<th>(</th>\n<th>)</th>\n<th>,</th>\n<th>a</th>\n<th>$</th>\n<th>S</th>\n<th>L</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">0</td>\n<td>s1</td>\n<td></td>\n<td></td>\n<td>s2</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td>s1</td>\n<td></td>\n<td></td>\n<td>s2</td>\n<td></td>\n<td>6</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td>r2</td>\n<td>r2</td>\n<td>r2</td>\n<td>r2</td>\n<td>acc</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td></td>\n<td>s4</td>\n<td>s5</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td>r1</td>\n<td>r1</td>\n<td>r1</td>\n<td>r1</td>\n<td>acc</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td>s1</td>\n<td></td>\n<td></td>\n<td>s2</td>\n<td></td>\n<td>7</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td>r4</td>\n<td>r4</td>\n<td>r4</td>\n<td>r4</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td>r3</td>\n<td>r3</td>\n<td>r3</td>\n<td>r3</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>余談:構文解析表が表すもの</h3>\n<p>構文解析表の持つ情報は、次の3つに分けられる</p>\n<h4>1. オートマトンの状態遷移表</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">I\\記号</th>\n<th>(</th>\n<th>)</th>\n<th>,</th>\n<th>a</th>\n<th>S</th>\n<th>L</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">0</td>\n<td>1</td>\n<td></td>\n<td></td>\n<td>2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td>1</td>\n<td></td>\n<td></td>\n<td>2</td>\n<td>6</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td></td>\n<td>4</td>\n<td>5</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td>1</td>\n<td></td>\n<td></td>\n<td>2</td>\n<td></td>\n<td>7</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4>2. reduce可能状態と適用する文法規則</h4>\n<p>I2のとき、文法規則R2を適用する。\nI4のとき、文法規則R1を適用する。\nI6のとき、文法規則R4を適用する。\nI3のとき、文法規則R3を適用する。</p>\n<h4>3. 完了状態</h4>\n<p>I2,I4で全て読み込み済みのとき、構文解析が完了する。</p>\n<h2>構文解析</h2>\n<p>状態を記録するスタックを用意して、スタックトップと次の入力をもとに、動作を行う。</p>\n<h3>構文解析の方法</h3>\n<h4>1. 初期状態Ikであるとき、kをスタックに積む</h4>\n<h4>2. スタックtopの状態の行、次の入力記号の列のセルの指示に従う</h4>\n<h5>sk</h5>\n<p>shiftする。</p>\n<ul>\n<li>入力を読み取る。(次の動作のとき入力を次の終端記号にすすめる)</li>\n<li>スタックにkを積む</li>\n</ul>\n<p>(オートマトンにおいて、入力の終端記号を辺とする状態遷移を行う)</p>\n<h5>rk</h5>\n<p>文法規則Rkに従ってreduceする。</p>\n<ul>\n<li>文法Rkを適用することを記録する。</li>\n<li>文法Rkの右辺の記号数分、スタックをpopする。(状態遷移を巻き戻す)</li>\n<li>上行のpop後のスタックトップの状態を行、文法Rkの左側の記号を列とするセルの数字をスタックにpushする。(文法Rk左側の記号の状態遷移を積み直す)</li>\n</ul>\n<h5>acc</h5>\n<p>構文解析は成功。入力の分は、与えられた文法規則から生成される。\n構文解析を終了する。</p>\n<p>適用すべき文法規則とその順は、記録された文法規則Rkを順に読む。</p>\n<h5>空</h5>\n<p>構文解析は失敗。入力の文は、与えられた文法規則から生成されることはない。</p>\n<h3>構文解析の結果</h3>\n<p>次の文を構文解析する。</p>\n<p>上から順に、解析の経過を記す。</p>\n<h4><code>((a,a),a)</code></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">入力</th>\n<th>スタックtop</th>\n<th>操作</th>\n<th align=\"left\">スタック</th>\n<th align=\"left\">読み取り済み</th>\n<th align=\"left\">還元後</th>\n<th align=\"left\">文法規則</th>\n<th align=\"left\">補足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td align=\"left\">0</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>0</td>\n<td>s1</td>\n<td align=\"left\">01</td>\n<td align=\"left\">(</td>\n<td align=\"left\">(</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>1</td>\n<td>s1</td>\n<td align=\"left\">011</td>\n<td align=\"left\">((</td>\n<td align=\"left\">((</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>1</td>\n<td>s2</td>\n<td align=\"left\">0112</td>\n<td align=\"left\">((a</td>\n<td align=\"left\">((a</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">0116</td>\n<td align=\"left\">((a</td>\n<td align=\"left\">((S</td>\n<td align=\"left\">2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">0113</td>\n<td align=\"left\">((a</td>\n<td align=\"left\">((L</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">01135</td>\n<td align=\"left\">((a,</td>\n<td align=\"left\">((L,</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">011352</td>\n<td align=\"left\">((a,a</td>\n<td align=\"left\">((L,a</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">011357</td>\n<td align=\"left\">((a,a</td>\n<td align=\"left\">((L,S</td>\n<td align=\"left\">242</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">0113</td>\n<td align=\"left\">((a,a</td>\n<td align=\"left\">((L</td>\n<td align=\"left\">2423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">01134</td>\n<td align=\"left\">((a,a)</td>\n<td align=\"left\">((L)</td>\n<td align=\"left\">2423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>4</td>\n<td>r1</td>\n<td align=\"left\">016</td>\n<td align=\"left\">((a,a)</td>\n<td align=\"left\">(S</td>\n<td align=\"left\">24231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">013</td>\n<td align=\"left\">((a,a)</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135</td>\n<td align=\"left\">((a,a),</td>\n<td align=\"left\">(L,</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">01352</td>\n<td align=\"left\">((a,a),a</td>\n<td align=\"left\">(L,a</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">01357</td>\n<td align=\"left\">((a,a),a</td>\n<td align=\"left\">(L,S</td>\n<td align=\"left\">2423142</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013</td>\n<td align=\"left\">((a,a),a</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">24231423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">0134</td>\n<td align=\"left\">((a,a),a)</td>\n<td align=\"left\">(L)</td>\n<td align=\"left\">24231423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td>4</td>\n<td>acc</td>\n<td align=\"left\">0134</td>\n<td align=\"left\">((a,a),a)$</td>\n<td align=\"left\">S</td>\n<td align=\"left\">242314231</td>\n<td align=\"left\">accのときも文法規則r1は適用する。</td>\n</tr>\n</tbody>\n</table>\n<p>以上より、与えられた文は、問題の文法規則から生成されることが示された。</p>\n<h4><code>((a,a),(a,a))</code></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">入力</th>\n<th>スタックtop</th>\n<th>操作</th>\n<th align=\"left\">スタック</th>\n<th align=\"left\">読み取り済み</th>\n<th align=\"left\">還元後</th>\n<th align=\"left\">文法規則</th>\n<th align=\"left\">補足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td align=\"left\">0</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>0</td>\n<td>s1</td>\n<td align=\"left\">01</td>\n<td align=\"left\">(</td>\n<td align=\"left\">(</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>1</td>\n<td>s1</td>\n<td align=\"left\">011</td>\n<td align=\"left\">((</td>\n<td align=\"left\">((</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>1</td>\n<td>s2</td>\n<td align=\"left\">0112</td>\n<td align=\"left\">((a</td>\n<td align=\"left\">((a</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">0116</td>\n<td align=\"left\">((a</td>\n<td align=\"left\">((S</td>\n<td align=\"left\">2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">0113</td>\n<td align=\"left\">((a</td>\n<td align=\"left\">((L</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">01135</td>\n<td align=\"left\">((a,</td>\n<td align=\"left\">((L,</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">011352</td>\n<td align=\"left\">((a,a</td>\n<td align=\"left\">((L,a</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">011357</td>\n<td align=\"left\">((a,a</td>\n<td align=\"left\">((L,S</td>\n<td align=\"left\">242</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">0113</td>\n<td align=\"left\">((a,a</td>\n<td align=\"left\">((L</td>\n<td align=\"left\">2423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">01134</td>\n<td align=\"left\">((a,a)</td>\n<td align=\"left\">((L)</td>\n<td align=\"left\">2423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>4</td>\n<td>r1</td>\n<td align=\"left\">016</td>\n<td align=\"left\">((a,a)</td>\n<td align=\"left\">(S</td>\n<td align=\"left\">24231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">013</td>\n<td align=\"left\">((a,a)</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135</td>\n<td align=\"left\">((a,a),</td>\n<td align=\"left\">(L,</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>5</td>\n<td>s1</td>\n<td align=\"left\">01351</td>\n<td align=\"left\">((a,a),(</td>\n<td align=\"left\">(L,(</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>1</td>\n<td>s2</td>\n<td align=\"left\">013512</td>\n<td align=\"left\">((a,a),(a</td>\n<td align=\"left\">(L,(a</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">013516</td>\n<td align=\"left\">((a,a),(a</td>\n<td align=\"left\">(L,(S</td>\n<td align=\"left\">2423142</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">013513</td>\n<td align=\"left\">((a,a),(a</td>\n<td align=\"left\">(L,(L</td>\n<td align=\"left\">24231424</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135135</td>\n<td align=\"left\">((a,a),(a,</td>\n<td align=\"left\">(L,(L,</td>\n<td align=\"left\">24231424</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">01351352</td>\n<td align=\"left\">((a,a),(a,a</td>\n<td align=\"left\">(L,(L,a</td>\n<td align=\"left\">24231424</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">01351357</td>\n<td align=\"left\">((a,a),(a,a</td>\n<td align=\"left\">(L,(L,S</td>\n<td align=\"left\">242314242</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013516</td>\n<td align=\"left\">((a,a),(a,a</td>\n<td align=\"left\">(L,(S</td>\n<td align=\"left\">2423142423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">013513</td>\n<td align=\"left\">((a,a),(a,a</td>\n<td align=\"left\">(L,(L</td>\n<td align=\"left\">24231424234</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">0135134</td>\n<td align=\"left\">((a,a),(a,a)</td>\n<td align=\"left\">(L,(L)</td>\n<td align=\"left\">24231424234</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>4</td>\n<td>r1</td>\n<td align=\"left\">01357</td>\n<td align=\"left\">((a,a),(a,a)</td>\n<td align=\"left\">(L,S</td>\n<td align=\"left\">242314242341</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013</td>\n<td align=\"left\">((a,a),(a,a)</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">2423142423413</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">0134</td>\n<td align=\"left\">((a,a),(a,a))</td>\n<td align=\"left\">(L)</td>\n<td align=\"left\">2423142423413</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td>4</td>\n<td>acc</td>\n<td align=\"left\">0</td>\n<td align=\"left\">((a,a),(a,a))</td>\n<td align=\"left\">S</td>\n<td align=\"left\">24231424234131</td>\n<td align=\"left\">accのときも文法規則r1は適用する。</td>\n</tr>\n</tbody>\n</table>\n<p>以上より、与えられた文は、問題の文法規則から生成されることが示された。</p>\n<h4><code>(a,(a,a),a)</code></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">入力</th>\n<th>スタックtop</th>\n<th>操作</th>\n<th align=\"left\">スタック</th>\n<th align=\"left\">読み取り済み</th>\n<th align=\"left\">還元後</th>\n<th align=\"left\">文法規則</th>\n<th align=\"left\">補足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td align=\"left\">0</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>0</td>\n<td>s1</td>\n<td align=\"left\">01</td>\n<td align=\"left\">(</td>\n<td align=\"left\">(</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>1</td>\n<td>s2</td>\n<td align=\"left\">012</td>\n<td align=\"left\">(a</td>\n<td align=\"left\">(a</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">016</td>\n<td align=\"left\">(a</td>\n<td align=\"left\">(S</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">013</td>\n<td align=\"left\">(a</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">4</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135</td>\n<td align=\"left\">(a,</td>\n<td align=\"left\">(L,</td>\n<td align=\"left\">4</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>5</td>\n<td>s1</td>\n<td align=\"left\">01351</td>\n<td align=\"left\">(a,(</td>\n<td align=\"left\">(L,(</td>\n<td align=\"left\">4</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>1</td>\n<td>s2</td>\n<td align=\"left\">013512</td>\n<td align=\"left\">(a,(a</td>\n<td align=\"left\">(L,(a</td>\n<td align=\"left\">4</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">013516</td>\n<td align=\"left\">(a,(a</td>\n<td align=\"left\">(L,(S</td>\n<td align=\"left\">42</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">013513</td>\n<td align=\"left\">(a,(a</td>\n<td align=\"left\">(L,(L</td>\n<td align=\"left\">424</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135135</td>\n<td align=\"left\">(a,(a,</td>\n<td align=\"left\">(L,(L,</td>\n<td align=\"left\">424</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">01351352</td>\n<td align=\"left\">(a,(a,a</td>\n<td align=\"left\">(L,(L,a</td>\n<td align=\"left\">424</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">01351357</td>\n<td align=\"left\">(a,(a,a</td>\n<td align=\"left\">(L,(L,S</td>\n<td align=\"left\">4242</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013513</td>\n<td align=\"left\">(a,(a,a</td>\n<td align=\"left\">(L,(L</td>\n<td align=\"left\">42423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">0135134</td>\n<td align=\"left\">(a,(a,a)</td>\n<td align=\"left\">(L,(L)</td>\n<td align=\"left\">42423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>4</td>\n<td>r1</td>\n<td align=\"left\">01357</td>\n<td align=\"left\">(a,(a,a)</td>\n<td align=\"left\">(L,S</td>\n<td align=\"left\">424231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013</td>\n<td align=\"left\">(a,(a,a)</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">4242313</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135</td>\n<td align=\"left\">(a,(a,a),</td>\n<td align=\"left\">(L,</td>\n<td align=\"left\">4242313</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">01352</td>\n<td align=\"left\">(a,(a,a),a</td>\n<td align=\"left\">(L,a</td>\n<td align=\"left\">4242313</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">01357</td>\n<td align=\"left\">(a,(a,a),a</td>\n<td align=\"left\">(L,S</td>\n<td align=\"left\">42423132</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013</td>\n<td align=\"left\">(a,(a,a),a</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">424231323</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">0134</td>\n<td align=\"left\">(a,(a,a),a)</td>\n<td align=\"left\">(L)</td>\n<td align=\"left\">424231323</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td>4</td>\n<td>acc</td>\n<td align=\"left\">0</td>\n<td align=\"left\">(a,(a,a),a)</td>\n<td align=\"left\">S</td>\n<td align=\"left\">4242313231</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<h4><code>(((a,a),a),a)</code></h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">入力</th>\n<th>スタックtop</th>\n<th>操作</th>\n<th align=\"left\">スタック</th>\n<th align=\"left\">読み取り済み</th>\n<th align=\"left\">還元後</th>\n<th align=\"left\">文法規則</th>\n<th align=\"left\">補足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td align=\"left\">0</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>0</td>\n<td>s1</td>\n<td align=\"left\">01</td>\n<td align=\"left\">(</td>\n<td align=\"left\">(</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>1</td>\n<td>s1</td>\n<td align=\"left\">011</td>\n<td align=\"left\">((</td>\n<td align=\"left\">((</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td>1</td>\n<td>s1</td>\n<td align=\"left\">0111</td>\n<td align=\"left\">(((</td>\n<td align=\"left\">(((</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>1</td>\n<td>s2</td>\n<td align=\"left\">01112</td>\n<td align=\"left\">(((a</td>\n<td align=\"left\">(((a</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">01116</td>\n<td align=\"left\">(((a</td>\n<td align=\"left\">(((S</td>\n<td align=\"left\">2</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">01113</td>\n<td align=\"left\">(((a</td>\n<td align=\"left\">(((L</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">011135</td>\n<td align=\"left\">(((a,</td>\n<td align=\"left\">(((L,</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">0111352</td>\n<td align=\"left\">(((a,a</td>\n<td align=\"left\">(((L,a</td>\n<td align=\"left\">24</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">0111357</td>\n<td align=\"left\">(((a,a</td>\n<td align=\"left\">(((L,S</td>\n<td align=\"left\">242</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">01113</td>\n<td align=\"left\">(((a,a</td>\n<td align=\"left\">(((L</td>\n<td align=\"left\">2423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">011134</td>\n<td align=\"left\">(((a,a)</td>\n<td align=\"left\">(((L)</td>\n<td align=\"left\">2423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>4</td>\n<td>r1</td>\n<td align=\"left\">0116</td>\n<td align=\"left\">(((a,a)</td>\n<td align=\"left\">((S</td>\n<td align=\"left\">24231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>6</td>\n<td>r4</td>\n<td align=\"left\">0113</td>\n<td align=\"left\">(((a,a)</td>\n<td align=\"left\">((L</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">01135</td>\n<td align=\"left\">(((a,a),</td>\n<td align=\"left\">((L,</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">011352</td>\n<td align=\"left\">(((a,a),a</td>\n<td align=\"left\">((L,a</td>\n<td align=\"left\">242314</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">011357</td>\n<td align=\"left\">(((a,a),a</td>\n<td align=\"left\">((L,S</td>\n<td align=\"left\">2423142</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">0113</td>\n<td align=\"left\">(((a,a),a</td>\n<td align=\"left\">((L</td>\n<td align=\"left\">24231423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">01134</td>\n<td align=\"left\">(((a,a),a)</td>\n<td align=\"left\">((L)</td>\n<td align=\"left\">24231423</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>4</td>\n<td>r1</td>\n<td align=\"left\">013</td>\n<td align=\"left\">(((a,a),a)</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">242314231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td>3</td>\n<td>s5</td>\n<td align=\"left\">0135</td>\n<td align=\"left\">(((a,a),a),</td>\n<td align=\"left\">(L,</td>\n<td align=\"left\">242314231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>5</td>\n<td>s2</td>\n<td align=\"left\">01352</td>\n<td align=\"left\">(((a,a),a),a</td>\n<td align=\"left\">(L,a</td>\n<td align=\"left\">242314231</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>2</td>\n<td>r2</td>\n<td align=\"left\">01357</td>\n<td align=\"left\">(((a,a),a),a</td>\n<td align=\"left\">(L,S</td>\n<td align=\"left\">2423142312</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>7</td>\n<td>r3</td>\n<td align=\"left\">013</td>\n<td align=\"left\">(((a,a),a),a</td>\n<td align=\"left\">(L</td>\n<td align=\"left\">24231423123</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">)</td>\n<td>3</td>\n<td>s4</td>\n<td align=\"left\">0134</td>\n<td align=\"left\">(((a,a),a),a)</td>\n<td align=\"left\">(L)</td>\n<td align=\"left\">24231423123</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">$</td>\n<td>4</td>\n<td>acc</td>\n<td align=\"left\">0</td>\n<td align=\"left\">(((a,a),a),a)</td>\n<td align=\"left\">S</td>\n<td align=\"left\">242314231231</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<p>以上より、与えられた文は、問題の文法規則から生成されることが示された。</p>\n<style>\n.article.markdown-body table th {\n  min-width: 0px;\n}\n.article.markdown-body table td {\n  min-width: 0px;\n}\n</style>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T21:32:44+09:00","message":"Fix table width\n","hash":"bfdd8f2c844a9e1a0e8ccce07a8845d93e9998f2"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T22:40:26+09:00","message":"Add articles\n","hash":"ae0ea8e11aa1de2b26cd27c1e9c046d2fb9135f4"}],"date_published":"2020-08-14T19:04:31+09:00","tags":["コンパイラ","構文解析"]},{"id":"https://memo.yammer.jp/posts/docker","url":"https://memo.yammer.jp/posts/docker","title":"Dockerチートシート プログラマのためのDocker教科書 第2版より","summary":"以下、過去の自分用メモの移動。 dockerに入門するにあたり「プログラマのためのDocker教科書 第2版より」を読んだ。 Dockerfileを書いてコンテナを走らせるための自分向けのまとめをチートシート的に書き記す。 Dockerfileの命令 命令一覧 FROM .. ベースイメージの指定 RUN .. コマンド実行 CMD .. コンテナの実行コマンド LABEL .. ラベルを設定 EXPOSE .. ポートのエクスポート ENV .. 環境変数 ADD .. ファイル/ディレクトリの追加 COPY .. ファイルのコピー ENTRYPOINT .. コンテナの実行コマンド VOL","content_html":"<p>以下、過去の自分用メモの移動。</p>\n<p>dockerに入門するにあたり「プログラマのためのDocker教科書 第2版より」を読んだ。\nDockerfileを書いてコンテナを走らせるための自分向けのまとめをチートシート的に書き記す。</p>\n<h2>Dockerfileの命令</h2>\n<h3>命令一覧</h3>\n<ul>\n<li>FROM .. ベースイメージの指定</li>\n<li>RUN .. コマンド実行</li>\n<li>CMD .. コンテナの実行コマンド</li>\n<li>LABEL .. ラベルを設定</li>\n<li>EXPOSE .. ポートのエクスポート</li>\n<li>ENV .. 環境変数</li>\n<li>ADD .. ファイル/ディレクトリの追加</li>\n<li>COPY .. ファイルのコピー</li>\n<li>ENTRYPOINT .. コンテナの実行コマンド</li>\n<li>VOLUME .. ボリュームのマウント</li>\n<li>USER .. ユーザの指定</li>\n<li>WORKDIR .. 作業ディレクトリ</li>\n<li>ARG .. Dockerfile内の変数</li>\n<li>ONBUILD .. ビルド完了後に実行される命令</li>\n<li>STOPSIGNAL .. システムコールシグナルの設定</li>\n<li>HEALTHCHECK .. コンテナのヘルスチェック</li>\n<li>SHELL .. デフォルトシェルの設定</li>\n</ul>\n<h3>コメント</h3>\n<pre><code class=\"hljs language-Dockerfile\"><span class=\"hljs-comment\"># コメント</span>\n命令 <span class=\"hljs-comment\"># コメント</span>\n</code></pre>\n<h3>FROM</h3>\n<pre><code class=\"hljs language-Dockerfile\"><span class=\"hljs-keyword\">FROM</span> centos:<span class=\"hljs-number\">7</span>\n<span class=\"hljs-comment\"># FROM [イメージ名]</span>\n<span class=\"hljs-comment\"># FROM [イメージ名]:[タグ名]</span>\n<span class=\"hljs-comment\"># FROM [イメージ名]@[ダイジェスト]</span>\n</code></pre>\n<h4>ダイジェスト</h4>\n<p>Docker Hubにアップロードする際に自動で付与されるユニークな識別子。\nダイジェストを使うことでイメージを一意に指定できる。\n<code>docker image ls --digests</code>で確認できる</p>\n<h3>build</h3>\n<pre><code class=\"hljs language-shell\">$ docker build -t [作成するイメージ名]:[タグ名] [Dockerfileのあるディレクトリのパス]\n</code></pre>\n<h2>docker engineの状態を確認</h2>\n<pre><code class=\"hljs language-shell\">$ docker version\n$ docker tutorial\n$ docker system info\n$ docker system df\n# disk info\n</code></pre>\n<h2>nginxをdockerで動かしてみる</h2>\n<pre><code class=\"hljs language-shell\">$ docker pull nginx\n$ docker image ls\n$ docker container run --name nginxserver -d -p 80:80 nginx\n# open http://localhost:80/ on web browser\n$ docker ps\n$ docker stop nginxserver\n$ docker start nginxserver\n</code></pre>\n<h2>centosをpullしてみる</h2>\n<pre><code class=\"hljs language-shell\"># p96\n$ docker image pull centos:7\n$ docker image ls\n</code></pre>\n<h2>DCT</h2>\n<p>docker imageが改ざんされているかどうか、公開鍵(Tagging Key)を用いて検証し、改ざんがある場合そのイメージを無効化する機能。</p>\n<p>有効化するには環境変数を付加</p>\n<p>署名なしイメージのpull時は無効化しなければならない。</p>\n<pre><code class=\"hljs language-shell\"># enable\n$ export DOCKER_CONTENT_TRUST=1\n\n# disable\n$ export DOCKER_CONTENT_TRUST=0\n</code></pre>\n<h2>docker imageの操作</h2>\n<pre><code class=\"hljs language-shell\"># pullしたイメージの詳細情報を確認(イメージID,作成日,dockerのversion,CPUアーキテクチャ等)\n$ docker image inspect ubuntu:latest\n\n# jsonの一部のみを取得\n$ docker image inspect --format=\"{{ .Os }}\" ubuntu:latest\n$ docker image inspect --format=\"{{ .ContainerConfig.Image }}\" ubuntu:latest\n\n# docker image にタグ付け\n$ docker image tag nginx yammerjp/nginxserver:1.0\n\n# docker hub上のimage(この場合はnginx)を検索\n$ docker search nginx \n# Option: --no-trunc .. 結果をすべて表示,  --limit n .. n件の検索結果, --filter=stars=n .. star数下限による絞り込み\n\n$ docker image rm [--force(-f) --no-prun] yammerjp/nginxserver\n# --force .. -f , --no-prune .. 中間イメージを削除しない\n# yammerjp/nginxserver ... REPOSITORYではなくIMAGE IDでも良い\n\n$ docker image prune [--all(-a) --force(-f)]\n# 未使用のdocker imageを削除\n</code></pre>\n<h2>docker image のpush</h2>\n<pre><code class=\"hljs language-shell\">$ docker login -u yammerjp -p xxx\n$ docker image push yammerjp/nginxserver:1.0\n$ docker logout\n</code></pre>\n<h2>docker container run</h2>\n<pre><code class=\"hljs language-shell\">$ docker container run [ option ] yammerjp/nginxserver\n$ docker run [ option ] yammerjp/nginxserver # containerは省略可能\n$ docker run -it --name \"test1\" ubuntu /bin/bash\n$ docker run -d -p 8080:80 nginx\n$ docker run -d --dns 8.8.8.8 nginx\n$ docker run -d --mac-address=\"92:d0:c6:0a:29:33\" ubuntu\n# $ docker container inspect --format=\"{{ .Config.MacAddress }}\" [Container ID]\n$docker run -id --add-host test.com:192.168.0.1 ubuntu\n</code></pre>\n<h3>実行開始時オプション</h3>\n<p>--attach(-a) STDIN/STDOUT/STDERR --cidfile --detach(-d) --interactive(-i) --tty(-t)</p>\n<ul>\n<li>-a .. 標準入力/標準出力/標準エラー出力にアタッチ</li>\n<li>-d .. バックグラウンドで実行</li>\n<li>-i .. コンテナの標準入力を開く</li>\n<li>-t .. 端末デバイスを使う</li>\n</ul>\n<h3>終了時オプション</h3>\n<ul>\n<li>--restart .. no (再起動しない)/ on-failure (終了ステータスが0でないなら再起動)/ on-failure:4 (終了ステータスが0でないなら4回再起動/ always (常に)/ unless-stopped (直前のコンテナの状態が停止状態でなければ再起動)</li>\n<li>--rm .. 実行後のコンテナを自動で削除(--restartオプションと排他)</li>\n</ul>\n<h3>ネットワークオプション</h3>\n<ul>\n<li>--add-host=localhost:127.0.0.1 ... コンテナの/etc/hostsにホスト名とIPアドレスを定義</li>\n<li>--dns=8.8.8.8 ... コンテナ用のDNSサーバのIPアドレス</li>\n<li>--expose .. 指定したレンジのポート番号を割り当てる</li>\n<li>--mac-address=FF:FF:FF:FF:FF:FF .. コンテナのMACアドレスを指定</li>\n<li>--net=[bridge | none | container:&#x3C;name | id > | host | NETWORK] .. コンテナのネットワークを指定</li>\n<li>--hostname(-h) .. コンテナ自信のホスト名を指定</li>\n<li>--publish(-p) [ホストのポート番号]:[コンテナのポート番号] .. ホストとコンテナのポートマッピング</li>\n<li>--publish-all(-P) .. ホストの任意のポートをコンテナに割り当てる</li>\n</ul>\n<h3>リソースオプション</h3>\n<ul>\n<li>--cpu-shares(-c) .. CPUの使用の配分(1024が100%)</li>\n<li>--memory(-m) .. 使用するメモリを制限(単位はb,k,m,gのいずれか)</li>\n<li>--volume(-v)=[ホストのディレクトリ]:[コンテナのディレクトリ] .. ディレクトリを共有</li>\n</ul>\n<h3>環境変数など</h3>\n<ul>\n<li>--env(-e)=[環境変数] .. 環境変数を設定</li>\n<li>--envfile=[ファイル名] .. fileから環境変数を設定</li>\n<li>--readonly=[true|false] .. コンテナのファイルシステムを読み込み専用にする</li>\n<li>--workdir(-w)=[パス] .. コンテナの作業ディレクトリを指定する</li>\n<li>--user(-u)=[ユーザ名] .. ユーザ名かUIDを指定する</li>\n</ul>\n<pre><code class=\"hljs language-shell\">$ docker run --cpu-shares=512 --memory=1g ubuntu\n$ docker run -v /Users/yammerjp/webap:/usr/share/nginx/html nginx\n</code></pre>\n<h2>docker network</h2>\n<pre><code class=\"hljs language-shell\">$ docker network create -d bridge webap-net\n$ docker container run --net=webap-net -it ubuntu\n\n$ docker network ls\n$ docker network connect [ option ] ネットワーク コンテナ\n$ docker network disconnect ネットワーク コンテナ\n$ docker network inspect [ option ] ネットワーク\n$ docker network rm [ option ] ネットワーク\n\n</code></pre>\n<h2>コンテナの状態確認</h2>\n<pre><code class=\"hljs language-shell\">$ docker container ls [ --all(-a) --filter(-f) --format --last -8 --latest -l --no-trunc --quiet(-q) --size(-s) ]\n# 稼働しているコンテナの状態一覧\n\n$ docker container stats コンテナ識別子\n# コンテナ稼働確認 識別子はnginxserver等 Ctrl+Cで終了\n\n$ docker container top コンテナ識別子\n# コンテナで実行中のプロセスを確認\n</code></pre>\n<h2>コンテナの状態変更</h2>\n<pre><code class=\"hljs language-shell\">$ docker container start[ --atatch(-a) --interactive(-i) ] コンテナ識別子\n$ docker container stop [ -time(-t) ..コンテナの停止時間を指定する(defaultは10s) ] コンテナ識別子\n$ docker container restart [ -time(-t) ..コンテナの再起動時間を指定する(defaultは10s) ] コンテナ識別子\n\n$ docker container pause コンテナ識別子\n$ docker container unpause コンテナ識別子\n</code></pre>\n<h2>others</h2>\n<pre><code class=\"hljs language-shell\">$ docker container rm [ --force(-f) .. 起動中のコンテナを強制的に削除 , --volumes(-v) .. 割り当てたボリュームを削除 ] コンテナ識別子\n\n$ docker container attach コンテナ識別子\n# 接続後、Ctrl+Cでコンテナごと終了、デタッチのみはCtrl+P -> Ctrl+Q\n\n$ docker container exec [ --detach(-d) --interactive(-i) --tty(-t) --user(-u) ] コンテナ識別子 実行コマンド\n\n$ docker container top\n\n$ docker container port # 転送されているポートの確認\n\n$ docker container cp コンテナ識別子:コンテナ内のファイルパス ホストのディレクトリパス # ファイルをコピー\n# cp以後を逆にすると、逆転送も可能\n\n$ docker container diff コンテナ識別子　\n# コンテナがイメージから作成されたときとの差分 A..ファイル追加 B..ファイル削除 C..ファイル更新\n\n$ docker container commit [オプション] コンテナ識別子 [イメージ名[:タグ名]\n\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T22:40:26+09:00","message":"Add articles\n","hash":"ae0ea8e11aa1de2b26cd27c1e9c046d2fb9135f4"}],"date_published":"2020-08-14T18:59:31+09:00","tags":["Docker","Shell"]},{"id":"https://memo.yammer.jp/posts/github-ssh","url":"https://memo.yammer.jp/posts/github-ssh","title":"GitHubにsshでつなぐ","summary":"以下、過去の自分用メモの移動。 WindowsやMacでは、GitHubのIDとパスワードを安全に記憶して、HTTPS通信で勝手に使ってくれるのだが、Ubuntuではどうもよい方法がなさそうだった。 そこでHTTPSではなくSSHを使ってgithubと通信するようにして、公開鍵認証により安全を担保しようというわけだ。 鍵ペアを作る $ cd ~/.ssh $ ssh-keygen -t rsa -b 4096 -C \"mymail@example.com\" # 鍵の名前を id_rsa_github とする # パスワードも聞かれるので入力 $ ls -1  id_rsa_github # 秘","content_html":"<p>以下、過去の自分用メモの移動。</p>\n<p>WindowsやMacでは、GitHubのIDとパスワードを安全に記憶して、HTTPS通信で勝手に使ってくれるのだが、Ubuntuではどうもよい方法がなさそうだった。</p>\n<p>そこでHTTPSではなくSSHを使ってgithubと通信するようにして、公開鍵認証により安全を担保しようというわけだ。</p>\n<h2>鍵ペアを作る</h2>\n<pre><code class=\"hljs language-shell\">$ cd ~/.ssh\n$ ssh-keygen -t rsa -b 4096 -C \"mymail@example.com\"\n# 鍵の名前を id_rsa_github とする\n# パスワードも聞かれるので入力\n\n$ ls -1 \nid_rsa_github # 秘密鍵\nid_rsa_github.pub # 公開鍵\n\n# 作成時に既に正しく設定されていた Ubuntu20.04LTS\n# $ chmod 600 id_rsa_github\n</code></pre>\n<h2>GitHubに登録</h2>\n<p>GitHub > Settings > SSH Keys > Add SSH key から公開鍵を登録する</p>\n<p>Title : PC名等\nKey: 公開鍵をコピペ</p>\n<p>Add keyを押し、その後パスワードも入力</p>\n<h2>ローカルマシン上で設定</h2>\n<p><code>~/.ssh/config</code>に以下を追記</p>\n<pre><code># ~/.ssh/config\nHost github\n  HostName github.com\n  IdentityFile ~/.ssh/id_rsa_github\n  User git\n</code></pre>\n<pre><code class=\"hljs language-shell\"># ssh-agentが動作しているか確認\neval \"${ssh-agent -s}\"\nAgent pid 32047\n\n$ ssh-add ~/.ssh/id_rsa_github\n# パスワードを入力\n\n# 接続確認\n$ ssh -T git@github.com\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T22:40:26+09:00","message":"Add articles\n","hash":"ae0ea8e11aa1de2b26cd27c1e9c046d2fb9135f4"}],"date_published":"2020-08-14T18:55:39+09:00","tags":["git","ssh","Shell"]},{"id":"https://memo.yammer.jp/posts/lily58-pro-ble","url":"https://memo.yammer.jp/posts/lily58-pro-ble","title":"Lily58 Pro を Bluetooth 対応し無線化する","summary":"前回の記事で作った左右分割型の自作キーボード Lily58 Pro を Bluetooth に対応させ、無線で PC に接続できるように改造した。 その作業記録。 この記事では、無線化にあたり次のことを行う。 USBからキーボードへの給電がなくなるので、別途ボタン電池用の電源基板をつなぐ 有線キーボードの制御用マイコンである Pro Micro を、Bluetooth に対応した BLE Micro Pro に交換する BLE Micro Pro にファームウェアを書き込む 必要なもの Lily58 Pro (遊舎工房) Pro Micro 互換の Bluetooth-LowEnergy 対応","content_html":"<p><a href=\"/posts/lily58-pro-build-log/\">前回の記事で作った</a>左右分割型の自作キーボード <a href=\"https://yuchi-kbd.hatenablog.com/entry/2018/12/23/214342\">Lily58 Pro</a> を Bluetooth に対応させ、無線で PC に接続できるように改造した。\nその作業記録。</p>\n<p>この記事では、無線化にあたり次のことを行う。</p>\n<ul>\n<li>USBからキーボードへの給電がなくなるので、別途<a href=\"https://yushakobo.jp/shop/ble-micro-pro-battery-board/\">ボタン電池用の電源基板</a>をつなぐ</li>\n<li>有線キーボードの制御用マイコンである Pro Micro を、Bluetooth に対応した <a href=\"https://github.com/sekigon-gonnoc/BLE-Micro-Pro\">BLE Micro Pro</a> に交換する</li>\n<li>BLE Micro Pro にファームウェアを書き込む</li>\n</ul>\n<h2>必要なもの</h2>\n<ul>\n<li>Lily58 Pro (<a href=\"https://yushakobo.jp/shop/lily58-pro/\">遊舎工房</a>)</li>\n<li>Pro Micro 互換の Bluetooth-LowEnergy 対応マイコン(<a href=\"https://yusahakobo.jp/shop/ble-micro-pro/\">遊舎工房</a>|<a href=\"https://nogikes.booth.pm/items/1177319\">Booth</a>) x2</li>\n<li>上記マイコン用ボタン電池基板 (<a href=\"https://yushakobo.jp/shop/ble-micro-pro-battery-board/\">遊舎工房</a>|<a href=\"https://nogikes.booth.pm/items/1655285\">Booth</a>) x2</li>\n<li>上記の互換ボードを Lily58 に PCB に固定するためのコンスルー 12ピン (<a href=\"https://yushakobo.jp/shop/a01mc-00/\">遊舎工房</a>)</li>\n<li>ボタン電池 CR1632 x4</li>\n<li>(電池ホルダーを紛失したので) 100均に売っている金属製のコードホルダー x4</li>\n<li>(電池ホルダーを紛失したので) 上記と基板をつなぐスズメッキ線</li>\n<li>マイコンと電池基板をつなぐICピン 長さ1ピン x4</li>\n<li>絶縁用ビニールテープ</li>\n<li>はんだ、はんだごて、はんだ吸い取り線、ピンセット等</li>\n</ul>\n<h2>手順</h2>\n<p>手順を示した<a href=\"https://sekigon-gonnoc.github.io/BLE-Micro-Pro/#/getting_started\">公式ガイド</a>に従って作業を進めた</p>\n<h3>1. Lily58 Pro を完成させる</h3>\n<p>Pro Microはコンスルーを使って組み立て、交換できるようにしておく</p>\n<h3>2. 電池基板の組み立て</h3>\n<h4>2.1. コンデンサ, スイッチ, ダイオードの取り付け</h4>\n<p>電池基板に付属の電子部品をはんだ付けする。</p>\n<p>はんだ付けの手順は以下の通り。Lily58 Proの部品をはんだ付けしたのと同じように行えばよい。\n写真はコンデンサを固定するときのものである。</p>\n<ol>\n<li>まず基板のランドの片方を温めて半田をつける</li>\n</ol>\n<p><img src=\"https://blob.yammer.jp/powerboard1.jpg\" alt=\"基板のランドの片方を温めて半田をつける\"></p>\n<ol start=\"2\">\n<li>先程つけた半田を溶かして部品の片方を固定する</li>\n</ol>\n<p><img src=\"https://blob.yammer.jp/powerboard2.jpg\" alt=\"部品の片方を固定する\"></p>\n<ol start=\"3\">\n<li>まだ半田を流していない側の端子とランドを温めて半田をつける</li>\n</ol>\n<p><img src=\"https://blob.yammer.jp/powerboard3.jpg\" alt=\"部品を完全に固定する\"></p>\n<p>コンデンサは極性がないのでどちら向きにつけてもよい。</p>\n<p>ダイオードはコンデンサと反対の面につける。\n極性があるので注意。\nダイオードの表面に線が入っており、線が近い方の端子がプラス。\nこれを基板のシルク印刷(丸ポッチがある方)に合わせる。</p>\n<p>組み立てると次のようになる。</p>\n<p><img src=\"https://blob.yammer.jp/powerboard4.jpg\" alt=\"表面実装部品を組み立てた電池基板\"></p>\n<h4>2.2. 電池固定用ホルダーの取り付け</h4>\n<p>今回は(届いたときに内容物を確認していなかったがおそらく)この部品を紛失したため、電池が固定できそうな金属部品を探して代用した。</p>\n<p>それがダイソーのコードホルダー。\nこれの左右を切り落として、コの字のパーツを作り、折り曲げる。</p>\n<p><img src=\"https://blob.yammer.jp/powerboard5.jpg\" alt=\"ダイソーのコードホルダーを加工する\"></p>\n<p>次に、完成時に電池と基板を挟み込むように、基板の電池を固定するのと反対側の面に、金具を金具に付属の粘着テープで固定する。</p>\n<p><img src=\"https://blob.yammer.jp/powerboard7.jpg\" alt=\"コードホルダーと基板を結線する\"></p>\n<p>そのあと、基板のホールと金具をスズメッキ線で結線する。</p>\n<p>最後に電池を取り付けてテスターで3Vが得られることを確認したら、全体をビニールテープで絶縁する。</p>\n<p><img src=\"https://blob.yammer.jp/powerboard8.jpg\" alt=\"ビニールテープで絶縁する\"></p>\n<h3>3. BLE Micro Pro の組み立て</h3>\n<p>BLE Micro Pro にコンスルーを取り付ける。はんだ付けの必要はないと書いてあったがなんとなく半田を流しておいた。</p>\n<p>その後、ピンヘッダを1本だけの長さにして、電池基板を BLE Micro Pro につなげる。</p>\n<p>最後に BLE Micro Pro を Lily58 に刺して完成。</p>\n<p><img src=\"https://blob.yammer.jp/lily58proble.jpg\" alt=\"Bluetooth対応の組み立てが完了したLily58 Pro\"></p>\n<h3>4. ファームウェアの書き込み</h3>\n<p>事前に 電池基板のスイッチを切っておいたほうがわかりやすい。\nLily58 Pro に固定した状態で左右の基板ともに、左にスイッチを倒すとOFF。</p>\n<p>BLE Pro Micro は <a href=\"https://sekigon-gonnoc.github.io/home#/keymap\">専用の Web Configurator</a> という Chrome 上で動く Webアプリで書き込むのが一番簡単な方法らしい。</p>\n<ol>\n<li>\n<p>Chrome の設定変更\n<code>chrome://flags#enable-experimental-web-platform-features</code> を開き Experimental Web Platform features を Enabled にする。</p>\n</li>\n<li>\n<p><a href=\"https://sekigon-gonnoc.github.io/home#/keymap\">専用の Web Configurator</a> にアクセスする</p>\n</li>\n<li>\n<p>ナビゲーション付きでセットアップを開始する</p>\n</li>\n<li>\n<p>キーボードの選択画面で Lily58 の rev1 を選ぶ Disable Mass storage Class と Use with LPME-IO のチェックは入れない</p>\n</li>\n<li>\n<p>最新のブートローダー (記事執筆時は0_7_1) 選び Update</p>\n</li>\n<li>\n<p>デバイスを選択する画面が出てくるので, BLE Micro Pro を PC と USBで接続する。\nBLE Micro Pro(新しく増えたデバイス)を選択。\n筆者の環境(Macbook Air 2018 Catarina)では <code>IOUSBHostDevice (tty.usbmodem0000000000011)</code> と <code>IOUSBHostDevice (cu.usbmodem0000000000011)</code>が出現したが、後者を選ぶと書き込めた。</p>\n</li>\n<li>\n<p>アプリケーション(必ずブートローダー同じバージョンのもの)を書き込む。Is Left のみにチェックが入っていること。</p>\n</li>\n<li>\n<p>もう一つの BLE Micro Pro も同様に書き込む。アプリケーション書き込み時に Is  Slave のみにチェックが入っていること。</p>\n</li>\n</ol>\n<h3>5. キーマップの書き込み</h3>\n<ol>\n<li><a href=\"https://sekigon-gonnoc.github.io/qmk_configurator/#/\">専用の QMK Configurator</a> にアクセスする。</li>\n<li>BLE Micro Pro を PC に USB 接続した状態で、CONNECT BY SERIAL ボタンを押す。</li>\n<li>キーボードリストから lily58/rev1 を選択する。</li>\n<li>好みのキーマップを作成する。</li>\n<li>KEYMAP.JSON の左側のボタンを押してキーボードに反映</li>\n<li>そのまま試しにキーを打ってみて問題なさそうであれば、SAVE KEYMAP ボタンでキーボードに保存。</li>\n<li>USBを抜いて、PCと BLE Micro Pro を切り離す</li>\n</ol>\n<h3>6. キーボードを実際に使う</h3>\n<p>左右どちらも電池基板の電源を入れると、勝手に左右がペアリングする。\nPC の Bluetooth 設定ページを見ると Lily58 が出現しているので選択すると PC とのペアリングが完了し使えるようになる。</p>\n<h2>感想</h2>\n<ul>\n<li>公式のドキュメントと、他の分割キーボードの Bluetooth 化の記事を見ながら進めた。</li>\n<li>電池ホルダーがないことに気づいたときは凹んだが、完成品は特に不自然なく動作させられてよかった。</li>\n<li>QMK をビルドして書き込む方法はうまく行ってないので、また必要になる時があったら試してみることとする。</li>\n<li>Web アプリの QMK Configurator はよくできていて、キーの長押しで動作を変えるといった機能にも対応しているのでひとまずは普通に使えている。</li>\n<li>キーボードのペアリングはとてもスムーズだったし、ペアリング後も電源を入れるとすぐにPCとつながるのでとても快適に使うことができている。</li>\n<li>いまのところ一日に一回くらい、キーが押しっぱなしになる(キーを押して無いのにキーコードが送信され続ける)ことがあり、キーボードの電源を一旦切ることで解決している。原因は不明。 今後も継続して発生するようであれば、これの原因究明もせねばならない。</li>\n</ul>\n<p>こんなところかな。</p>\n<p>自作キーボードとはいえ、普通に問題なく使える快適なものが出来上がってとても満足だ。\nキーボードや無線化キットを設計したり情報をまとめたりしてくれている方々に感謝したい。</p>\n<p>両手で1万円くらいかけてわざわざ無線化したのは理由があるのだが、それはまた別記事で紹介することとする。</p>\n<hr>\n<p>追記: (2020/10/04) lily58ビルドログへのリンクを相対リンクへ修正</p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-08-14T02:07:01+09:00","tags":["自作キーボード","Lily58"]},{"id":"https://memo.yammer.jp/posts/lily58-pro-build-log","url":"https://memo.yammer.jp/posts/lily58-pro-build-log","title":"Lily58 を作って自作キーボードに入門した (Lily58 Pro Build Log)","summary":"https://twitter.com/yammerjp/status/1284673759593418752 数ヶ月前から、自作キーボードが気になっていたのだが、ついに手を出してしまった。 自作キーボードとは 自作キーボードとは、キースイッチやキーキャップ、基板(PCB)等を購入し、自分で組み立ててキーボードを作ることである。 自分の欲しいキーボードを作ることができるのが魅力。 パーツをはんだ付けしたり、マイコンにファームウェアを書き込んだり、場合によっては基板を設計したりすることでつくる。 今回は既に設計, 基板が製造済みで、組み立てキット形式になっている Lily58 Pro を作ること","content_html":"<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">毎月一回、自作キーボードが作りたくなってカートに商品を入れるまでやる。あと一歩のところで踏みとどまる。</p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1284673759593418752?ref_src=twsrc%5Etfw\">July 19, 2020</a></blockquote></p>\n<p>数ヶ月前から、自作キーボードが気になっていたのだが、ついに手を出してしまった。</p>\n<h2>自作キーボードとは</h2>\n<p>自作キーボードとは、キースイッチやキーキャップ、基板(PCB)等を購入し、自分で組み立ててキーボードを作ることである。\n自分の欲しいキーボードを作ることができるのが魅力。</p>\n<p>パーツをはんだ付けしたり、マイコンにファームウェアを書き込んだり、場合によっては基板を設計したりすることでつくる。</p>\n<p>今回は既に設計, 基板が製造済みで、組み立てキット形式になっている Lily58 Pro を作ることにした。</p>\n<h2>Lily58 Pro を選んだ理由</h2>\n<p>作る機種は、<a href=\"https://yuchi-kbd.hatenablog.com/entry/2018/12/23/214342\">Lily 58 Pro</a>とした。</p>\n<p>Lily58 が魅力だったのは次の点。</p>\n<h3>キーマップを自由に書き換えられること</h3>\n<p>これは Lily58 に限らず自作キーボードの殆どに言えることだと思うが、キーボードの挙動を自由に書き換えることができる。\n打ちづらい位置にあるキーは使用頻度の少ないキーと入れ替えたり、複数キーの同時押しで特殊な動作をさせたりすることが可能になる。</p>\n<p>自作キーボードは極端に言うとマイコンとスイッチの集合体なので、挙動は本当に自由に決めれると言ってよい。\n(実際には qmk といわれるファームウェアを使うことが一般的で、これの一部を書き換えることでカスタマイズを実現する。)</p>\n<p>キーボード側で自由に設定できるのはとてもありがたい。\nもともとキーリマッパと呼ばれるソフトウェアを使って挙動を書き換えていたのだが、これは環境構築が面倒だったりする。\n(Mac では Karabiner Elements、Ubuntu では xkeysnail を使っていた。)\n自作キーボードであれば USB を刺すだけで済む。</p>\n<p>キーマップを自由に書き換えられるのって嬉しいのか？と思う人、あなたは CapsLock を使っているだろうか。\n結構使用頻度の少ないキーだと思うのだが、そこそこ押しやすい位置にある。\n例えばこれを Ctrl に変えればショートカットを押しやすいし、ESC にすれば Vim が使いやすくなるし、半角/かなキーにするのも便利かもしれない。</p>\n<p>こんな感じで一つずつ置き換えるキーを増やしていき、設定が煩雑になって自作キーボードが欲しくなった。</p>\n<h3>キー数が60個程度 (いわゆる60%キーボード)</h3>\n<p>普段使わないキーはいらないので、コンパクトなものがほしい。\nただし40%等のこれ以上キー数が少ないものは不安。</p>\n<p>既に60%の中華キーボード (<a href=\"https://www.amazon.co.jp/gp/product/B07QQXJ58V/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&#x26;psc=1\">RK Royal RK61</a>) を使っているので、良い落とし所なのではと思った。</p>\n<p>ちなみにこの RK61 は4月頃に自作キーボード (DZ60) を作ろうか迷った挙げ句「自作キーボード、まだ自分には早いかな」と思い、とりあえず60%の US 配列キーボードを買ったもの。\n普通に使えていたが、結局自作キーボード欲を抑えることができなかった。</p>\n<h3>kailh ロープロファイルに対応している</h3>\n<p>Lily58 Pro は kailh ロープロファイル (浅いキーストロークのスイッチの規格) に対応している。</p>\n<p>私はノートパソコンのキーボードのような、キーストロークの浅いキーボードが割と好きで、キーストロークが深いと打ち間違いやすい気がしていた。\n(RK61を使っていたときの感想。昔はメンブレンのキーボードとか普通に使っていたはずなのだが。)</p>\n<p>作ったあとの感想になるが、このキースイッチの選択は正解で浅いキーボードは打ちやすいと感じる。</p>\n<h3>左右分割型であること</h3>\n<p>左右分割型だと肩が丸まらないので姿勢が良くなるらしい。\n当初は分割でなく一体型のキーボードに注目していたが、調べるうちにどうせ作るなら金額も変わらないし左右分割型にしてみるかという気分になっていった。</p>\n<p>左右分割型にしたことで夢が広がるのだがそれはまた別の記事に書くこととする。</p>\n<h3>column-straggered であること</h3>\n<p>column-straggerd とはキー配列の種類で、列ごとに縦方向にずれたもの。</p>\n<p>一般的なキーボードは キーが一段ごとに横方向に半分程度ずれている。(row-straggered という。)\nこのずれはタイプライターの機械構造に起因していて、特に打ちやすくするためではないらしい。</p>\n<p>この横方向にずれた配列が打ちづらいのはわりと感じる(右人差し指でYを打鍵するの遠すぎないか？？)ので、完全に格子状の Ortholiner ないしは column-straggerd なキーボードを求めた。</p>\n<p>ちなみにYを右人差し指でタイプするのは遠すぎるので、左人差し指でタイプする癖がついていたのだが、分割キーボードにしたことでこの癖は矯正することになった。</p>\n<h2>購入したもの</h2>\n<p>自作キーボードの部品を買える通販サイトの代表的なものに以下のサイトがある。\n今回は全て遊舎工房で購入した。</p>\n<ul>\n<li><a href=\"https://yushakobo.jp/\">遊舎工房</a></li>\n<li><a href=\"https://yushakobo.jp/\">Aliexpress</a></li>\n<li><a href=\"https://kbdfans.com/\">KBDFANS</a></li>\n<li><a href=\"https://eucalyn.shop/\">ゆかりキーボードファクトリー</a></li>\n<li><a href=\"https://talpkeyboard.stores.jp/\">TALP KEYBOARD</a></li>\n</ul>\n<p>購入した商品は以下の通り。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">商品</th>\n<th align=\"right\">数量</th>\n<th align=\"right\">値段</th>\n<th align=\"left\">補足</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/lily58-pro/?attribute_pa_sockettype=choc\">Lily58 Pro - Kailh Choc ロープロファイル用</a></td>\n<td align=\"right\">1</td>\n<td align=\"right\">14,800</td>\n<td align=\"left\">大半のパーツが含まれるキット</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/pg1350/?attribute_pa_stem=red\">Kailhロープロファイルスイッチ（10個） - 赤</a></td>\n<td align=\"right\">6</td>\n<td align=\"right\">2,880</td>\n<td align=\"left\">キーを押したことを判定するスイッチ</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/pg1350cap-doubleshot/?attribute_pa_keycapcolor=black\">Kailhロープロ刻印キーキャップ - 黒</a></td>\n<td align=\"right\">1</td>\n<td align=\"right\">3,000</td>\n<td align=\"left\">キースイッチの上にかぶせるキャップ  (刻印付きで100個くらい入っている)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/a0300lb/?attribute_pa_color=white&#x26;attribute_pa_size=1-5u\">Kailhロープロ無刻印キーキャップ1.5U 2U（1個） - 白, 1.5u</a></td>\n<td align=\"right\">2</td>\n<td align=\"right\">400</td>\n<td align=\"left\">親指部分の少し長いキーキャップ</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/pg1350cap-blank/?attribute_pa_keycapcolor=white\">Kailhロープロ無刻印キーキャップ1U（10個） - 白</a></td>\n<td align=\"right\">1</td>\n<td align=\"right\">300</td>\n<td align=\"left\">刻印が合わないところに使うキーキャップ</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/pg1350cap-blank/?attribute_pa_keycapcolor=black\">Kailhロープロ無刻印キーキャップ1U（10個） - 黒</a></td>\n<td align=\"right\">1</td>\n<td align=\"right\">300</td>\n<td align=\"left\">刻印が合わないところに使うキーキャップ</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/trrs_cable/\">TRRSケーブル 1m</a></td>\n<td align=\"right\">1</td>\n<td align=\"right\">300</td>\n<td align=\"left\">左右をつなぐケーブル</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://yushakobo.jp/shop/promicro-spring-pinheader/?attribute_pa_firmware=none\">Pro Micro （コンスルー付き） - なし</a></td>\n<td align=\"right\">1</td>\n<td align=\"right\">1000</td>\n<td align=\"left\">後述の通り、キットに入っているPro Microをダメにしてしまったので追加購入</td>\n</tr>\n</tbody>\n</table>\n<p>この他に Pro Micro と PC をつなぐ USB(A to microB)ケーブルも必要。(<a href=\"https://www.amazon.co.jp/gp/product/B071S5NTDR/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&#x26;psc=1\">家にあるもの</a>を使った)</p>\n<p>Lily58 は、一般にTabやCtrlなどが位置するキーも1U(アルファベットのキーと同じ大きさ)である。\n今回購入したキーキャップセットのキャップは合わないので、別途個別に無刻印のキーキャップをバラで買った。\n(見た目を気にしたければテンキー用の1Uキーなどが余るのでそれを使ってもよさそう。)</p>\n<p>金額は合計して消費税を足して、2.5万円しないくらい。</p>\n<h2>組み立て</h2>\n<p>組み立てには、上記の購入部品の他にはんだ、はんだごて、ピンセット、プラスドライバーが必要になる。エポキシ接着剤(100均に売ってる)、ハンダ吸い取り線もあるといい。</p>\n<h3>USB端子の補強</h3>\n<p>まずはじめに 'もげmicro' を防ぐためにエポキシ接着剤で補強する。</p>\n<p>USBを刺す基板である Pro Micro はコネクタが折れやすいらしく、抜き差しを繰り返すとコネクタが折れてPro Microが使えなくなることがよくあるらしい。\n(自作キーボード界隈ではこのことを'もげMicro'と呼ぶそう)</p>\n<p>この対策のために今回遊舎工房で買ったキットはコンスルーというピンが入っており、はんだ付けせずにPro Microを接続できて交換がしやすいようになっている。</p>\n<p>また、端子部分を補強するためにエポキシ接着剤をコネクタ周囲に流して固定するのが定番のようだ。\n私もインターネットの記事を参考にエポキシ接着剤を塗り、、、</p>\n<p>やってしまった。\nコネクタ内部に接着剤が流れ込み、USBが刺さらなくなってしまった。\n仕方ないので追加でPro Microを一つ注文し、作業をすすめる。</p>\n<h3>Lily58 Pro キットの組み立て</h3>\n<p>以降の組み立ての過程はキーボード設計者のゆーちさんが書いた<a href=\"https://github.com/kata0510/Lily58/blob/master/Pro/Doc/buildguide_jp.md\">ビルドガイド</a>に書かれている。\nこれを<strong>よく読んで</strong>作れば問題ない。</p>\n<p>私はキースイッチ受けとダイオードを逆の面につけてしまい一度ハンダを取り除いて再度つけるなどした。</p>\n<p>あとはんだ付けに不安があれば、はんだ付け後にテスターで導通を確認するのがよい。\n沢山数があって面倒だが、ここでミスっているのを跡で治すほうが大変なのでチェックしておくことをおすすめする。\n私はキースイッチ受けの導通をチェックしておらず、完成後に2つ半田をつけ直した。</p>\n<p>組み立て中の写真を取るのを忘れたが、数時間で組み上がったと思う。</p>\n<h2>ファームウェアの書き込み</h2>\n<h3>デフォルトのファームウェアを書き込む</h3>\n<p>次の手順でファームウェアを書き込む。</p>\n<pre><code class=\"hljs language-shell\"># Ubuntu 20.04 LTS\n$ git clone git@github.com:qmk/qmk_firmware.git\n$ cd qmk_firmware\n$ make git-submodule\n$ ./util/qmk_install.sh # 必要なパッケージをインストール 時間がかかる\n$ sudo make lily58:default:avrdude\n# 次のような表示が出てきたら, キーボードのリセットボタンを押す\n# Detecting USB port, reset your controller now...\n# 同様の手順で左右のマイコンに同じファームウェアを書き込む\n# 左手のUSBコネクタにケーブルを, 左右のTPRS端子に4極ケーブルを刺す\n</code></pre>\n<h3>ファームウェアのカスタマイズ</h3>\n<p>次の手順でファームウェアを書き込む。</p>\n<pre><code class=\"hljs language-shell\"># yammerjp と名付けた自分用キーマップを作る\n\n$ cp -r keyboards/lily58/keymaps/default keyboards/lily58/keymaps/yammerjp\n$ vim keyboards/lily58/keymaps/yammerjp/keymap.c\n# キーマップを書き換える\n\n$ sudo make lily58:yammerjp:avrdude\n# 次のような表示が出てきたら, キーボードのリセットボタンを押す\n# Detecting USB port, reset your controller now...\n# 同様の手順で左右のマイコンに同じファームウェアを書き込む\n# 左手のUSBコネクタにケーブルを, 左右のTPRS端子に4極ケーブルを刺す\n</code></pre>\n<p>私が現在設定している<a href=\"https://github.com/yammerjp/qmk_firmware/blob/master/keyboards/lily58/keymaps/yammerjp/keymap.c\">キーマップは次の通り</a>。</p>\n<p>記事の前半で60%のキーボードが良いと言っておきながら、ホームポジションから離れた上段1列は無効化している(2020/08/05現在)。\nまだ慣れていないので使いやすいかどうかはまだ不明だが、慣れたら便利そうな気がしている。</p>\n<h2>まとめ</h2>\n<p>組み立てるのも結構楽しいし、キーボードが左右で割れているのは新鮮だし、作って良かった。\nキーマップについてはまだまだ慣れていないし、使いながら改良していきたい。</p>\n<hr>\n<p>2021/01/06 必要なパッケージのインストール手順を追記</p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-01-09T11:50:59+09:00","message":"Update a post 'lily58-pro-build-log'\n","hash":"2d5a2e74375d45aa11976d4cbbe72f5f4b6e3a3e"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T02:06:05+09:00","message":"Add lily58 build log\n","hash":"34ed6c7f987985f7d1e7be26e5d1a3ce3b24e1a7"}],"date_published":"2020-08-14T01:55:25+09:00","tags":["自作キーボード","Lily58"]},{"id":"https://memo.yammer.jp/posts/ubuntu-m570-scroll","url":"https://memo.yammer.jp/posts/ubuntu-m570-scroll","title":"Ubuntu20.04でトラックボールのボールを転がしてスクロールする","summary":"最近、Logicool のトラックボール M570 を購入した。 このトラックボールはスクロールホイールがついているが、左右にスクロールする機能はない。 そこで、ボールを転がして上下左右にスクロールを可能にする。 今回は Ubuntu 20.04 をターゲットに設定を行う。 (macOS では、Karabiner Elements と Scroll Reverser というソフト (どちらも brew cask にあり) を使い実現した。詳細は省略) デバイス名を調べる $ xinput list ⎡ Virtual core pointer                    \tid=2\t","content_html":"<p>最近、Logicool のトラックボール M570 を購入した。\nこのトラックボールはスクロールホイールがついているが、左右にスクロールする機能はない。</p>\n<p>そこで、ボールを転がして上下左右にスクロールを可能にする。</p>\n<p>今回は Ubuntu 20.04 をターゲットに設定を行う。\n(macOS では、Karabiner Elements と Scroll Reverser というソフト (どちらも brew cask にあり) を使い実現した。詳細は省略)</p>\n<h2>デバイス名を調べる</h2>\n<pre><code class=\"hljs language-shell\">$ xinput list\n⎡ Virtual core pointer                    \tid=2\t[master pointer  (3)]\n⎜   ↳ Virtual core XTEST pointer              \tid=4\t[slave  pointer  (2)]\n⎜   ↳ Logitech M570                           \tid=9\t[slave  pointer  (2)]\n⎜   ↳ Lily58 Consumer Control                 \tid=11\t[slave  pointer  (2)]\n⎜   ↳ Lily58 Mouse                            \tid=13\t[slave  pointer  (2)]\n⎣ Virtual core keyboard                   \tid=3\t[master keyboard (2)]\n    ↳ Virtual core XTEST keyboard             \tid=5\t[slave  keyboard (3)]\n    ↳ Power Button                            \tid=6\t[slave  keyboard (3)]\n    ↳ Video Bus                               \tid=7\t[slave  keyboard (3)]\n    ↳ Power Button                            \tid=8\t[slave  keyboard (3)]\n    ↳ Lily58 Keyboard                         \tid=10\t[slave  keyboard (3)]\n    ↳ Lily58 Consumer Control                 \tid=12\t[slave  keyboard (3)]\n    ↳ Lily58 System Control                   \tid=14\t[slave  keyboard (3)]\n    ↳ WI-C300 (AVRCP)                         \tid=15\t[slave  keyboard (3)]\n</code></pre>\n<p>以上より、デバイス名は<code>Logitech M570</code>、デバイスIDは<code>9</code>。\nのちの設定ファイルでデバイス名を利用する。</p>\n<h2>ボタン番号を調べる</h2>\n<p>以下のコマンドでIDが<code>9</code>のデバイスの状態をみることができる。</p>\n<p>今回はマウスのスクロールホイールを押し込むボタンの番号を知るために、スクロールホイールを押し込みながら以下のコマンドを実行する。</p>\n<pre><code class=\"hljs language-shell\">$ xinput query-state 9\n</code></pre>\n<p>実行結果より、 M570 のスクロールホイールを押し込むボタンの番号は<code>3</code>であることがわかった。</p>\n<h2>設定を記入する</h2>\n<p>root権限で <code>/usr/share/X11/xorg.conf.d/40-libinput.conf</code> に以下を追記する。</p>\n<pre><code># /usr/share/X11/xorg.conf.d/40-libinput.conf\n# Logitech M570 Scrolling with pressed the right button and rolled the ball\nSection \"InputClass\"\n  Identifier \"Logitech M570\"\n  MatchProduct \"Logitech M570\"\n  Driver \"libinput\"\n  Option \"ScrollMethod\" \"button\"\n  Option \"ScrollMethod\" \"3\"\nEndSection\n</code></pre>\n<p>再起動するとスクロールホイール押下時にボールによるスクロールが有効化される。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://yu1.dev/posts/%E5%B8%B8%E7%94%A8ubuntu-18.04-lts%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/\">常用Ubuntu 18.04 LTSのセットアップ - yu1.dev</a></li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-08-14T01:47:16+09:00","message":"Add ubuntu-m570-scroll.md\n","hash":"c1e30b532ff065640c7979c505ef84eab88f9b3c"}],"date_published":"2020-08-14T01:20:09+09:00","tags":["Linux","Ubuntu","トラックボール"]},{"id":"https://memo.yammer.jp/posts/willani-for-stmt-bug","url":"https://memo.yammer.jp/posts/willani-for-stmt-bug","title":"自作コンパイラのfor文バグ","summary":"C言語のコンパイラを自作に関する今日の日記。 これまでの記事 「数日前からCコンパイラを書き始めた。」 「自作Cコンパイラの途中経過」 「自作コンパイラのセルフホストに挑戦中」 「C言語の構造体メンバのアライメント (x86_64, Linux (System V ABI))」 今日実装したのは次の2つ。 構造体のアライメント for文バグの修正 ちなみに昨日はastをjsonで吐くコード(git反映前に間違えて切り取って飛ばしてしまい頑張って再実装したが、翌日セルフホスト向けにはバグっていることがわかりお蔵入り)、セルフホスト用のシェルスクリプトなどを実装していた。 構造体のアライメント w","content_html":"<p>C言語のコンパイラを自作に関する今日の日記。</p>\n<p>これまでの記事</p>\n<ul>\n<li>「<a href=\"/posts/willani-start/\">数日前からCコンパイラを書き始めた。</a>」</li>\n<li>「<a href=\"/posts/willani-compliperbook-finished/\">自作Cコンパイラの途中経過</a>」</li>\n<li>「<a href=\"/posts/try-selfhost\">自作コンパイラのセルフホストに挑戦中</a>」</li>\n<li>「<a href=\"posts/willani-struct-alignment\">C言語の構造体メンバのアライメント (x86_64, Linux (System V ABI))</a>」</li>\n</ul>\n<hr>\n<p>今日実装したのは次の2つ。</p>\n<ul>\n<li>構造体のアライメント</li>\n<li>for文バグの修正</li>\n</ul>\n<p>ちなみに昨日はastをjsonで吐くコード(git反映前に間違えて切り取って飛ばしてしまい頑張って再実装したが、翌日セルフホスト向けにはバグっていることがわかりお蔵入り)、セルフホスト用のシェルスクリプトなどを実装していた。</p>\n<h2>構造体のアライメント</h2>\n<p><a href=\"https://github.com/yammerjp/willani\">willani</a> での今日行ったアライメントの実装は<a href=\"https://github.com/yammerjp/willani/commit/ae1d68f94211c6c510ea2247abcde7386ffd25c8\">このあたり</a>。実装内容は前回の記事(<a href=\"posts/willani-struct-alignment\">C言語の構造体メンバのアライメント (x86_64, Linux (System V ABI))</a>)で説明している。</p>\n<p>セルフホストをしようとしているがうまくいかないファイルが結構ある。\n構造体のアライメントを実装するきっかけは色々なファイルを第一世代コンパイラに流しているときに出てきた問題からである。</p>\n<p>トークナイズ結果をファイルに出力する <code>src/tokenize_log.c</code> というファイルを willani でビルドしてリンクすると、コンパイラは動くがトークナイズ結果のうち構造体アクセスしている部分だけ出力がなかった。\nここから構造体のアライメントが必要なことと実装していないことに気づいた。</p>\n<p>本当は配列も 16byte 境界でアライメントしなければならなかった気がするが、こちらはまだ未実装。\nUnion もアライメントしなきゃいけないが、こちらはそもそも Union を未実装。\nグローバル変数もアライメントしなきゃいけないが、これもまだ実装していない。</p>\n<h2>for文バグの修正</h2>\n<p>今日はこのアライメントと、いわゆるfor文バグ (と私が呼んでいるもの) の修正をやった。</p>\n<p>ここ最近セルフホストに向けて、gccでコンパイルしたアセンブリに一部 willani でコンパイラしたアセンブリを混ぜてリンクして第1.5世代コンパイラを作っている。\nその中で <code>src/type.c</code> というファイルを willani でビルドしてリンクしたときの話。</p>\n<p>バグの詳細は記事最後に記す。\n時系列に説明しているので長くなってしまった。</p>\n<p>どうもセルフホストに近づいてコンパイラ自身のコードをビルドし始めるとどこで何がバグっているのかわからなくなってくる。</p>\n<p>普通のプログラムでは、入力が誤っているか、入力を受け取るコードが誤っているかを考えればいいが、セルフホストを目指すコンパイラではさらに、入力を受けとるコードを生成するコードが誤っている可能性も考慮しなければならない。</p>\n<p>例えばあとで記す「バグの詳細」に出てくる構造体は、入力文字列で表記されている構造体と、入力文字列を処理するプログラムのデータ構造としての構造体、そしてそのプログラムを生成するときのデータ構造としての構造体があって、いま考えている構造体はなんなんだ？という気持ちになる。</p>\n<p>とにかくバグトラックが大変で、些細なことで1日が溶けた。</p>\n<p>今回の<code>src/type.c</code>ではあまりなかったが、segmentation falut で終了することもよくあるし、デバッグが結構大変。</p>\n<p>パース結果のログは、パースが完全に終わってからASTをたどって出力しているので、パース中に死ぬとどんな状況かつかめないことが多々ある。なのでパース中のデバッグを楽にするためのログ出力などは強化していきたい。</p>\n<p>大変とは書いたが、ゆっくりだが着実にセルフホストに近づいているし、なにより自分の書いたコードで自分の書いたコードをコンパイルする状況はなんともいえないワクワク感があるので楽しい。</p>\n<p>明日以降も楽しみながら進めていきたい。</p>\n<hr>\n<p>補足: タイトルについて</p>\n<p>今日見つけたバグは、私がfor文バグと呼んでいて、実際for文の実装にバグがあったが、内容はささいな話で、結構実装依存な内容である。</p>\n<p>なのでfor文の実装に他の人もハマりがちな落とし穴があるという意味はなく、タイトルはあくまで自分の記憶のためのもの。</p>\n<hr>\n<h2>バグの詳細</h2>\n<p>どうもこの第1.5世代コンパイラは、構造体のメンバを読む処理がバグっていて、定義済みのメンバを呼び出すコードを解釈する際に、同名のメンバが定義されていないとしてエラーを出力していた。</p>\n<p>構造体を含まないコードは問題なくコンパイルできるので、構造体のメンバを読むあたりが明らかに怪しい。\nしかしどうやってバグっているのか全く検討がつかなかった。</p>\n<p>まず疑ったのは、入力のコードの構造体を読み込むときに構造体のアライメントが狂っていて読み込みに失敗しているのではないかということ。\n実は多分ここでもバグっていて、まずは冒頭のような構造体のアライメントを実装した。\nこれにより、構造体の情報を willani 内部で保持する構造体 (Member 構造体) の各メンバに、コンパイラ内で正しくアクセスできるようになった。</p>\n<p>しかしエラーは消えず、ほかにどこがバグっているのかよくわからない。\n(自作コンパイラでは、エラーメッセージは往々にして自分が書いたものが出力されるので、なんともいえない気持ちになる。)</p>\n<p>ひとまず関係のある Member 構造体の生成・格納・検索などのコードに片っ端に fprintf を挿入し、変数の値やポインタの指すメモリ番地などをダンプすることとした。</p>\n<p>ダンプしたことでエラー発生の直前までうまく値がわたっていることはわかった。\n何故か (for 文をつかった) メンバ名の検索だけがうまくいっていない。</p>\n<p>色々試したうえで、たまたま for 文を while 文に書き換えると嘘のように正しく動作して解決した。</p>\n<p>あとで調べると、for 文の初期化処理がうまくいってなかったようだ。\nfor 文を表す node は、初期化文を表す node を init メンバとして持っている。\ninit メンバはふつう1文を表す1つの node で、next メンバに値が入ることはないとして実装されていた。</p>\n<p>しかし、init メンバが変数の宣言と初期化を行う文の node で、かつ初期化子が実行時に定まるとき(例えば <code>int a=p;</code>)バグる。\n<code>int a=1;</code> のような文は、willani では1つの Node 構造体 (<code>Node.kind = ND_STMT_VAR_INIT</code>) で表される。\nこの構造体には初期化の値も含まれており、初期化の値が即値(コンパイル時に定まる値(数字か文字列))なら1つの構造体で完結する。\n一方初期化の値は実行時に定まる場合もある。\nこのときは Node 構造体の next メンバで別の Node 構造体を数珠つなぎに持ち、これらが初期化用の式文をそれぞれあらわすようになっている。</p>\n<p><code>src/codegen.c</code> の実装バグで、for 文の init メンバの next メンバが指すノードを出力していなかったことで、構造体のメンバを表す変数のアドレスを初期価値として渡すコードがコンパイル時に含まれていなかったらしい。</p>\n<p>わかってしまえば数行で解決できるバグだった。\n(<a href=\"https://github.com/yammerjp/willani/commit/7af9e76cadd338e85e41974e257e498819a59756\">コミット</a>)</p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-07-09T03:14:33+09:00","message":"Add posts of willani\n","hash":"d89cc2acd93e6b0cf64c0a70bbfc05793c141f31"}],"date_published":"2020-07-09T02:09:03+09:00","tags":["コンパイラ","willani","日記","C"]},{"id":"https://memo.yammer.jp/posts/willani-struct-alignment","url":"https://memo.yammer.jp/posts/willani-struct-alignment","title":"C言語の構造体メンバのアライメント (x86_64, Linux (System V ABI))","summary":"System V ABI における構造体メンバのアライメントの方法を記す。 C言語のコンパイラを自作しているときに学んだことの記録で、 これまでの記事 「数日前からCコンパイラを書き始めた。」 「自作Cコンパイラの途中経過」 「自作コンパイラのセルフホストに挑戦中」 に続く記事である。 System V ABI とは？ ABI (Application Binary Interface) とは、バイナリレベルでのコンパイラが満たすべき規約である。 アーキテクチャやOSごとに決まっており、例えば我々が一般的に使うintelのCPUである x86_64 でいえば、 Windows は  Micro","content_html":"<p>System V ABI における構造体メンバのアライメントの方法を記す。</p>\n<p>C言語のコンパイラを自作しているときに学んだことの記録で、\nこれまでの記事\n「<a href=\"/posts/willani-start/\">数日前からCコンパイラを書き始めた。</a>」\n「<a href=\"/posts/willani-compliperbook-finished/\">自作Cコンパイラの途中経過</a>」\n「<a href=\"/posts/try-selfhost\">自作コンパイラのセルフホストに挑戦中</a>」\nに続く記事である。</p>\n<h2>System V ABI とは？</h2>\n<p>ABI (Application Binary Interface) とは、バイナリレベルでのコンパイラが満たすべき規約である。\nアーキテクチャやOSごとに決まっており、例えば我々が一般的に使うintelのCPUである x86_64 でいえば、 Windows は  Microsoft ABI, Linux と macOS は <a href=\"https://www.uclibc.org/docs/psABI-x86_64.pdf\">System V ABI</a>という規約で定められている。</p>\n<p>具体的には次のようなものが決められている。</p>\n<ul>\n<li>int long 等の型のサイズ</li>\n<li>構造体のメモリ上での配置</li>\n<li>関数呼び出し時のスタック, レジスタの扱い</li>\n</ul>\n<p>ABIはなんのためにあるのか？\nそれは異なるコンパイラ間でビルドしたバイナリをリンクできるようにするためである。</p>\n<p>現在、一般に libc などのライブラリはバイナリに含まれず、事前に別にビルドされたものを実行時にダイナミックリンクして呼び出している。\nこのような状況下では、異なるコンパイラでビルドされたバイナリ同士が相互に関数を呼び出すことが考えられる。</p>\n<p>(大きなライブラリは個別のアプリケーション開発時にビルドするのは手間だし、libcなどは様々なバイナリで使われるので、バイナリに含ませないことで共通化して容量を削減させたい。)</p>\n<p>int や long といったデータ型は C言語の仕様ではサイズが定められていない。long のサイズが int 以上である、といったことは決まっているが、別に 4byteでなくてもよい。 (16bit CPU では 2byte だったりする。)\nデータ型はアーキテクチャに依存することが多い？と思われる。</p>\n<p>他にも関数呼び出し時に引数や戻り値をどのように渡せばよいかを考えると ABI の必要性がみえてくる。\n引数はレジスタに入れることも考えられるし、スタックに積むことも考えられる。C言語の仕様では引数や戻り値という概念は存在するが、具体的にどう実装するかは定められていない。そこであるコンパイラではレジスタ渡しをするかもしれないし、あるコンパイラではスタック渡しをするかもしれない。どちらも使うコンパイラもあるかも知れないし、コンパイラの作りようはいくらでもある。</p>\n<p>しかしコンパイラが自由に作ってしまうと、他のバイナリから呼ぶときに困る。他のコンパイラでビルドしたバイナリは引数をレジスタに詰めて渡したつもりになっていたが、受け取る側はスタックを読みだすかもしれない。</p>\n<p>このようなアーキテクチャやOSによって共通なC言語をバイナリレベルでコンパイラがどう実装するか決めておいたほうがよいことがABIで定められている。</p>\n<h2>アライメントとは？</h2>\n<p>スタックに領域を確保するとき、空いている部分にピッタリ詰めるのではなく、ある程度キリの良いメモリ配置になるように、使っていない無駄な領域(パディング)を用意してメモリ番地を揃えることをアライメントという。</p>\n<p>C言語のアライメントはABIによって定められている。</p>\n<p>アライメントは構造体に求められる。\nローカル変数同士はどう配置されていようと関係なく、それを読み出すのは自身のバイナリであるから問題ない。</p>\n<p>System V ABIでは、各データ型のサイズとアライメントすべき単位のサイズがそれぞれ同じバイト数になっている。\n(<a href=\"https://www.uclibc.org/docs/psABI-x86_64.pdf\">仕様書</a> 12ページ Figure 3.1 Scalar Types)</p>\n<h2>本題: System V ABI における構造体メンバのアライメント</h2>\n<h3>仕様書の記述</h3>\n<p>仕様書には構造体メンバのアライメントについて次のような記述がある。\n(<a href=\"https://www.uclibc.org/docs/psABI-x86_64.pdf\">仕様書</a> 13ページ 中段 Aggregates and Unions)</p>\n<blockquote>\n<p>Structures and unions assume the alignment of their most strictly aligned component. Each member is assigned to the lowest available offset with the appropriate alignment. The size of any object is always a multiple of the object‘s alignment.</p>\n</blockquote>\n<p>any object と the object が何を指しているのか最初イマイチわかっていなかったが、他の日本語の解説なども読んだ結果、次を意味するらしい。</p>\n<ul>\n<li>構造体の各メンバは, それぞれの要素ごとに厳密にアライメントされる。( => 利用可能なオフセットの中で最も低いもの(パディングが小さいもの)に配置される。)</li>\n<li>構造体末尾のパディングは, 構造体の要素のアライメント単位の中で最大の値でアライメントされるように付加する。</li>\n</ul>\n<h3>例</h3>\n<p>次のような構造体を考える</p>\n<pre><code class=\"hljs language-c\">struct hoge {\n  char a;\n  char b;\n  int c;\n  short d;\n};\n</code></pre>\n<p>以上の構造体の実体は、次のようにアライメントされる</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">メモリ番地</th>\n<th align=\"left\">内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">0x....00</td>\n<td align=\"left\">char a</td>\n</tr>\n<tr>\n<td align=\"left\">0x....ff</td>\n<td align=\"left\">char b</td>\n</tr>\n<tr>\n<td align=\"left\">0x....fe</td>\n<td align=\"left\">padding</td>\n</tr>\n<tr>\n<td align=\"left\">0x....fd</td>\n<td align=\"left\">padding</td>\n</tr>\n<tr>\n<td align=\"left\">0x....fc</td>\n<td align=\"left\">int c</td>\n</tr>\n<tr>\n<td align=\"left\">0x....fb</td>\n<td align=\"left\">int c</td>\n</tr>\n<tr>\n<td align=\"left\">0x....fa</td>\n<td align=\"left\">int c</td>\n</tr>\n<tr>\n<td align=\"left\">0x....f9</td>\n<td align=\"left\">int c</td>\n</tr>\n<tr>\n<td align=\"left\">0x....f8</td>\n<td align=\"left\">short d</td>\n</tr>\n<tr>\n<td align=\"left\">0x....f7</td>\n<td align=\"left\">short d</td>\n</tr>\n<tr>\n<td align=\"left\">0x....f6</td>\n<td align=\"left\">padding</td>\n</tr>\n<tr>\n<td align=\"left\">0x....f5</td>\n<td align=\"left\">padding</td>\n</tr>\n</tbody>\n</table>\n<p>まず、定義されたメンバと同じ順で配置される。</p>\n<ol>\n<li><code>char a</code> は先頭なので何も考えずに配置する。</li>\n<li><code>char b</code> を配置するために、必要ならパディングをしてメモリをアライメントする。\n<code>char</code> のアライメントすべきメモリ境界の単位は 1byte (すなわちどこでも良い) なのでパディングの必要がない (既にアライメントされているともいえる)</li>\n<li><code>char b</code> をアラインされた場所 (今回は <code>char a</code> のすぐ後ろ) に配置する。</li>\n<li><code>int c</code> を配置するために、必要ならパディングをしたメモリをアライメントする。\n<code>int</code> のアライメントすべきメモリ境界は4byteであるが、番地 <code>0x...fe</code> はこれを満たしていないので、2byte パディングしてメモリをアライメントする。</li>\n<li><code>int c</code> をアラインされた場所 (今回は 2byte のパディングの後ろ) に配置する。</li>\n<li><code>short d</code> を配置するために、必要ならパディングをしてメモリをアライメントする。\n<code>short</code> のアライメントすべきメモリ境界の単位は 2byte で、今回はこれを満たしているのでパディングの必要がない (既にアライメントされているともいえる)</li>\n<li><code>short d</code> をアラインされた場所 (今回は <code>int d</code> のすぐ後ろ) に配置する。</li>\n<li><code>struct hoge</code> 自体の終わりにパディングをする。\nアライメントすべきメモリ境界は、メンバのアライメントすべきメモリ境界 (<code>char</code>...1byte, <code>int</code>...4byte, <code>short</code>...2byte) のうち最も大きい値である <code>int</code>...4byte に合わせるようにパディングする\nよって 2byte のパディングを追加</li>\n</ol>\n<p>以上。</p>\n<p>ちなみに <code>sizeof(struct hoge)</code> の値は <code>12</code> となる。</p>\n<ul>\n<li>参考: <a href=\"https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E3%82%A2%E3%83%A9%E3%82%A4%E3%83%A1%E3%83%B3%E3%83%88\">データ構造アライメント - Wikipedia</a> ... 日本語のわかりやすい解説。</li>\n</ul>\n<h2>何故アライメントするのか</h2>\n<p>アクセスが速くなるとか？？。。。</p>\n<hr>\n<p>(2021/08/09) アクセスが早くなるかららしい。\nまた、(今回はx86_64に限定しているが) CPUのアーキテクチャによってはアライメントを強制する場合もあるらしい。</p>\n<p>メモリのアライメントに関する面白い動画に出会った: <a href=\"https://youtu.be/V_MSKb6qgk0?t=4442\">自作OSを拡張する作業配信 (2021/07/24 低レイヤガール - Youtube</a>\n動画後半 1:14:02 ごろからメモリのアライメントに関する話がされている。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-08-09T23:05:35+09:00","message":"Append: メモリアライメントの話が出てくる関連Youtube動画を紹介\n","hash":"447bf52578de17fd36379a8b68f2378124ec8ed8"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T22:43:27+09:00","message":"Fix internal links\n","hash":"698524967ae01574a8037c627a8b083e253a04f2"},{"date":"2020-10-04T20:49:44+09:00","message":"Delete <br/>\n","hash":"fc1f49fea5c87dd342d2e9476f375ebcb013744e"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-07-09T03:14:33+09:00","message":"Add posts of willani\n","hash":"d89cc2acd93e6b0cf64c0a70bbfc05793c141f31"}],"date_published":"2020-07-09T00:59:59+09:00","tags":["コンパイラ","willani","日記","C"]},{"id":"https://memo.yammer.jp/posts/willani-try-selfhost","url":"https://memo.yammer.jp/posts/willani-try-selfhost","title":"自作コンパイラのセルフホストに挑戦中","summary":"以前の記事「数日前からCコンパイラを書き始めた。」「自作Cコンパイラの途中経過」に続く記事。 これは日記であって、知見が書かれた文章ではない。 経過報告 気づけば2020年も半分が終わり、梅雨に入って雨が続き、今日もジメジメと蒸し暑い。 大学の研究室は相変わらずリモートで、新型コロナウィルスの東京都の感染者数も100人を超える日が続き、収束の気配がない。 世間は春から夏へ季節が変わろうとしているし、世界的にウィルスとの戦いを繰り広げている昨今だが、私のやっていることは相変わらずCコンパイラ「willani」の制作。もう6週目になるだろうか。 昨日あたりからセルフホストに向けて、やっとコンパイラ","content_html":"<p>以前の記事「<a href=\"/posts/willani-start/\">数日前からCコンパイラを書き始めた。</a>」「<a href=\"/posts/willani-compliperbook-finished/\">自作Cコンパイラの途中経過</a>」に続く記事。</p>\n<p>これは日記であって、知見が書かれた文章ではない。</p>\n<h2>経過報告</h2>\n<p>気づけば2020年も半分が終わり、梅雨に入って雨が続き、今日もジメジメと蒸し暑い。\n大学の研究室は相変わらずリモートで、新型コロナウィルスの東京都の感染者数も100人を超える日が続き、収束の気配がない。</p>\n<p>世間は春から夏へ季節が変わろうとしているし、世界的にウィルスとの戦いを繰り広げている昨今だが、私のやっていることは相変わらずCコンパイラ「<a href=\"https://github.com/yammerjp/willani\">willani</a>」の制作。もう6週目になるだろうか。</p>\n<p>昨日あたりからセルフホストに向けて、やっとコンパイラ本体のコードを第一世代コンパイラに流し始めた。\nまだ本体のコード全ての機能は実装していないため、そのあたりは置き換えるシェルスクリプトを書いて、一旦スクリプトを挟んでからコンパイルする。\n(#include, 可変長引数定義, 構造体の初期化などが未実装)</p>\n<p>プリプロセスは#defineだけ実装した。プリプロセッサの大枠はできており、他のプリプロセス文も頑張れば実装できそう感はある。\n他にも、ちょっと頑張れば追加できそうな機能がいくつかあるが、一旦機能追加よりもセルフホストに軸をおくことにした。</p>\n<p>20以上のファイルに分割しているので、ファイル単位で置き換えていく。\n一つのオブジェクトファイルをを第一世代コンパイラで出力したものに置き換える。\n問題なければ次のファイルを第一世代コンパイラで出力したものに置き換える。\n問題なければ、、、と繰り返し作業を進める。</p>\n<h2>よくわからなかったこと</h2>\n<p>親コンパイラと第一世代コンパイラでコンパイルしたものを混ぜてgccに投げると、うまく静的リンクできない。\nPIEがどうこう、.textセクションやdataセクションは動的リンクでは使えないぞ、などと怒られる。</p>\n<pre><code class=\"hljs language-shell\">$gcc -static -o willani *.c *.s # *.sはwillaniでコンパイルしたアセンブリ\n</code></pre>\n<p>解決策として、コンパイルと、アセンブル&#x26;リンクを分けて行った。\n親コンパイラの出力も一旦、個々のアセンブリファイルとして出力する。 <code>$gcc hoge.c -S -o hoge.s</code>のように。</p>\n<p>これらを第一世代コンパイラで出力したアセンブリと混ぜてリンクしてもらう。\nリンクはlibcが必要である。\ngccコマンド(<code>$gcc *.s -static -o willani</code>)で行った。\n(<code>$ld</code>を使ってlibcを含んで静的リンクするのってどうやるの?未調査。)</p>\n<p>アセンブルとリンクは分けなくても問題なかった。\n(<code>$as hoge.s -o hoge.o</code>とアセンブルを別途行ってもいいが、gccにアセンブリを投げたらいい感じにリンクまで終わらせてくれる。)</p>\n<h2>第二世代コンパイラのデバッグがつらそう</h2>\n<p>構造体のメモリ配置がABIに従ってなさそうで、今第1.5世代コンパイラ<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>がバグっている。\n第一世代コンパイラはテストに通るのに第二世代コンパイラ(1.5世代含む)はバグっている状況は、どこから手をつけていいかわからずに混乱した。\n今後も前途多難だな。。</p>\n<h2>技術メモ:gccでデバッグ情報のないアセンブリを出力する</h2>\n<p>今さっき知ったtips</p>\n<p><code>$gcc sample.c -S -o sample-s</code>のようにコンパイルすると、デバッグ情報が含まれる。(<code>-g</code>オプションとは違い、最低限。)\n例えば<code>.cfi_startproc</code>などの行が出力に含まれて、人間が読むときには邪魔。</p>\n<p>そこで、***<code>-fno-asynchronous-unwind-tables</code>***オプションが有効。</p>\n<p><code>$gcc sample.c -fno-asynchronous-unwind-tables -S -static -o sample.s</code>のようにオプションを追加すると無駄な行が出力されないので読みやすくなる。</p>\n<p>Cの仕様を調べるとき、gccの出力と見比べたりするのが結構役に立つので、見やすいアセンブリを出せて助かる。(車輪の再発明だからできることだが。)</p>\n<h2>コンパイラをつくっていて良いこと</h2>\n<p>車輪の再発明あるあるではあるが、ブラックボックスを一つ紐解けた。<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></p>\n<p>作る前はコンパイラはよくわからないがよしなにやってくれるもので、アセンブリはとっつきづらいもので、オブジェクトファイルってあるよな程度の理解だった。\n概念としてコンパイル、アセンブル、リンクは知っていたが、実装レベルで知れるのは良い。\nコンパイラは要するに文字列変換プログラムだし、アセンブリはただのテキストデータだし、(リンクはそこそこ大変そうで学ぶべきことがたくさんありそうだけど)、何やってるかは以前より想像がつくようになった。</p>\n<h2>これからやること</h2>\n<ul>\n<li>構造体のメモリ配置を System V ABI に準拠させる</li>\n<li>構造体の初期化文</li>\n<li>セルフホスト</li>\n<li>#include</li>\n<li>#ifndef #ifdef #if #end</li>\n</ul>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>第1.5世代コンパイラ ... 親コンパイラ(gcc)の出力と第一世代コンパイラの出力を混ぜてアセンブル、リンクして作ったコンパイラを指す。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>ブラックボックスを紐解く ... 過去にPDFファイルを自分で作ったり、正規表現エンジン(作りかけ)を作ったり、認証認可の仕組みを作ったときも同じ気持ちになった。今後、OS(途中で止まってる)やHTTPサーバ、インタプリタ(やJITコンパイラ)なんかも生きてるうちに取り組みたい。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-05T19:47:55+09:00","message":"注釈内の改行を削除してremark-footnoteで正しく変換されるよう修正\n","hash":"1741da28aa87b809153d2c6799f500b28fc236a8"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-07-07T03:01:07+09:00","message":"Add posts/willani-try-selfhost.md\n","hash":"9470701518a306f61902c24abe1038e60148eb1d"}],"date_published":"2020-07-07T01:54:10+09:00","tags":["コンパイラ","willani","日記","C"]},{"id":"https://memo.yammer.jp/posts/mares-pack-pro-battery-replacement","url":"https://memo.yammer.jp/posts/mares-pack-pro-battery-replacement","title":"Mares Puck Pro 電池交換の手順(2020年7月)","summary":"(2024/09/22)さてさて、このブログのドメインは「memo.yammer.jp」としていて自分のメモ書きのために用意した場所で、それをブログという体裁で公開しています。ただし大した量のないメモや書き途中の文章がどうにもブログの下書きとしてたまってしまい、かつあとで自分で見返すときに下書きにあると見つけづらくて困るという問題があるので、ここから何本か下書きのものを最低限の体裁だけ整えて、公開しているリポジトリに写していきます。 ふだんダイビングでMaresのPuck Proというダイビングコンピュータを使っている。これはボタンが一つだけでシンプルな操作感と、大きな画面でとても見やすく気に","content_html":"<p>(2024/09/22)さてさて、このブログのドメインは「memo.yammer.jp」としていて自分のメモ書きのために用意した場所で、それをブログという体裁で公開しています。ただし大した量のないメモや書き途中の文章がどうにもブログの下書きとしてたまってしまい、かつあとで自分で見返すときに下書きにあると見つけづらくて困るという問題があるので、ここから何本か下書きのものを最低限の体裁だけ整えて、公開しているリポジトリに写していきます。</p>\n<hr>\n<p>ふだんダイビングでMaresのPuck Proというダイビングコンピュータを使っている。これはボタンが一つだけでシンプルな操作感と、大きな画面でとても見やすく気に入っている。</p>\n<p>一般的なボタン電池が使われていて、交換キットが売っているので自分で電池交換できるのも特徴。過去に2回くらい電池交換した気がしていて、おそらく最初に電池交換した2020/07/01ごろのメモが残っていたので、忘れないようにブログに残しておく。</p>\n<p>なおこの方法は私がこうやったというだけで、同じ方法でやってトラブルが起きても自己責任でお願いします。<sup><a href=\"#user-content-fn-disclaimer\" id=\"user-content-fnref-disclaimer\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup></p>\n<h2>電池交換に必要なもの</h2>\n<ul>\n<li>交換用電池(CR2450)</li>\n<li>交換用Oリング</li>\n<li>グリス</li>\n<li>綿棒</li>\n<li>ティッシュ</li>\n<li>10円玉などの硬貨</li>\n</ul>\n<h2>交換の手順</h2>\n<ol>\n<li>硬貨を使い、裏蓋を回して開ける</li>\n<li>電池を取り出し、新しいものに交換</li>\n<li>古いOリングを取り外す</li>\n<li>Oリングがハマっていたところに付着した古いグリスを綿棒で拭き取る</li>\n<li>新しいOリングにグリスを塗る。米粒の半分位の量でよい。清潔な手の指先にグリスを出し、指でグリス全体に薄く均等に広げる。</li>\n<li>もともとハマっていたところに新しいOリングをはめる</li>\n<li>裏蓋を閉じる</li>\n</ol>\n<h2>交換における注意</h2>\n<p>前提として、手を洗ってきれいな状態で、ホコリ等が少ない机の上など、ゴミが混入しづらい状況で作業しましょう。</p>\n<p>グリスをつけたOリングによって、高圧の水中でも防水性を保っています。水圧がかかるとOリングが変形し、グリスとともに水の侵入を阻止しています。例えば髪の毛が1本挟まると防水性はゼロになります。 ホコリや毛が入り込まないように、グリスをつけるとき、Oリングをはめるとき、蓋を閉めるときはよく見て丁寧に作業しましょう。</p>\n<p>もしOリングを再利用するときは、取り出したOリングからティッシュなどで古いグリスを拭い、表面に傷がないことを確認し、新しいグリスを塗り拡げます。自己責任ですが、私は目視でキズがついていないことを確認して一度再利用しましたが、特に問題は起きていないです。</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-disclaimer\">\n<p>ダイビング器材は命を預ける側面もあるので一応免責を書いています。そもそもダイコンが壊れたら死ぬようなシチュエーションはあまり思い浮かばない (中断して帰ればいい) し、そんなギリギリのダイビングをレジャーですべきではないと思いますが。 <a href=\"#user-content-fnref-disclaimer\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2024-10-07T11:05:44+09:00","message":"最近の話題でもないのでソート順は過去に\n","hash":"f55e09fbff82ca07950fa8a713dfd54355204f9b"},{"date":"2024-09-23T00:03:04+09:00","message":"下書きに溜まっていたものを、記事として追加\n","hash":"4d4e5e542e3fdac52c900a62d9dc62dc041631ac"}],"date_published":"2020-07-01T23:40:07+09:00","tags":["scubadiving","diving","ガジェット"]},{"id":"https://memo.yammer.jp/posts/firebase2hatenablog","url":"https://memo.yammer.jp/posts/firebase2hatenablog","title":"はてなブログに乗り換えた","summary":"昨年に作ったブログの公開場所をはてなブログに変え、名前も「やんまーのブログ」と改名した。 以前は Firebase Hosting 上に、 Nuxt.js の Generate モードで生成した HTML ファイルを公開していた。 移行するにあたって次のことを行った。 はてなブログCLI gimonfu による記事管理 Zeit Nowを使った旧ドメインの転送処理 1. gimonfu による記事管理 はてなブログは Markdown で記事を作成でき、これが乗り換える後押しになった。 Markdown の記事は、以前のブログでも GitHub 上で記事を管理していたので、今回も同じことを行い","content_html":"<p>昨年に作ったブログの公開場所をはてなブログに変え、名前も「やんまーのブログ」と改名した。</p>\n<p>以前は Firebase Hosting 上に、 Nuxt.js の Generate モードで生成した HTML ファイルを公開していた。</p>\n<p>移行するにあたって次のことを行った。</p>\n<ol>\n<li>はてなブログCLI gimonfu による記事管理</li>\n<li>Zeit Nowを使った旧ドメインの転送処理</li>\n</ol>\n<h2>1. <a href=\"https://github.com/yammerjp/gimonfu\">gimonfu</a> による記事管理</h2>\n<p>はてなブログは Markdown で記事を作成でき、これが乗り換える後押しになった。</p>\n<p>Markdown の記事は、以前のブログでも GitHub 上で記事を管理していたので、今回も同じことを行いたいと思っていた。</p>\n<p>そこではてなブログの CLI を作り、GitHub上のリポジトリと同期するようにした。<br>\n<a href=\"http://developer.hatena.ne.jp/ja/documents/blog/apis/atom\">はてなブログはAPIを公開しており</a>、これを使って Markdown ファイルをアップロード、ダウンロードしている。</p>\n<p>はてなブログの CLI には、既に <a href=\"https://github.com/x-motemen/blogsync\">blogsync</a> というソフトウェアがある。<br>\n当初はこのソフトウェアを使おうと思っていたのだが、新規記事投稿の部分が自分の思うように行かず、APIを触っているうちに、全部作ったほうがいいのでは？という気持ちになり CLI が出来上がってしまった。</p>\n<p><a href=\"https://github.com/x-motemen/blogsync\">blogsync</a> と <a href=\"https://github.com/x-motemen/blogsync\">gimonfu</a> はどちらも1記事につき、1ファイルで、ファイル先頭に YAML Front matter といわれる YAML 形式の記事情報を含む。\nまたURLの構造が記事ファイルのディレクトリ構造となる点も同じだ。</p>\n<p>一方で、記事の投稿に関しては異なる点がある。<br>\nblogsync では、記事本文のみを標準入力で CLI に渡すが、 gimonfu では、対象ディレクトリ内にある新しいファイルを新規記事として認識し投稿する。</p>\n<p>こうすると、CIを組み合わせれば、新規投稿時にも CLI を直接触らずに運用できる。</p>\n<p>現にこのブログも、新規投稿時にファイルを追加して GitHub に push すれば、自動的にはてなブログも更新されるようにしてある。 (逆にはてなブログが更新されたらGitHub にも反映されるワークフローも設定している。)</p>\n<p>gimonfu の使い方の詳細は <a href=\"https://github.com/yammerjp/gimonfu\">README</a> に譲るが、<a href=\"https://github.com/yammerjp/basd4g.hatenablog.com/tree/master/.github/workflows\">このブログのワークフロー</a>と同じものを GitHub Actions に指定すれば、記事管理がとても捗ると思うので是非活用して欲しい。</p>\n<h2>2. Zeit now を使った旧ドメインの転送処理</h2>\n<p>旧ドメインの記事を公開していた URL は全て、express.js を使って、今の記事に 301 リダイレクトするように設定した。(<a href=\"/posts/zeit-now/\">設定した内容</a>)</p>\n<p>Now を初めて使ったが、とても簡単にアプリケーションを公開できるので、さくっと作ったときなどに活用していきたい。</p>\n<hr>\n<p>というわけで、これからはてなブログで更新していきます。\nよろしくお願いします。(誰に)</p>\n<hr>\n<p>追記: (2020/10/04) ドメイン転送の記事へのリンクを相対リンクに修正</p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T22:43:27+09:00","message":"Fix internal links\n","hash":"698524967ae01574a8037c627a8b083e253a04f2"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-06-14T21:27:45+09:00","message":"Add posts\n","hash":"9e1ae1db614f211876a379a61235e4e93956f4a5"}],"date_published":"2020-06-14T21:26:00+09:00","tags":["はてなブログ"]},{"id":"https://memo.yammer.jp/posts/gimonfu","url":"https://memo.yammer.jp/posts/gimonfu","title":"gimonfu で、はてなブログの記事を GitHub と同期する","summary":"ブログをはてなブログに移行するにあたり、記事を管理する CLI 「gimonfu」を作成した。 本記事では、gimonfu と GitHub Actions を使って、GitHub のリポジトリとはてなブログを連携し、記事を git で管理できるように設定を行う。 記事の内容を設定すれば、Markdown ファイルを GitHub のリポジトリにプッシュするとはてなブログに記事を公開できたり、はてなの Web ページで記事を編集すると、GitHub のリポジトリに自動で反映されてバックアップを取ることができる。 最終的な GitHub Actions の設定は、私のブログの記事リポジトリにある","content_html":"<p>ブログをはてなブログに移行するにあたり、記事を管理する CLI <a href=\"https://github.com/yammerjp/gimonfu\">「gimonfu」</a>を作成した。</p>\n<p>本記事では、gimonfu と GitHub Actions を使って、GitHub のリポジトリとはてなブログを連携し、記事を git で管理できるように設定を行う。</p>\n<p>記事の内容を設定すれば、Markdown ファイルを GitHub のリポジトリにプッシュするとはてなブログに記事を公開できたり、はてなの Web ページで記事を編集すると、GitHub のリポジトリに自動で反映されてバックアップを取ることができる。</p>\n<p>最終的な GitHub Actions の設定は、<a href=\"https://github.com/yammerjp/basd4g.hatenablog.com/tree/master/.github/workflows\">私のブログの記事リポジトリ</a>にある yaml にて確認できる。</p>\n<h2>もくじ</h2>\n<p>次の流れで設定する</p>\n<ol>\n<li>はてなブログの記事執筆設定を Markdown モードにする</li>\n<li>はてなブログの API キーを確認する</li>\n<li>GitHub リポジトリを作り、ワークフローに使う Secrets を登録する</li>\n<li>記事をダウンロードするワークフローを追加する</li>\n<li>記事をダウンロードするワークフローを定期実行させる</li>\n<li>記事をアップロードするワークフローを追加する</li>\n</ol>\n<h2>1. はてなブログの記事執筆設定を Markdown モードにする</h2>\n<p>はじめに、はてなブログの設定を変更し、記事執筆設定を Markdown モードにする。</p>\n<p><a href=\"https://blog.hatena.ne.jp/-/config\">はてなブログの設定ページ</a>から、設定 -> 編集モード を 「Markdownモード」に設定し「変更する」ボタンを押す</p>\n<p>まずはてなブログの基本設定を開く。</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-1.png\" alt=\"はてなブログの基本設定を開く\"></p>\n<p>下へスクロールし、編集モードを Markdown モードにする。</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-2.png\" alt=\"編集モードを Markdown モードへ\"></p>\n<p>「変更する」ボタンを押して変更を反映する。</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-3.png\" alt=\"「変更する」ボタンを押して変更を反映する\"></p>\n<p>(補足: 他のモードでも動作確認はしていないので、もし Markdown 記法以外を利用する場合はご自身で試して欲しい。</p>\n<h2>2. はてなブログの API キーを確認する</h2>\n<p><a href=\"https://blog.hatena.ne.jp/-/config\">はてなブログの設定ページ</a>から、設定 -> 詳細設定 に移動し、ユーザID, ブログID, API キー をメモする</p>\n<p>まずはてなブログの詳細設定を開く。</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-4.png\" alt=\"詳細設定へ移動\"></p>\n<p>下へスクロールし、AtomPubの項目から、ユーザID, ブログID, APIキーを確認する。</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-5.png\" alt=\"APIキーをメモする\"></p>\n<h2>3. GitHub リポジトリを作り、ワークフローに使う Secrets を登録する</h2>\n<p>ワークフローとは、GitHub Actions で実行する一連の内容を記したものである。\n指定した時間になったときや、GitHub に コミットをプッシュしたとき、事前に作成したワークフローを自動で実行できる。</p>\n<p>この章では、GitHub で新しいリポジトリを作り、ワークフローで使う Secrets を登録する。</p>\n<p>まずは、新しいリポジトリを作った後、Settings -> Secrets を開く</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-6.png\" alt=\"Secrets 登録画面を開く\"></p>\n<p>ワークフローで使う Name と Value の組み合わせを5組登録する</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-7.png\" alt=\"Secrets の Name と Value を登録する\"></p>\n<p>登録する内容は次の通り。\n例を参考に自分の文字列に置き換えてほしいj</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n<th>Value (例)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>HATENA_USER</code></td>\n<td>先程確認したはてなブログのユーザID</td>\n<td>basd4g</td>\n</tr>\n<tr>\n<td><code>HATENA_BLOG_ID</code></td>\n<td>先程確認したはてなブログのブログID</td>\n<td>basd4g.hatenablog.com</td>\n</tr>\n<tr>\n<td><code>HATENA_API_KEY</code></td>\n<td>先程確認したはてなブログのAPIキー</td>\n<td>abcdef0123</td>\n</tr>\n<tr>\n<td><code>GIT_NAME</code></td>\n<td>(ワークフローで自動的に作られるコミットの)自分の名前</td>\n<td>Taro Yamada</td>\n</tr>\n<tr>\n<td><code>GIT_MAIL</code></td>\n<td>(ワークフローで自動的に作られるコミットの)自分のメールアドレス</td>\n<td><a href=\"mailto:basd4g@example.com\">basd4g@example.com</a></td>\n</tr>\n</tbody>\n</table>\n<h2>4. 記事をダウンロードするワークフローを追加する</h2>\n<p>記事をダウンロードする GitHub Actions ワークフローを追加する。</p>\n<p>ワークフローは GitHub リポジトリのWebページ上からも追加できる。</p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-8.png\" alt=\"新しいワークフローを追加する\"></p>\n<p><img src=\"https://blob.yammer.jp/gimonfu-9.png\" alt=\"記事をダウンロードするワークフローを追加する\"></p>\n<p><code>.github/workflows/pull.yaml</code> に次の内容を記述する</p>\n<pre><code class=\"hljs language-yaml\"># .github/workflows/pull.yaml\nname: Pull\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  pull:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Deploy and Commit\n      env:\n        HATENA_USER_ID: ${{ secrets.HATENA_USER }}\n        HATENA_BLOG_ID: ${{ secrets.HATENA_BLOG_ID }}\n        HATENA_API_KEY: ${{ secrets.HATENA_API_KEY }}\n        GIT_NAME: ${{ secrets.GIT_NAME }}\n        GIT_MAIL: ${{ secrets.GIT_MAIL }}\n        REPO_OWNER: ${{ github.repository_owner }}\n      run: |\n        cd ${GITHUB_WORKSPACE}\n\n        # コミットのためのgitの設定\n        echo 'git initialize'\n        git config --global user.name \"${GIT_NAME}\"\n        git config --global user.email \"${GIT_MAIL}\"\n        git remote set-url origin \"https://${REPO_OWNER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git\"\n        echo 'gimonfu initialize'\n\n        # gimonfuの初期設定\n        npm init -y > /dev/null 2>&#x26;1\n        npm install gimonfu\n        echo \"{\\\"user_id\\\":\\\"${HATENA_USER_ID}\\\",\\\"blog_id\\\":\\\"${HATENA_BLOG_ID}\\\",\\\"api_key\\\":\\\"${HATENA_API_KEY}\\\"}\" > .gimonfu.json\n\n        # 新しい/更新された記事をダウンロード\n        echo 'gimonfu pull'\n        npx gimonfu --git-commit-date pull\n\n        # コミットを作成する\n        git add entry\n        # This script will not make a commit if there are no changes.\n        if ! git diff --staged --exit-code --quiet; then \\\n          git commit -m \"Pull articles (automatic commit)\" ;\\\n        fi\n\n        git push origin HEAD:master\n</code></pre>\n<p>コミットが GitHub 上にプッシュされると、ワークフローが走ってリポジトリに記事が反映される。</p>\n<h2>5. 記事をダウンロードするワークフローを定期実行させる</h2>\n<p>先程は初回だったので「master ブランチにプッシュしたときにワークフローを実行する」(=>はてなブログの内容を GitHub リポジトリに反映させる)設定にした。</p>\n<p>ここではワークフローの一部を書き換えて、1時間に一回ワークフローを実行させる。</p>\n<p><code>.github/workflows/pull.yaml</code> の内容を一部書き換える。</p>\n<pre><code class=\"hljs language-diff\">--- a/.github/workflows/pull.yaml\n+++ b/.github/workflows/pull.yaml\n@@ -1,8 +1,8 @@\n name: Pull\n \n on:\n-  push:\n-    branches: [ master ]\n+  schedule:\n+    - cron: '0 * * * *'\n \n jobs:\n   pull:\n</code></pre>\n<h2>6. 記事をアップロードするワークフローを追加する</h2>\n<p><code>.github/workflows/push.yaml</code>に次の内容を記述してコミット、プッシュする。</p>\n<pre><code class=\"hljs language-yaml\"># .github/workflows/push.yaml\nname: Push\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  push:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Deploy and Commit\n      env:\n        HATENA_USER_ID: ${{ secrets.HATENA_USER }}\n        HATENA_BLOG_ID: ${{ secrets.HATENA_BLOG_ID }}\n        HATENA_API_KEY: ${{ secrets.HATENA_API_KEY }}\n        GIT_NAME: ${{ secrets.GIT_NAME }}\n        GIT_MAIL: ${{ secrets.GIT_MAIL }}\n        REPO_OWNER: ${{ github.repository_owner }}\n      run: |\n        cd ${GITHUB_WORKSPACE}\n\n        # コミットのためのgitの設定\n        echo 'git initialize'\n        git config --global user.name \"${GIT_NAME}\"\n        git config --global user.email \"${GIT_MAIL}\"\n        git remote set-url origin \"https://${REPO_OWNER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git\"\n\n        # gimonfuの初期設定\n        echo 'gimonfu initialize'\n        npm init -y > /dev/null 2>&#x26;1\n        npm install gimonfu\n        echo \"{\\\"user_id\\\":\\\"${HATENA_USER_ID}\\\",\\\"blog_id\\\":\\\"${HATENA_BLOG_ID}\\\",\\\"api_key\\\":\\\"${HATENA_API_KEY}\\\"}\" > .gimonfu.json\n\n        # 新しい/更新された記事をアップロード\n        echo 'gimonfu push'\n        npx gimonfu --git-commit-date push\n        git add entry\n\n        # コミットを作成する\n        # This script will not make a commit if there are no changes.\n        if ! git diff --staged --exit-code --quiet; then \\\n          git commit -m \"Pull articles (automatic commit)\" ;\\\n        fi\n\n        git push origin HEAD:master\n</code></pre>\n<h2>6. 記事の投稿と更新</h2>\n<p>以上の設定を行うと、GitHub のリポジトリとはてなブログの記事が同期できる。</p>\n<p>GitHub 上の Markdown ファイルを上書きすると記事が更新されるし、新しい Markdown ファイルを追加すると記事が投稿される。</p>\n<p>Markdownファイルは次のような記述で始まる。</p>\n<pre><code class=\"hljs language-md\">---\ntitle: タイトル\ndate: 2019-09-18T12:50:00.000Z\nid: \"26006613576772424\"\n---\n\n記事本文が以降続く。\n</code></pre>\n<p>記事の冒頭に <code>---</code> で挟んだYAML形式のメタ情報を付加する。\n<code>id: </code>の行は新規投稿時には記述しない。投稿されると自動で付加される。</p>\n<h2>おわりに</h2>\n<p>ブログ記事を Git で管理したいというモチベーションから CLI を作るまでに至った。</p>\n<p>GitHub Actions のワークフローを登録しておけば、ローカルに gimonfu をインストールせずに使えるが、インストールして使うこともできる。\n<code>$ npm install -g gimonfu</code>でインストールでき、使い方は <a href=\"https://github.com/yammerjp/gimonfu\">README</a> で説明している。</p>\n<hr>\n<p>ここまで読んでいただいてありがとうございました。\nあなたのはてなブログ生活が捗ることを願っています。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-06-14T21:23:06+09:00","tags":["JavaScript","はてなブログ","CI","GitHub Actions"]},{"id":"https://memo.yammer.jp/posts/willani-compliperbook-finished","url":"https://memo.yammer.jp/posts/willani-compliperbook-finished","title":"自作Cコンパイラの途中経過","summary":"Cコンパイラ自作の進捗 以前の記事に書いたとおり、C言語のコンパイラを自作している。 セルフホストには至ってないが、教科書であるオンラインブック「低レイヤを知りたい人のためのCコンパイラ作成入門」の内容が一通り実装し終わったので経過報告をする。 裏で最初は毎日記録をつけていたのだが、だんだん面倒くさくなってやめたので、コミット履歴を見ながら振り返る。 最初のコミットは19日前(5/21)なので、そろそろ三週間経ったところだ。 5/28-30の三日間以外は何かしらコミットしているので、継続的に開発できている。もっともバイトや授業に遮られることがなく、時間がたくさんあるのでできることであるが。 こ","content_html":"<h2>Cコンパイラ自作の進捗</h2>\n<p><a href=\"/posts/willani-start/\">以前の記事</a>に書いたとおり、C言語のコンパイラを自作している。</p>\n<p>セルフホストには至ってないが、教科書であるオンラインブック<a href=\"https://www.sigbus.info/compilerbook\">「低レイヤを知りたい人のためのCコンパイラ作成入門」</a>の内容が一通り実装し終わったので経過報告をする。</p>\n<p>裏で最初は毎日記録をつけていたのだが、だんだん面倒くさくなってやめたので、コミット履歴を見ながら振り返る。</p>\n<p>最初のコミットは19日前(5/21)なので、そろそろ三週間経ったところだ。\n5/28-30の三日間以外は何かしらコミットしているので、継続的に開発できている。もっともバイトや授業に遮られることがなく、時間がたくさんあるのでできることであるが。</p>\n<p>ここまでのマイルストーンとしては、次の機能開発があった。</p>\n<ul>\n<li>分岐,繰り返し処理ができる</li>\n<li>関数定義ができる</li>\n<li>型情報が付加される(完全なサブセットをコンパイルできるようになる)</li>\n<li>テストをCで書き直す</li>\n</ul>\n<p>テストをCで書き直す(<a href=\"https://www.sigbus.info/compilerbook#%E3%82%B9%E3%83%86%E3%83%83%E3%83%9728-%E3%83%86%E3%82%B9%E3%83%88%E3%82%92c%E3%81%A7%E6%9B%B8%E3%81%8D%E7%9B%B4%E3%81%99\">オンラインブックStep28</a>)\nところでバグが結構見つかって一つ一つ潰すのに時間がかかった。<br>\nでもこの頃はGDBの基本的な使い方に慣れてきて、更に当たりをつけてアセンブリを読むことができたので、最初の頃より全然楽だった。</p>\n<p>テストファイルをCで書き直し、これを自作コンパイラでコンパイルすると10000万行(デバッグ情報含む)くらいのアセンブリになった。\nこれくらいの規模のプログラムがうまく実行できると、人間を超えていく感じがして楽しい。</p>\n<h2>狭いスコープのローカル変数</h2>\n<p>ブロックスコープ内の変数の実装方法は自分で考えたものなのだが、結構うまくできたと思っている。</p>\n<p><a href=\"https://github.com/yammerjp/willani\">willani</a>には変数一つを表す構造体があり、これをつなげた2つの単方向リストがそれぞれ、グローバル変数とローカル変数を表している。</p>\n<p>スコープのある変数を実装するには次の2つのことを考慮する必要がある。</p>\n<ol>\n<li>変数を定義するときは、同じスコープの重複した変数名を許さない。</li>\n<li>変数を呼び出すときは、同じ名前の変数のなかで、その式が属するスコープのうちもっとも狭いスコープの変数を指す。</li>\n</ol>\n<p>トークン列をパースするときに次のような方法で 1. 2. を実現した。<br>\nなお、私の実装ではブロックスコープの変数はローカル変数の単方向リストに含む。</p>\n<ol>\n<li>\n<p>新しいスコープに入るときに、その前最後に定義されたローカル変数をのポインタを<code>out_of_scope</code>として記録する。<br>\n変数定義するときは、単方向リストを先頭(最新)から<code>out_of_scope</code>の前までみて、同じ名前のものがないか調べる。</p>\n</li>\n<li>\n<p>変数を定義するとき、<code>Var.referable = true</code>というフラグを立てる。<br>\nスコープを出るときに、そのスコープで定義した全ての変数 (<code>out_of_scope</code>より新しい定義の変数) のフラグを下げる。(<code>false</code>をセットする。)<br>\n以後呼び出す変数を探すときにフラグが<code>false</code>なものをスキップさせる。</p>\n</li>\n</ol>\n<p>こうすることで、最新に定義した変数から順番に調べていけば、「1. その変数を定義してよいか」「2. 同名の異なる変数のうちどの変数を指しているか」がわかる。</p>\n<p>リストには全てのローカル変数が残っているので、コード生成時に変数の領域を確保するのが簡単だし、パース時にどの変数を指し示すか解釈しておけばコード生成時は変数名の重複を考える必要がない。</p>\n<h2>今後の展望</h2>\n<p>植山類さんのコンパイラ実装である <a href=\"https://github.com/rui314/9cc\">9cc</a> や <a href=\"https://github.com/rui314/chibicc\">chibicc</a> 等のコミットログをみて、セルフホストをするためにはあと1倍くらい、完成まではさらに1倍くらいの手間がかかるのではないかと予想している。</p>\n<p>セルフホストに必要そうな機能は次の通り。</p>\n<ul>\n<li>構造体</li>\n<li>'->'</li>\n<li>typedef</li>\n<li>プリプロセス</li>\n<li>bool型</li>\n<li>void型</li>\n<li>enum</li>\n<li>char literal</li>\n<li>(file scope function)</li>\n<li>switch</li>\n<li>'++', '--'</li>\n<li>'+='</li>\n<li>'!'</li>\n<li>'&#x26;&#x26;', '||'</li>\n<li>'break'</li>\n<li>'continue'</li>\n<li>'extern'</li>\n<li>'NULL'</li>\n<li>(3項演算子)</li>\n<li>(可変長引数関数の定義)</li>\n</ul>\n<p>(括弧がついてるのはサボろうか迷っているもの。\n特定の文法を自分のコードから削除して書き換えてしまえば、その文法に対応しなくてもセルフホストできてしまう)</p>\n<p>構造体とプリプロセスが時間かかりそうだなと見ている。</p>\n<p>Cの仕様書をどこまで実装するかは考えものだが、セルフホストはやっぱり楽しみ。</p>\n<p>Webのフロントエンドをはじめとする物々にも手を付けねばと思っているし、研究室の論文も読まねばと思っているので、今後はバランスも考えてやっていきたい。</p>\n<hr>\n<p>追記: (2020/10/04) 以前の記事へのリンクを相対リンクに修正</p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T22:43:27+09:00","message":"Fix internal links\n","hash":"698524967ae01574a8037c627a8b083e253a04f2"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-06-09T17:59:12+09:00","message":"Add a post of willani\n","hash":"c6dbd6f67b55ff052997d1f8d4e9860e9f5f1778"}],"date_published":"2020-06-09T17:00:06+09:00","tags":["コンパイラ","willani","日記","C"]},{"id":"https://memo.yammer.jp/posts/zeit-now","url":"https://memo.yammer.jp/posts/zeit-now","title":"Zeit Now を使って、express.jsで書かれたアプリケーションを独自ドメインで公開する","summary":"now という PaaS がある。 Node.js で書かれたアプリケーションを、無料で3つまでホスティングできるらしい。 heroku を無料プランで使うと、dyno の立ち上げに30秒くらいかかるので、Web サーバとしては致命的に遅い。 一方 zeit はそのような待ち時間は発生しない。(どこかに、AWS Lambda を中で使っていると書いてあった気がする) 今回はシンプルな express.js のアプリケーションを now でホスティングする手順。 インストール $ mkdir now-app $ cd now-app $ yarn init $ yarn global add n","content_html":"<p>now という PaaS がある。</p>\n<p>Node.js で書かれたアプリケーションを、無料で3つまでホスティングできるらしい。</p>\n<p>heroku を無料プランで使うと、dyno の立ち上げに30秒くらいかかるので、Web サーバとしては致命的に遅い。\n一方 zeit はそのような待ち時間は発生しない。(どこかに、AWS Lambda を中で使っていると書いてあった気がする)</p>\n<p>今回はシンプルな express.js のアプリケーションを now でホスティングする手順。</p>\n<h2>インストール</h2>\n<pre><code class=\"hljs language-shell\">$ mkdir now-app\n$ cd now-app\n$ yarn init\n$ yarn global add now\n$ yarn add express\n$ touch index.js\n$ touch now.json\n</code></pre>\n<h2>アプリケーションを作る</h2>\n<p>index.js に次のように記入</p>\n<pre><code class=\"hljs language-javascript\">// index.js\n`use strict`\n\nconst express = require('express');\nconst app = express();\n\napp.get('/*', (req,res) => {\n  res.send('hello, world!');\n  res.end();\n})\n\nconst port = process.env.PORT || 3000;\n// ポート番号は上記のように環境変数から読み込むこと\napp.listen(3000, () => console.log(`listening on port ${port}`));\n</code></pre>\n<h2>now の設定</h2>\n<p>事前に、node.js のアプリケーションであることを指定しなければならない。</p>\n<p>何もしないと静的ホスティングと判断され、アプリケーションのソースコードを写した Web ページがデプロイされる。</p>\n<p>now.json に次のように記入</p>\n<pre><code class=\"hljs language-json\">{\n    \"version\": 2,\n    \"builds\": [{ \"src\": \"index.js\", \"use\": \"@now/node\" }],\n    \"routes\": [{ \"src\": \"(.*)\", \"dest\": \"index.js\" }]\n}\n</code></pre>\n<h2>npm scriptの設定</h2>\n<p>now が実行時に index.js を実行してくれるように、package.json に次の項目を追加</p>\n<pre><code class=\"hljs language-json\">{\n \"scripts\": {\n    \"start\": \"node index.js\"\n  }\n}\n</code></pre>\n<h2>デプロイ</h2>\n<pre><code class=\"hljs language-shell\">$ now\n# 対話にしたがってメールを入れると、ログインリンクのついたメールが届くので、クリックして認証。\n</code></pre>\n<h2>独自ドメイン(サブドメイン)を登録</h2>\n<p>以下、現在<code>hogehoge-hogehoge.now.sh</code>で公開されていて、<code>hogehoge.example.com</code>でアクセスできるようにするときの設定。</p>\n<p>まずは親のドメインをzeitに登録する</p>\n<pre><code class=\"hljs language-shell\">$ now domains add example.com\n</code></pre>\n<p>ドメインの所有者認証を行う</p>\n<pre><code class=\"hljs language-shell\">$ now domains verify example.com\n</code></pre>\n<p>すると、DNSに何も設定していないので失敗する。\nどう設定すべきか表示されるので 画面に表示される通り、DNSに登録する。\nついでに先にお目当てのサブドメインの CNAME も登録しておく。</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>type</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_now</td>\n<td>TXT</td>\n<td>表示されたキー</td>\n</tr>\n<tr>\n<td>hogehoge</td>\n<td>CNAME</td>\n<td>alias.zeit.co</td>\n</tr>\n</tbody>\n</table>\n<p>再度ドメインの所有者認証を行う</p>\n<pre><code class=\"hljs language-shell\">$ now domains verify example.com\n</code></pre>\n<p>サブドメインのエイリアスを設定する</p>\n<pre><code class=\"hljs language-shell\">$ now alias https://hogehoge-hogehoge.now.sh hogehoge.example.com\n</code></pre>\n<h2>おわりに</h2>\n<p>以上の手順と同様の作業で公開したリポジトリ: <a href=\"https://github.com/yammerjp/blog.yammer.fun\">blog.yammer.fun - GitHub yammerjp</a></p>\n<p>古いブログのURLをリダイレクトさせるために使った。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-31T16:56:01+09:00","message":"Add a post of zeit now\n","hash":"36edeaa370c8c63ac19dc3172219a0ed7bdb79e7"}],"date_published":"2020-05-31T16:44:33+09:00","tags":["JavaScript","ドメイン"]},{"id":"https://memo.yammer.jp/posts/tcp-udp","url":"https://memo.yammer.jp/posts/tcp-udp","title":"TCP と UDP","summary":"今日のインターネットの根幹をなすTCP/IPプロトコルスタックのうち、トランスポート層のプロトコルであるTCPとUDPについての基本的な知識を説明する。 本記事は研究室の輪講で「マスタリングTCP/IP 入門編」を読んだことがきっかけの第2回。 前回はTCP/IPプロトコルスタック全体についての概要を書いた。 参考文献: マスタリングTCP/IP入門編 第6章 pp219-246 もくじ トランスポートプロトコルの役割 ポート番号 TCP と UDP TCP の様々な制御 トランスポートプロトコルの役割 トランスポート層の役割は主に3つある。 End-to-End の通信を実現すること。 アプ","content_html":"<p>今日のインターネットの根幹をなすTCP/IPプロトコルスタックのうち、トランスポート層のプロトコルであるTCPとUDPについての基本的な知識を説明する。</p>\n<p>本記事は研究室の輪講で「マスタリングTCP/IP 入門編」を読んだことがきっかけの第2回。\n<a href=\"/posts/internet-tcpip/\">前回</a>はTCP/IPプロトコルスタック全体についての概要を書いた。</p>\n<ul>\n<li>参考文献: マスタリングTCP/IP入門編 第6章 pp219-246</li>\n</ul>\n<h2>もくじ</h2>\n<ul>\n<li>トランスポートプロトコルの役割</li>\n<li>ポート番号</li>\n<li>TCP と UDP</li>\n<li>TCP の様々な制御</li>\n</ul>\n<h2>トランスポートプロトコルの役割</h2>\n<p>トランスポート層の役割は主に3つある。</p>\n<ol>\n<li>End-to-End の通信を実現すること。</li>\n<li>アプリケーションプログラム間での通信を可能にすること</li>\n<li>(TCP では) 信頼性のある通信を実現すること</li>\n</ol>\n<p>これらの役割を、他層との関係とともに説明する。\n参考として、TCP/IPプロトコルの階層モデルを示す。</p>\n<p><img src=\"https://blob.yammer.jp/tcp-udp-tcpip-protocol-stack.png\" alt=\"OSI参照モデルとTCP/IP階層モデル\"></p>\n<h3>1. End-to-End の通信を実現すること。</h3>\n<p>トランスポート層は、End-to-End の通信を実現する。</p>\n<p>トランスポート層の下位に位置するインターネット層では、IP を中心に hop-by-hopでパケットをバケツリレーのように渡し続けながら通信する。</p>\n<p>トランスポート層はこれを隠して、ユーザが中継のルータなどを意識せず済むよう、 End-to-End で通信しているようにみせる。</p>\n<h3>2. アプリケーションプログラム間での通信を可能にすること</h3>\n<p>通信ホストは、複数のアプリケーションを用いて同時に異なる通信する。</p>\n<p>トランスポート層ではポート番号という識別子を用いて、アプリケーション (実際にはプロセス) ごとに通信を識別し、各アプリケーションが他のアプリケーションの通信を意識せずに使えるようにする。</p>\n<h3>3. (TCP では) 信頼性のある通信を実現すること</h3>\n<p>TCP を用いると、パケットを再送することをはじめとして様々な制御を行ってくれる。\nこれによって上位のアプリケーション層からは、特に意識せずとも信頼性のある通信を行える。</p>\n<h2>ポート番号</h2>\n<p>端末内で通信するプロセスを指定するために用いられる識別子。\nIP アドレスと合わせて使われる。</p>\n<p>ポート番号を含む次の5つが全て揃うことで通信を識別する。</p>\n<ul>\n<li>宛先 IP アドレス</li>\n<li>送信元 IP アドレス</li>\n<li>宛先ポート番号</li>\n<li>送信元ポート番号</li>\n<li>トランスポートプロトコルの種類 (IP ヘッダのプロトコル番号フィールド)</li>\n</ul>\n<h3>ポート番号の通信例</h3>\n<p>例えば、私の PC で、次の2つのWebページを同時に閲覧することを考える。</p>\n<ul>\n<li>埼玉大学の受験生向け Web ページ (<a href=\"http://www.saitama-u.ac.jp/entrance\">http://www.saitama-u.ac.jp/entrance</a>)</li>\n<li>埼玉大学の在校生向け Web ページ (<a href=\"http://www.saitama-u.ac.jp/student\">http://www.saitama-u.ac.jp/student</a>)</li>\n</ul>\n<p>このとき、私の PC から、埼玉大学の Web サーバへ通信が発生する。つまり同じ送信元から同じ宛先へ別々の通信が発生する。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">ページ</th>\n<th align=\"center\">宛先IPアドレス</th>\n<th align=\"center\">宛先ポート番号</th>\n<th align=\"center\">送信元IPアドレス</th>\n<th align=\"center\">送信元ポート番号</th>\n<th align=\"center\">プロトコル</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">A</td>\n<td align=\"center\">153.127.197.67</td>\n<td align=\"center\">80</td>\n<td align=\"center\">203.0.113.1</td>\n<td align=\"center\">49152</td>\n<td align=\"center\">TCP</td>\n</tr>\n<tr>\n<td align=\"center\">B</td>\n<td align=\"center\">153.127.197.67</td>\n<td align=\"center\">80</td>\n<td align=\"center\">203.0.113.1</td>\n<td align=\"center\">49153</td>\n<td align=\"center\">TCP</td>\n</tr>\n</tbody>\n</table>\n<p>ページを開く要求をしたときに、ブラウザのタブごとに(=プロセスごとに)違うポート番号を使えば、別々の通信を識別できるというわけだ。\n(実際には、送信元に帰ってきたパケットがどのプロセス宛のものであるかを、OS がポート番号で識別し、プロセスに処理が渡る。)</p>\n<h3>ポート番号の割当</h3>\n<h3>(0-1023) Well-known Port Number</h3>\n<p>ポート番号には事前に予約された Well-known Port Number というものがある。</p>\n<p>上位レイヤーのプロトコルのうち一般的なものが使うポート番号を 0-1023 番に定めている。\n例えば HTTP は 80 番, HTTPS は 443 番, SSH は 22 番, 等。</p>\n<p>Well-known Port Number を他の用途に用いることもできるが、混乱を避けるために避けるのが無難。</p>\n<p>参考: <a href=\"https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml\">Well-known Port Number の割当 - IANA</a></p>\n<h3>(1024-49151) その他の登録済みポート番号</h3>\n<p>Well-known Port Number 以外にも登録されたポート番号がある。\nただしこちらは他の用途に使ってもそれほど問題が起きにくい。</p>\n<h3>(49152-65535) 動的割当のポート番号</h3>\n<p>前節では用途が決まったポート番号であった。\nこれらは一般に、サーバ側のポート番号として使われる。<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref aria-describedby=\"footnote-label\">1</a></sup>\n何故なら、クライアント側からどのポートに繋げば良いのか事前に知っている必要があるからだ。\n例えば Web ページを見るときはふつう、Web サーバは 80 番 (HTTP) か 443 番 (HTTPS) で待ち受けていることを前提に通信を開始する。</p>\n<p>一方クライアントは特にポート番号が定まっている必要はない。\n特に値が重要でない場合は、ポート番号の管理を OS に委ねることができる。\nこのような動的な割当は 49152-65535 の範囲で割り当てられるのが一般的だ。</p>\n<h2>TCP と UDP</h2>\n<p>トランスポートプロトコルの代表的な２つのプロトコル、TCP と UDP の違いについて説明する。</p>\n<h3>TCP (Transmission Control Protocol)</h3>\n<p>TCPは次のような特徴を持つ</p>\n<ul>\n<li>伝送、送信、通信を制御する</li>\n<li>コネクション型<sup><a href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref aria-describedby=\"footnote-label\">2</a></sup></li>\n<li>信頼性のある通信をするために様々な制御を含む含む</li>\n</ul>\n<p>TCPを使うと、アプリケーションは様々な制御から開放される。\nただしコネクションの確立/切断にコストがかかる。\nよって、信頼性を要求し大容量のデータを交換する多くの通信に向くが、全ての通信に適しているわけではない。</p>\n<h3>UDP (User Datagram Protocol)</h3>\n<p>UDP は次のような特徴を持つ</p>\n<ul>\n<li>複雑な制御をしない</li>\n<li>コネクションレス型</li>\n<li>いつでもデータを送信可能</li>\n<li>高速に動作する</li>\n</ul>\n<p>同報性が要求されたり、アプリケーションが細かい制御を行う通信はUDPで行うのが好ましい。\n次のような用途に用いられている。</p>\n<ul>\n<li>総パケット数の少ない通信。 (DNS, SNMP)</li>\n<li>動画や音声などのマルチメディア通信 (即時性を求める通信)</li>\n<li>ブロードキャストやマルチキャストの通信。 (1対Nの通信)</li>\n</ul>\n<h2>TCP の様々な機能</h2>\n<p>TCP には信頼性を保証するために次のような機能を持つ。</p>\n<ul>\n<li>コネクションの管理 ... (通信相手がいるかどうかの確認)</li>\n<li>再送制御 ... (パケットが喪失した際に必要)</li>\n<li>重複制御 ... (パケットが2十二届いた際に必要)</li>\n<li>順序制御 ... (パケットの順序が入れ替わった際に必要)</li>\n<li>フロー制御 ... (受信能力に合わせた送信を行う)</li>\n<li>輻輳 (ふくそう) 制御 ... (ネットワークの混雑を避ける)</li>\n</ul>\n<p>これらの実現のために必要な仕組みとして、次のような技術を説明する</p>\n<ul>\n<li>コネクションの確立/切断</li>\n<li>確認応答</li>\n<li>シーケンス番号 (再送制御, 重複制御, 順序制御に用いられる)</li>\n<li>ウィンドウ (ネットワークの効率を高め, フロー制御や輻輳制御にも用いられる概念)</li>\n</ul>\n<h3>コネクションの確立/切断</h3>\n<h3>確認応答</h3>\n<h3>シーケンス番号</h3>\n<h3>ウィンドウ</h3>\n<h2>まとめ</h2>\n<p>トランスポートプロトコルの役割は次の3つであった。</p>\n<ol>\n<li>End-to-End の通信を実現すること。</li>\n<li>アプリケーションプログラム間での通信を可能にすること</li>\n<li>(TCP では) 信頼性のある通信を実現すること</li>\n</ol>\n<p>2を実現するためにポート番号があり、3を実現するために様々な制御があることを紹介した。</p>\n<p>以上。</p>\n<hr>\n<p>追記: (2020/10/04) 前回記事へのリンクを相対リンクへ修正</p>\n<section data-footnotes class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>TCP/IP ではクライアント-サーバモデルの通信が多い。 <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2\">\n<p>コネクションとは、二者間で専用して使用できる仮想的な回線のこと。 <a href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2021-04-29T20:08:27+09:00","message":"注釈表記をMarkdown記法に修正\n","hash":"ec5c34483884aa723d1da20ac0029cf4a2c61468"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-05-30T14:05:53+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/linux-cpu","url":"https://memo.yammer.jp/posts/linux-cpu","title":"デスクトップLinuxでCPUの状況を確認する","summary":"$ cat /proc/cpuinfo # CPUの各スレッドごとの情報を含んだファイルを表示する $ nproc # CPUのスレッド数(プロセッサの数)を表示する $ top # CPU使用率の高い順にプロセスを表示する。定期的に内容は再描画される。 参考: CPU and Linux -  Youtube Satoru Takeuchi","content_html":"<pre><code class=\"hljs language-shell\">$ cat /proc/cpuinfo\n# CPUの各スレッドごとの情報を含んだファイルを表示する\n\n$ nproc\n# CPUのスレッド数(プロセッサの数)を表示する\n\n$ top\n# CPU使用率の高い順にプロセスを表示する。定期的に内容は再描画される。\n</code></pre>\n<p>参考: <a href=\"https://youtu.be/etZrDmrD5Q0\">CPU and Linux -  Youtube Satoru Takeuchi</a></p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-30T11:55:30+09:00","message":"Add a post\n","hash":"69660f2f624b84347d6101b0e88324e028de9b57"}],"date_published":"2020-05-30T11:46:49+09:00","tags":[]},{"id":"https://memo.yammer.jp/posts/willani-start","url":"https://memo.yammer.jp/posts/willani-start","title":"数日前からCコンパイラを書き始めた。","summary":"数日前からCコンパイラを書き始めた。(GitHub) 植山類さんのオンラインブック、低レイヤを知りたい人のためのCコンパイラ作成入門を読みながら、概ね本の内容に沿って進めている。 自分の書いたコンパイラで自身をコンパイルするセルフホストを目指している。 コンパイラというのはある言語で書かれたプログラムを別の言語に変換するプログラムだ。 ここではC言語をアセンブリに変換するものを指している。 いきなりC言語をコンパイルするのは無理なので、徐々に複雑な入力を受け付けるように改良し、最終的にC言語を受け付けるようにする(したい)。 最初は入力をそのまま出力することから始まり、四則演算ができるようにな","content_html":"<p>数日前からCコンパイラを書き始めた。(<a href=\"https://github.com/yammerjp/willani\">GitHub</a>)</p>\n<p>植山類さんのオンラインブック、<a href=\"https://www.sigbus.info/compilerbook\">低レイヤを知りたい人のためのCコンパイラ作成入門</a>を読みながら、概ね本の内容に沿って進めている。\n自分の書いたコンパイラで自身をコンパイルするセルフホストを目指している。</p>\n<p>コンパイラというのはある言語で書かれたプログラムを別の言語に変換するプログラムだ。\nここではC言語をアセンブリに変換するものを指している。<br>\nいきなりC言語をコンパイルするのは無理なので、徐々に複雑な入力を受け付けるように改良し、最終的にC言語を受け付けるようにする(したい)。\n最初は入力をそのまま出力することから始まり、四則演算ができるようになり、いまは関数呼び出しができるようになった。</p>\n<p>本はとても丁寧に書かれていて、参考として実装も2種類ほど存在する。\nさらにSlackやYoutube Liveで質問ができるというとても恵まれた環境が揃っている。</p>\n<p>実は昨年コンパイラの授業をとっていてコンパイラを少し触っていた。\ncmmというCを一部切り取ったような言語と、PL0iという仮想マシン(とそのアセンブリ)に対して言語拡張をする、というようなことだった。\nそのときはあまり真面目に実装に凝っていなくて、課題はパスして成績がそこそこもらえるくらいはやったが、実のところコンパイラってよくわからないなという気持ちのまま終わっていた。</p>\n<p>このままではよくないという気持ちと、あとは単純な興味(プログラムをデータとして扱うことを体験できる)もあって始めてみた。</p>\n<br/>\n<p>はじめてまだ3日ほどだが、パーサについてがちょっと意外だった。\n手書きでパーサを書くというのは事前に聞いていたが、LL(1)でいけるらしい。</p>\n<p>LL(1)とは構文解析法のこと、つまり、文法がどんな構造になっているかを調べる手法の一つだ。\n構文解析は事前にBNF記法などで規則が与えられており、その規則のどれが適用できるかを探す。\n授業でLR(0), LR(1), LALR(1)などを扱ったが、LL(1)はそれらよりも単純で手書きでパーサを書くのに向いているらしい。</p>\n<p>どうも最近のコンパイラ(gccやclang)はLL1らしい。\n大学の授業では、「LALR1じゃないとまともにパースできない(世の中的には主流)(最近は違う場合もある)」といっていた気がして、それにしたがってLALR1の文法解析などをやった記憶があるのだが。(違ったらごめんなさい先生。)</p>\n<p>なんだったんだあの勉強はという気持ちに少しなったが、教科書的にはああいうものなのだろう。\n授業ではLL1をばっさり飛ばしたのでそんなに深追いしてなかったが、やってみればなるほどという感じ。</p>\n<p>LALR1パーサジェネレータを書くなら当時の記憶を掘り返して結構頑張らないときつそうだけど、LL1で書くのは意外といけるものだ。</p>\n<br/>\n<p>そんなわけでトークナイザ(レキシカルアナライザと同義?)とパーサは結構スイスイ進む。\nやることが見えているしデバッグ用にログを出せば何が起きているか目に見えてわかる。</p>\n<p>そこまではいいのだけど、肝心のコード生成がちょっと大変。</p>\n<p>アセンブリへの理解が浅い私である。\nアセンブリを読むのは少しつらいなぁ、この量でこんなこと言ってたらこの先どうなることやらと思いながらデバッグしている。\n今後アセンブリがすらすら読めるようになることを夢見て続けていきたい。</p>\n<br/>\n<p>C言語でそれなりのものを書くというのも実はいままであまりやってこなかったので、今回は絶好の機会だ。\nいつまで飽きずにやれるかな。</p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-25T01:17:32+09:00","message":"Add a post of willani\n","hash":"f679d95e0a14c5bb1160f7b87d809798b8b9fc07"}],"date_published":"2020-05-25T01:02:52+09:00","tags":["コンパイラ","willani","日記","C"]},{"id":"https://memo.yammer.jp/posts/npm-publish","url":"https://memo.yammer.jp/posts/npm-publish","title":"npm publishの手順","summary":"npm (Node Package Manager) とは、Node.js におけるパッケージ管理ツールである。 npm が GitHub に買収されたり、deno が正式リリースされたりしているこのご時世であるが、初めて npm にパッケージを公開したので手順と注意点を振り返る。 ちなみ公開したのは、はてなブログ記事管理ツールの gimonfu。 全体の流れ $ npm publishする作業をよしなにしてくれる CLI ツール np などもあるようだ。 今回は必要な作業を知る意味を込めて手動で行った。 私がやったのは以下の通り。細かくはこれから述べる。 npm に登録する 内容を確認する ","content_html":"<p>npm (Node Package Manager) とは、Node.js におけるパッケージ管理ツールである。</p>\n<p>npm が GitHub に買収されたり、deno が正式リリースされたりしているこのご時世であるが、初めて npm にパッケージを公開したので手順と注意点を振り返る。</p>\n<p>ちなみ公開したのは、はてなブログ記事管理ツールの <a href=\"https://www.npmjs.com/package/gimonfu\">gimonfu</a>。</p>\n<h2>全体の流れ</h2>\n<p><code>$ npm publish</code>する作業をよしなにしてくれる CLI ツール <a href=\"https://www.npmjs.com/package/np\">np</a> などもあるようだ。\n今回は必要な作業を知る意味を込めて手動で行った。</p>\n<p>私がやったのは以下の通り。細かくはこれから述べる。</p>\n<ol>\n<li>npm に登録する</li>\n<li>内容を確認する</li>\n<li>package.json の version を上げる</li>\n<li><code>$ npm publish</code></li>\n<li>GitHub の Web ページ上で Release を書く</li>\n</ol>\n<h2>npmに登録する</h2>\n<ol>\n<li>npm に登録する (<a href=\"https://www.npmjs.com/signup\">https://www.npmjs.com/signup</a>)</li>\n<li>npm にログインする(<code>$ npm login</code>)</li>\n<li>npm にログインしたことを確認する(<code>$ npm whoami</code>)</li>\n</ol>\n<h2>package.json を振り返る</h2>\n<p>package.json の内容に不備がないか、各項目を確認していく。</p>\n<p>一通り確認し終えたら <a href=\"https://www.npmjs.com/package/fixpack\">fixpack</a> を使って、抜けがないかチェックする。</p>\n<p>version については <a href=\"https://docs.npmjs.com/about-semantic-versioning\">semantic versioning</a> に従う。\n要するに <code>0.0.1</code> や <code>1.0.2</code> といった形式だ。\n<code>$ npm version</code>でも上げることができるらしい。</p>\n<p>( files キーについては次に述べる。)</p>\n<h2>配布するファイルを確認する</h2>\n<p>配布するファイルは次の項目で決まる。</p>\n<h3>package.json 内の files キー</h3>\n<p>文字列の配列を渡すと、ファイルやディレクトリを配布ファイルに含める。\nホワイトリスト形式。</p>\n<p>今回は次のように指定した。\nTypeScriptでCLIツールを作るなら同じように指定できるのではないだろうか。</p>\n<p>なお <a href=\"https://docs.npmjs.com/files/package.json#files\">package.json などは自動で含めてくれる</a>ようなので指定しなくてよい。</p>\n<pre><code class=\"hljs language-json\">{\n  \"files\": [\n    \"dist\",\n    \"bin\"\n  ],\n}\n</code></pre>\n<h3>.npmignore</h3>\n<p>.gitignore と同じフォーマットで、ファイルやディレクトリを配布ファイルから除外する。\nブラックリスト形式。</p>\n<p><a href=\"http://npm.github.io/publishing-pkgs-docs/publishing/the-npmignore-file.html\">npmのドキュメント</a>を読むと、.npmignore だけではなく .gitignore も読み込んで除外してくれそうな感じだ。</p>\n<p>今回は package.json#files で指定したので使わなかった。</p>\n<br/>\n<p>配布するファイルは、特にTypeScriptのとき注意する必要がある。dist ディレクトリだ。</p>\n<p>npm での配布コンパイル結果を含む必要がある。\nしかし git ではコンパイル結果をリポジトリに含めないのが普通だ。\n何も設定しないと .gitignore を解釈して dist ディレクトリは配布対象外となってしまう。</p>\n<p>これを避けるためには、package.json#files で指定してあげる必要がある。</p>\n<br/>\n<p>ところで、<code>$npm link</code>を使うと手元のPCでグローバルインストールしたのと同様にpathを通してくれるらしい。</p>\n<p>ただ、シンボリックリンクを貼るだけなので配布するファイルの確認には使えないことに注意。\n配布対象外のファイルもローカルに存在するので動いてしまう。</p>\n<h2>ビルドとテストが通る</h2>\n<p>動かないファイルを公開するわけにはいかない。</p>\n<p>間違えて公開してしまっても<a href=\"https://docs.npmjs.com/cli/unpublish\">72時間以内なら<code>$npm unpublish</code>で取り消せる</a>。</p>\n<p>それ以降はnpmのサポートにメールする必要がある。\nパッケージが簡単に消せてしまうと依存関係に問題が生じるので、削除には慎重なようだ。</p>\n<h2>README.mdを読み直す</h2>\n<p>README.md は npm のページにも表示されるので、改めて間違いがないかを確認する。</p>\n<p>自分は Installation のところを間違えたまま公開してしまった。(現在は修正済み)</p>\n<pre><code class=\"hljs language-shell\"># 間違い\n$ npm install --global yammerjp/gimonfu\n\n# 正しい\n# npm install --global gimonfu\n</code></pre>\n<p>実は npm にパッケージを公開せずとも、install 時に [githubユーザ名]/[githubレポジトリ名] とすると、パッケージをインストールできる。\nもともと README.md にこの方法が記述していた。</p>\n<p>しかし今回はこの記述は間違い。\nGithub リポジトリには TypeScript のコンパイル結果が含まれていないので、インストールできても動かない。</p>\n<p>ちなみに英語の README.md は、DeepL と grammaly の力を借りて適当な GitHub リポジトリの README.md を参考にすることで作っている。\n先人と文明は偉大。</p>\n<h2><code>$ npm publish</code></h2>\n<p>問題ないことが確認できたらいよいよ公開する。</p>\n<pre><code class=\"hljs language-shell\">$ npm publish\n</code></pre>\n<p>たった一行打つだけ。</p>\n<p>公開したら、GitHub 上でも Release をつくる。</p>\n<h2>おわりに</h2>\n<p>はじめての<code>$ npm publish</code>はなんだか気分が良い。</p>\n<p>npm のパッケージのページでは Download 数が見れるのだが、公開された瞬間に40くらいになっていた。\n謎。\nミラーだったりで自動取得されてるのかな。</p>\n<p>そもそも Download 数ってそんなに正確である必要はないので、40など誤差の範囲内だが。</p>\n<hr>\n<p>追記: (2020/10/04) 不要な改行タグを削除</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T22:43:27+09:00","message":"Fix internal links\n","hash":"698524967ae01574a8037c627a8b083e253a04f2"},{"date":"2020-10-04T20:49:44+09:00","message":"Delete <br/>\n","hash":"fc1f49fea5c87dd342d2e9476f375ebcb013744e"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-21T16:45:32+09:00","message":"Fix format\n","hash":"c98a8021a6c4a742909019a4bdd11c9c218ac368"},{"date":"2020-05-21T16:05:40+09:00","message":"Add a post npm-publish.md\n","hash":"59fe26840e3c05e09dc2d8e6998116059dbb2ee4"}],"date_published":"2020-05-21T15:40:14+09:00","tags":["JavaScript","npm"]},{"id":"https://memo.yammer.jp/posts/computer-essay","url":"https://memo.yammer.jp/posts/computer-essay","title":"コンピュータの有名なエッセイ","summary":"コンピュータの専門家を志すものとして、近いうちに読んでおきたい(読み直したい)エッセイ。 インターネット上に公開されているものも多く、日本語訳のリンクをつけている。 著者、訳者に感謝。 自分の今後の人生など知る由もないが、仕事になろうとそうでなかろうと、コンピューテーションが楽しいものだということを忘れずに、いや今よりもそう思えるような人間でありたい。 ハッカーと画家(Hackers & Painters) ポール・グレアム著。 エッセイ集。 いくつかの章は読んだ。強い表現のところもあったりしてクセのある、他方魅力的な文章。 どうしてオタクはモテないか ハッカーと画家 口にできないこと もうひ","content_html":"<p>コンピュータの専門家を志すものとして、近いうちに読んでおきたい(読み直したい)エッセイ。\nインターネット上に公開されているものも多く、日本語訳のリンクをつけている。</p>\n<p>著者、訳者に感謝。</p>\n<p>自分の今後の人生など知る由もないが、仕事になろうとそうでなかろうと、コンピューテーションが楽しいものだということを忘れずに、いや今よりもそう思えるような人間でありたい。</p>\n<h2>ハッカーと画家(Hackers &#x26; Painters)</h2>\n<p>ポール・グレアム著。</p>\n<p>エッセイ集。</p>\n<p>いくつかの章は読んだ。強い表現のところもあったりしてクセのある、他方魅力的な文章。</p>\n<ol>\n<li><a href=\"http://www.blog.net/nerds-jp.htm\">どうしてオタクはモテないか</a></li>\n<li><a href=\"http://practical-scheme.net/trans/hp-j.html\">ハッカーと画家</a></li>\n<li><a href=\"http://practical-scheme.net/trans/say-j.html\">口にできないこと</a></li>\n<li><a href=\"http://practical-scheme.net/trans/road-j.html\">もうひとつの未来への道</a></li>\n<li><a href=\"http://practical-scheme.net/trans/spam-j.html\">スパムへの対策</a></li>\n<li><a href=\"http://practical-scheme.net/trans/taste-j.html\">ものつくりのセンス</a></li>\n<li><a href=\"http://practical-scheme.net/trans/hundred-j.html\">百年の言語</a></li>\n<li><a href=\"http://practical-scheme.net/trans/beating-the-averages-j.html\">普通のやつらの上を行け</a></li>\n<li><a href=\"http://practical-scheme.net/trans/icad-j.html\">オタク野郎の復讐</a></li>\n<li><a href=\"http://practical-scheme.net/trans/being-popular-j.html\">夢の言語</a></li>\n<li><a href=\"http://practical-scheme.net/trans/desres-j.html\">デザインとリサーチ</a></li>\n<li><a href=\"http://practical-scheme.net/trans/gh-j.html\">素晴らしきハッカー</a></li>\n</ol>\n<ul>\n<li><a href=\"http://practical-scheme.net/wiliki/wiliki.cgi?naoya_t%3A%E3%83%9D%E3%83%BC%E3%83%AB%E3%83%BB%E3%82%B0%E3%83%AC%E3%82%A2%E3%83%A0%E3%81%AE%E3%82%A8%E3%83%83%E3%82%BB%E3%82%A4%E3%81%A8%E5%92%8C%E8%A8%B3%E4%B8%80%E8%A6%A7\">他を含む エッセイと和訳の一覧</a></li>\n</ul>\n<h2><a href=\"https://cruel.org/freeware/cathedral.html\">伽藍とバザール(The Cathedral and the Bazaar)</a></h2>\n<p>エリック・レイモンド著。</p>\n<p>先日、TCP/IPに関する説明を大学の先生から受けたときに聞いた本。\nオープンソースソフトウェアの発展に関する考察がされているようだ。</p>\n<p>まだ読んでいない。</p>\n<h2><a href=\"https://cruel.org/freeware/hacker.html#basic_skills\">ハッカーになろう(How To Become A Hacker)</a></h2>\n<p>こちらもエリック・レイモンド著。</p>\n<p>ハッカーとしての志、考え方が書かれている。</p>\n<p>一度読んだ。\n私は全然ハッカーに近づけてはいないなと実感しながら。</p>\n<h2><a href=\"https://ja.wikisource.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8\">プログラマが知るべき97のこと</a></h2>\n<p>多数のプログラマが語るエッセイ集のようだ。</p>\n<p>まだ一部しか読めていない。</p>\n<h2><a href=\"https://tatsu-zine.com/books/passionate-programmer-ja\">情熱プログラマー</a></h2>\n<p>Chad Fowler著のプログラマがキャリアを築くための方法を述べた書籍のようだ。</p>\n<p>まだ読んでいない(買っていない)。</p>\n<p><a href=\"https://yuru28.com\">ゆるふわポッドキャスト</a>の<a href=\"https://twitter.com/mktakuya\">@mktakuya</a>さんがTwitterでつぶやいて知った。</p>\n<hr/>\n<br/>\n<p>エッセイではないが、<a href=\"https://www.amazon.co.jp/UNIX%E3%81%A8%E3%81%84%E3%81%86%E8%80%83%E3%81%88%E6%96%B9%E2%80%95%E3%81%9D%E3%81%AE%E8%A8%AD%E8%A8%88%E6%80%9D%E6%83%B3%E3%81%A8%E5%93%B2%E5%AD%A6-Mike-Gancarz/dp/4274064069\">Unixという考え方 - その設計思想と哲学</a>も改めて読み直したい。</p>","_history":[{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-20T16:01:43+09:00","message":"Add a post of computer-essay.md\n","hash":"b89c8ac0cfc14f29d6fc346ffb0f74a1d4c64fa7"}],"date_published":"2020-05-20T14:23:23+09:00","tags":["本"]},{"id":"https://memo.yammer.jp/posts/2019-github-repositories","url":"https://memo.yammer.jp/posts/2019-github-repositories","title":"リポジトリで振り返る2019年","summary":"2020年も中頃だが、2019年末〜2020年正月に書きかけた記事が出てきた。 捨てるのも何なのでここに放出。 以下。年末に1年を振り返るという記事の趣旨から各リポジトリにリンクをつけた以外は原文のまま。 リンク以外の追記部分はその旨を記述している。 なにをするか あけましておめでとうございます。 年越ししてしまいましたが、まだ正月なので昨年を振り返って今年に向けて身を引き締めたい。 今回はGitHubのリポジトリを総ざらいして自分がどんな開発をしたか振り返る。 準備:GitHubのリポジトリ一覧を取得する githubのAPIを用いて、curlでリポジトリ情報を取得する。 $ curl -u","content_html":"<p>2020年も中頃だが、2019年末〜2020年正月に書きかけた記事が出てきた。\n捨てるのも何なのでここに放出。</p>\n<p>以下。年末に1年を振り返るという記事の趣旨から各リポジトリにリンクをつけた以外は原文のまま。\nリンク以外の追記部分はその旨を記述している。</p>\n<hr/>\n<h2>なにをするか</h2>\n<p>あけましておめでとうございます。\n年越ししてしまいましたが、まだ正月なので昨年を振り返って今年に向けて身を引き締めたい。</p>\n<p>今回はGitHubのリポジトリを総ざらいして自分がどんな開発をしたか振り返る。</p>\n<h2>準備:GitHubのリポジトリ一覧を取得する</h2>\n<p>githubのAPIを用いて、curlでリポジトリ情報を取得する。</p>\n<pre><code class=\"hljs language-shell\">$ curl -u yammerjp \"https://api.github.com/users/yammerjp/repos?per_page=100&#x26;page=1\" | grep '\"name\": \"' | awk -F '\"' '{print $4}' > repos.txt\n</code></pre>\n<p>参考: <a href=\"https://qiita.com/emergent/items/a557246a0c0bf9d50a11\">GitHubのリポジトリを一覧化する（public/private両対応）- Qiita</a></p>\n<h2>リポジトリ一覧 (2019/12/31現在)</h2>\n<p>私(<a href=\"https://github.com/yammerjp\">yammerjp</a>)のgithub上にあるpublicリポジトリは31個。\nまともにGitHubを使い始めてから1年ほどというのもあり、すべて2019年に1コミット以上しているので、これらを振り返る。</p>\n<h3>純粋な個人趣味開発</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/c-sharp-socket\">c-sharp-socket</a></li>\n</ul>\n<p>友人からの質問をきっかけにC#でソケット通信をしてみた、サンプルコード的なリポジトリ。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/text2pdf\">text2pdf</a></li>\n</ul>\n<p>textデータをPDFファイルに出力できるアプリケーション。\n2019年1月に、3日間で勢いで作った。実用で使うというより、プロモーションが中心だったので、表示自体は非常に簡素。\nただし、node.js上で外部のライブラリやアプリケーションを用いず、PDFのファイル形式に従ってファイルへの文字列出力部分を自分で実装している。3日間にしては頑張ったな、という感じ。</p>\n<p>日本語出力した際のフォントまわりが貧弱で、文字列が描画される位置が微妙である。\n開発後半に、日本語出力をとってつけで開発したので、このあたりをしっかりすれば、もうすこし見た目が良くなるのではないかな。\nPDFを開く環境による見た目の差異を検証したりすることが必要である。</p>\n<p>もし文字データを手っ取り早くPDFにしたいのであれば、<a href=\"https://dev.classmethod.jp/tool/md-to-pdf/\">md-to-pdf</a>がおすすめ。<a href=\"https://dev.classmethod.jp/tool/md-to-pdf\">GitHub風CSSを当てる</a>と結構いい感じになる。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/playqueue\">PlayQueue</a></li>\n</ul>\n<p>Youtubeを連続再生するWebアプリケーション。\n2018年末から断続的に開発している。\n個人開発のアプリケーションとしては自分の代表作で、就活でも自分を紹介する際に話す機会が多い。</p>\n<h3>大学の授業に関係した開発</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/turingmachineonweb\">TuringMachineOnWeb</a></li>\n</ul>\n<p>2019年1月制作。\nチューリング機械の状態遷移表を作成するエディタと、作成した状態遷移表を検証するシュミレータを作った。</p>\n<p>レポートに書く状態遷移表をつくったときに、つくった状態遷移表が正しいのかを検証するために作った。</p>\n<p>UIは簡素だけれど、当時やりたかったことは達成させられたので満足。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/clustering.ai.2019.su\">clustering.AI.2019.SU</a></li>\n</ul>\n<p>ウォード法による階層的クラスタリングを扱ったレポートを書くために使ったスクリプト。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/pl0i\">pl0i</a></li>\n<li><a href=\"https://github.com/yammerjp/pl0i.js\">pl0i.js</a></li>\n</ul>\n<p>pl0 interpreterという仮想マシンと、TypeScriptによる再実装(未完)</p>\n<p>簡易なアセンブリと、より高級な言語との対応を学ぶために、アセンブリを実行する仮想マシンをつくることで理解を深める試みであった。</p>\n<p>TypeScriptで書いていたときは、最終的にブラウザでメモリの状態や実行している命令の位置なども表示しながらプログラムを実行できるようなWebアプリケーションをつくるつもりだったが、大学の課題と就活を優先した結果開発が進まぬまま課題の方を先に終わらせて提出した。以後開発が停止し未完。</p>\n<h3>夏インターン</h3>\n<h4>夏インターン準備</h4>\n<p>夏インターンでNuxt.jsとTypeScriptを扱うと聞いたので、その準備としてそれらの勉強のために書籍やWebサイトを参考にサンプルアプリを作って動かしてみたリポジトリ群</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/ts-nuxt-tutorial\">ts-nuxt-tutorial</a></li>\n<li><a href=\"https://github.com/yammerjp/green-turtle-org\">green-turtle-org</a></li>\n<li><a href=\"https://github.com/yammerjp/typescript-tutorial1\">Typescript-tutorial1</a></li>\n<li><a href=\"https://github.com/yammerjp/typescript-tutorial2\">Typescript-tutorial2</a></li>\n<li><a href=\"https://github.com/yammerjp/chapter02-qiita-post.nuxt-tutorial\">chapter02-qiita-post.nuxt-tutorial</a></li>\n<li><a href=\"https://github.com/yammerjp/chapter03-01-layout.nuxt-tutorial\">chapter03-01-layout.nuxt-tutorial</a></li>\n<li><a href=\"https://github.com/yammerjp/chapter03-02-middleware.nuxt-tutorial\">chapter03-02-middleware.nuxt-tutorial</a></li>\n</ul>\n<h4>夏インターン</h4>\n<p>夏インターンのハッカソンで制作したWebアプリケーション。PHP製。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/oshushume.20190807\">oshushume.20190807</a></li>\n</ul>\n<h4>夏インターン後</h4>\n<p>夏インターンで扱ったNuxt.jsを生かして何かをしようと作っていたアプリケーションとその残骸。</p>\n<ul>\n<li><a href=\"https://github.com/yammerjp/green-turtle\">green-turtle (ブログのソースコード)</a></li>\n<li><a href=\"https://github.com/yammerjp/nuxt.ts-blog\">nuxt.ts-blog</a></li>\n<li><a href=\"https://github.com/yammerjp/nuxt.ts-blog.org\">nuxt.ts-blog.org</a></li>\n<li><a href=\"https://github.com/yammerjp/nuxt.ts-template\">nuxt.ts-template</a></li>\n<li><a href=\"https://github.com/yammerjp/nuxt.ts-template.org\">nuxt.ts-template.org</a></li>\n</ul>\n<p>最終的にこのブログとして形にして動いている。\n(2020/05/19補足: <a href=\"https://memo.yammer.jp\">memo.yammer.jp</a>ではなく<a href=\"https://blog.yammer.fun\">Green Turtle</a>)</p>\n<p>このブログ(<a href=\"https://blog.yammer.fun\">Green Turtle</a>)のしくみは以下のようになっている。</p>\n<p>mdファイルをgitリポジトリ(アプリケーションソースコードとは別のprivateリポジトリ)で管理している。\nmasterにmergeすることで記事公開。</p>\n<p>アプリケーションリポジトリも、記事リポジトリも、masterにmergeしたときにCircle CIが走ってデプロイするようになっている。</p>\n<p>デプロイは次のような工程で行われる</p>\n<ol>\n<li>2つのリポジトリからソース、記事をclone</li>\n<li>ソースコードのサンプル記事を破棄し、cloneした公開記事に置き換え</li>\n<li>記事markdownをスクリプトでJSONに変換</li>\n<li>Nuxt.jsをGenerateモードで動作させる</li>\n<li>Nuxt.jsが記事ページを描画する際に、記事データが含まれるjsonファイルを読み込み、描画する。</li>\n<li>Nuxt.jsにより静的なHTML,CSSファイルが生成される</li>\n<li>Google Firebase Hostingに静的なHTML,CSSファイルをアップロード</li>\n</ol>\n<p>今後の展望</p>\n<ul>\n<li>トップページとaboutページが簡素なので、もう少しリッチなUIにしたい</li>\n<li>過去記事へのリンクの経路が限られているので、記事下に「最近投稿した記事」などのリンクを置きたい。</li>\n<li>(勉強も兼ねて)バックエンドも用意して、静的ファイルでの公開ではなく、SSRないしSPAで動作させたい。(表示速度は退化するので、完全に勉強目的)</li>\n</ul>\n<p>現在はブログというには簡素な状態だが、今後の拡張性はたくさん用意しているつもりである。\nデプロイの手順も少々手間が混んでいるが、将来APIサーバを用意した際でも描画部分を使い回せるようにするためだったりする。\nやりたいことはたくさんある。</p>\n<h3>Swift ( チーム開発でのiphoneアプリ製作 )</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/ios-animals.enpit.2019.SU\">ios-animals.enpit.2019.SU</a></li>\n<li><a href=\"https://github.com/yammerjp/ios-mymap.enpit.2019.SU\">ios-mymap.enpit.2019.SU</a></li>\n<li><a href=\"https://github.com/yammerjp/ios-photo-viewer.enpit.2019.SU\">ios-photo-viewer.enpit.2019.SU</a></li>\n<li><a href=\"https://github.com/yammerjp/ios-sample-calcurator.enpit.2019.SU\">ios-sample-calcurator.enpit.2019.SU</a></li>\n<li><a href=\"https://github.com/yammerjp/ios-timer.enpit.2019.SU\">ios-timer.enpit.2019.SU</a></li>\n<li><a href=\"https://github.com/yammerjp/PinsOfMap\">PinsOfMap</a></li>\n<li><strike><a href=\"https://github.com/yammerjp/lovelab.heroku\">lovelab.heroku</a></strike>(2020/05/19追記: 現在の名前は<a href=\"https://github.com/yammerjp/lovelab-api\">lovelab-api</a>)</li>\n<li><a href=\"https://github.com/yammerjp/lovelab.vue\">lovelab.vue</a></li>\n</ul>\n<p>9月から、学生どうしでチームを組むiPhoneアプリケーションの開発に関わっている。</p>\n<p>上の5つはサンプルアプリケーションの実装。6つめはそれを生かした簡単な応用の位置情報保存アプリ。</p>\n<p>7つめは10月より開発中のメインのアプリケーションのAPIサーバ。</p>\n<p>8つめは10月より開発中のメインのアプリケーションのプロトタイプ。フロントエンドのWebアプリケーション</p>\n<p>(2020/05/19追記: メインのiphoneアプリケーションのリポジトリはプライベートなのでここにリンクを貼っていない。)</p>\n<h3>rails (冬インターン)</h3>\n<ul>\n<li><a href=\"https://github.com/yammerjp/bbs.rb\">bbs.rb</a></li>\n<li><a href=\"https://github.com/yammerjp/rails-tutorial\">rails-tutorial</a></li>\n<li><a href=\"https://github.com/yammerjp/rails-tutorial-toy_app\">rails-tutorial-toy_app</a></li>\n</ul>\n<p>冬インターンで</p>\n<hr/>\n<p>以上。 ここで止まっていた。\nここからは2020年5月に書いている。</p>\n<p>ちなみに冬インターンでRailsを使うものに参加したのでRailsを軽く触っていたのが最後の書きかけの項目。</p>\n<p>今年度末は同じ内容の記事を書ききって公開したい。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-31T18:34:47+09:00","message":"Add a post '2020-github-repositories'\n","hash":"04f4516f39f3f381ad27b0fc2c5bb924f4e0ef64"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-20T14:22:49+09:00","message":"Fix link position\n","hash":"b3a177dcc9d72e1af2661b27b895b52e2c240ca9"},{"date":"2020-05-19T21:50:48+09:00","message":"Add a post of 2019-github-repositories\n","hash":"6f4ae8435298f362b5cabd5e2f0380d8fc1798ff"}],"date_published":"2020-05-19T21:44:57+09:00","tags":["日記"]},{"id":"https://memo.yammer.jp/posts/promise","url":"https://memo.yammer.jp/posts/promise","title":"非同期のまえに同期処理を通してPromiseとasync/awaitを理解する","summary":"JavaScript といえば非同期処理はつきものだが、非同期や Promise に苦手意識を持つ人も多いのではないだろうか。 これらの最初の理解のハードルは結構高いと思う。私も理解できずに悶絶した。C言語のポインタよりむずくないか？。。。 この記事の前半では一旦非同期のことは忘れる。 まず記事前半は、同期処理をテーマに、コールバック, Promise, async/await について説明する。 記事の後半は、これらを非同期処理を交えて説明する。 Promise はよくわからないという方や、一度挫折した方などにぜひ読んでもらいたい。 (2020/05/30補足: Qiita投稿に合わせて全体","content_html":"<p>JavaScript といえば非同期処理はつきものだが、非同期や Promise に苦手意識を持つ人も多いのではないだろうか。</p>\n<p>これらの最初の理解のハードルは結構高いと思う。私も理解できずに悶絶した。C言語のポインタよりむずくないか？。。。</p>\n<p>この記事の前半では一旦非同期のことは忘れる。\nまず記事前半は、同期処理をテーマに、コールバック, Promise, async/await について説明する。\n記事の後半は、これらを非同期処理を交えて説明する。</p>\n<p>Promise はよくわからないという方や、一度挫折した方などにぜひ読んでもらいたい。</p>\n<p>(2020/05/30補足: <a href=\"https://qiita.com/yammerjp/items/b1c96de727a53c4b4698\">Qiita投稿</a>に合わせて全体を修正済み。(<a href=\"https://github.com/yammerjp/memo.yammer.jp/blob/979b5576e05cb97e453b5cd3731e3802a0dc6fca/content/posts/promise.md\">旧版</a>))</p>\n<h2>対象読者</h2>\n<ul>\n<li>JavaScript の基本的文法を知っている。(調べればわかる)</li>\n<li>非同期処理, コールバック, Promise, async/awaitに苦手意識がある、よくわからない。</li>\n</ul>\n<p>JavaScriptを1行も読んだことも書いたこともない人、プログラミングをしたことのない人は対象としない。\n逆に少しでも読み書きできればオーケー、のつもり。</p>\n<h2>目指すところ</h2>\n<ul>\n<li>同期処理と非同期処理の違いがわかる</li>\n<li>(非同期処理を対象とした)他のPromise,async/awaitの解説記事を読んで理解が進む</li>\n</ul>\n<h2>Step0 準備</h2>\n<h3>Step0-1 MDN</h3>\n<p>非同期処理もコールバックもPromiseもasync/awaitも関係ないが、まずMDNについて説明しておきたい。</p>\n<p>JavaScriptでわからないことがあれば、まずは都度<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript\">MDN web docs</a>をみるとよい。</p>\n<p>適当に検索して出てくる記事よりも、とりあえずここで確認しよう\n(本記事も適当に検索して出てくる記事に該当するという矛盾がはらむ)。\n一度理解して忘れていた記法などを確認するのにもとてもよい。</p>\n<h3>Step0-2 Chrome Developper Tool</h3>\n<p>以下JavaScirptの説明をするので、実際に動かしたくなる人もいるだろう。</p>\n<p>PCにnode.jsが既にインストールされている人はそちらを使うのもよい。</p>\n<p>しかし、インストールされていない人は、いちいちHTMLファイルを書いて、JavaScriptを読み込んで、、、とするのは面倒だろう。</p>\n<p>もっと気軽にJavaScriptを試せる方法がある。\nChrome developper Toolである。</p>\n<p>ブラウザにGoogle Chromeを使っている人はウィンドウ右上の︙ > その他のツール > デベロッパーツール を開いてみよう。\n画面上方の「Console」タブを開いて、文字を入力すると、JavaScriptがエンターキーを押すごとに実行されるはずだ。</p>\n<h3>Step0-3 アロー関数</h3>\n<p>ES6 (ES2015)以降の最近のJavaScriptでは、アロー関数という記法がある。\nアロー関数がわからない人も、この記事出てくるので簡単に抑えておきたい。</p>\n<pre><code class=\"hljs language-javascript\">// 従来の書き方\nfunction sum ( a, b ) {\n  return a + b;\n}\n\n// アロー関数\nconst sum2 = ( a, b ) => {\n  return a + b;\n};\n\n// アロー関数 関数の中がreturn文だけのときは、{return}を省略できる\nconst sum3 = ( a, b ) => a + b;\n\n// アロー関数 引数が1つのときだけ()が省略できる (0つ、2つ以上はダメ)\nconst twice = a => a*2;\n</code></pre>\n<p>thisがbindされるかだとか他の違いは一旦忘れる。\n上のように書けるということだけわかればよい。</p>\n<p>さて、前置きが長くなったが準備が整った。</p>\n<h2>Step1 同期処理</h2>\n<p>まずは非同期のことはわすれて、とりあえず読み進めて欲しい。</p>\n<h3>Step1-1 コールバック (同期関数)</h3>\n<p>コールバックとは、関数自体を引数として与え、別の関数に実行してもらうしくみだ。\n電話を折り返すことに由来して名付けられた。\n由来の通り、関数自体を伝えて「あとで都合が良くなったら実行しておいて」と実行を押し付ける方式。</p>\n<pre><code class=\"hljs language-javascript\">function callbackFunc() {\n  console.log('callback');\n}\n\nfunction callFunc ( func ) {\n  func();\n}\n\ncallFunc( callbackFunc );\n</code></pre>\n<p>ふつう、関数callbackFuncを実行するなら<code>callbackFunc()</code>のようにするだろう。\nしかし上記では括弧をつけず<code>callbackFunc</code> を引数として渡している。</p>\n<p>括弧をつけないことで、引数として関数自体を渡すだけでその場では実行されない。\n後に callFunc 関数の中で、渡された関数 (<code>callbackFunc</code>)を実行してもらっている。</p>\n<p>この「関数自体を渡す」というのがコールバックの肝である。\nコールバックとは(戻り値の)値渡しではなく、関数自体の参照を渡しているという表現もできる。</p>\n<p>次のような書き方では全く意味が変わってしまうので注意。</p>\n<pre><code class=\"hljs language-javascript\">callFunc( callbackFunc() );\n</code></pre>\n<p>これでは、callbackFunc 関数を実行し、その戻り値を callFunc 関数に引数として渡すという意味になってしまう。</p>\n<p>繰り返しになるが、コールバックは「関数自体を渡して」「あとで実行してもらう」しくみである。</p>\n<p>参考: <a href=\"https://developer.mozilla.org/ja/docs/Glossary/Callback_function\">Callback function(コールバック関数) MDN web docs</a></p>\n<h4>(補足) コールバックとアロー関数</h4>\n<p>ちなみに上述のコードはアロー関数を使って次のようにも書ける。</p>\n<pre><code class=\"hljs language-javascript\">const callbackFunc = () => {\n  console.log('callback');\n};\n\nfunction callFunc( func ) {\n  func();\n}\n\ncallFunc( callbackFunc );\n</code></pre>\n<p>さらに、一度変数に入れるのをやめると</p>\n<pre><code class=\"hljs language-javascript\">function callFunc( func ) {\n  func();\n}\n\ncallFunc( () => {\n  console.log('callback');\n})\n</code></pre>\n<p>引数を指定する中で関数を定義してしまうのだ。\nこのように関数自体を引数で渡すとき(即ちコールバック関数を渡すとき)、アロー関数でシンプルにかける。</p>\n<h3>Step1-2 Promise (同期関数)</h3>\n<p>Promise は英語で「約束する」という意味だ。\n名前の通り、あとで値を返すことを約束するような動作をする。(約束を破ることもある。)</p>\n<h4>Promise の状態</h4>\n<p>Promise には3つの状態がある。</p>\n<ul>\n<li>pending ... 約束している状態(初期状態)</li>\n<li>fulfilled ... 約束を守って値を返した状態</li>\n<li>rejected ... 約束を破った状態</li>\n</ul>\n<p>Promise オブジェクトはまず pending で始まり、あとで fulfilled や rejected に状態が変化する。</p>\n<h5>状態: pending</h5>\n<p>とりあえず約束してみる。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n});\n// 何もしない関数を、new Promise() に渡している。\nconsole.log( promise );\n</code></pre>\n<p>pendingと表示されただろう。</p>\n<p><em>ここでの変数<code>promise</code>は、Promise の状態 pending といえる。</em></p>\n<h5>状態: fulfilled</h5>\n<p>次は fulfilled の状態を作ってみる。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve();\n})\nconsole.log( promise );\n// 実はresolve,rejectはそれぞれ、渡された(コールバック)関数を引数として受け取っている。\n</code></pre>\n<p>Promise resoleved と表示されただろう。これが fulfilled である。</p>\n<p>実は状態 fulfilled は値を持つ。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello');\n})\nconsole.log( promise );\n</code></pre>\n<p><em>ここでの変数<code>promise</code>は、Promiseの状態 fulfilled であり、値<code>'hello'</code>を持つといえる。</em></p>\n<h5>状態: rejected</h5>\n<p>rejected も fulfilled と同様に値を持つ。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  reject('hello');\n})\nconsole.log( promise );\n</code></pre>\n<p><em>ここでの変数<code>promise</code>は、Promise の状態 rejected であり、値<code>'hello'</code>を持つといえる。</em></p>\n<p>rejected で渡される値(オブジェクト)は Error オブジェクトだったりする。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  reject(new Error('error message'));\n})\nconsole.log( promise );\n</code></pre>\n<p><em>ここでの変数<code>promise</code>は、Promise の状態 rejected であり、値に Error オブジェクトを持つといえる。</em></p>\n<h4>状態の変化</h4>\n<p>Promiseでは状態が変化する。\n初期状態では pending であるが、のちに fulfilled や rejected になる。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  //この行が実行されるタイミングでは、変数promiseは状態pending\n  if( true ){\n    //この行が実行されるタイミングでも、まだ変数promiseは状態pending\n    resolve('resolveされた!');\n    //この行が実行されるタイミングでは、変数promiseは状態fulfilledで値'resolveされた!'を持つ\n    return;\n  }\n  // ここから先は実行されない\n  reject('rejectされた');\n})\n</code></pre>\n<p>現在は同期処理を行っているので、fulfill または reject された状態に一瞬で変化してしまい、 pending の状態をみることはできない。</p>\n<p>しかし厳密にはもともとは pending で、 <code>resolve()</code>を実行すると fulfilled に、 <code>reject()</code> を実行すると rejected に、それぞれ状態が移行する。</p>\n<h4>then/catch による Promise チェーン</h4>\n<p>さて、Promise には3状態あり、変化することがわかった。\n変化すると何ができるのか？ それをこの節で説明する。</p>\n<p>Promise オブジェクトのメソッドに、then と catch がある。</p>\n<p>これらはそれぞれ第一引数に関数をとり、Promise が fulfilled や rejected の状態になると引数関数を実行する。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello');\n})\n\npromise.then( arg => {\n  console.log(arg); // ここではhelloが表示される\n  console.log('then is called');\n})\n</code></pre>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  reject('hello');\n})\n\npromise.catch( arg => {\n  console.log(arg); // ここではhelloが表示される\n  console.log('catch is called');\n})\n</code></pre>\n<p>このように<code>.</code>でつないで then/catch メソッドを呼べば、それらを発火できる。</p>\n<p>さらに、then/catch メソッドの戻り値に promise を与えてやれば、更に繋げられる。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello');\n})\n\npromise\n  .then( () => {\n    console.log('then is called');\n    return Promise.resolve('resolve!');\n  })\n  .then( arg => {\n    return Promise.resolve( arg + '!' );\n  })\n  .then( arg => {\n    console.log(arg); // resolve!! と表示される。\n  })\n\n// Promise.resolve('resolve!'); は、\n// new Promise( resolve => { resolve('resolve!') }); と同じ。\n</code></pre>\n<p>上述の通り、then メソッドの戻り値に Promise を渡すと、更に後ろに<code>.then()</code>を繋げられる。\n(<code>.catch()</code>も繋げられる。)</p>\n<p>このように、Promise が解決 (fulfill/reject) されたら<code>.then()</code>メソッドが発火し、\n<code>.then()</code>メソッドがPromiseを返すと、解決されたらさらに後ろの<code>.then()</code>メソッドが発火し、、、</p>\n<p>このように数珠つなぎに徐々に Promise が渡ることを Promise チェーンと呼ぶ。</p>\n<hr/>\n<p>ここまでで Promise を学んだ。\nコールバックや Promise を使う理由は非同期関数にあるので、読者の皆様にはややこしいことをしているようにしか見えないかもしれない。</p>\n<p>本当はこのあたりで非同期関数について説明し Promise のありがたみを理解していただくのもよいのだが、この記事はあくまで「まず同期関数で理解する。」ことが目的であり、非同期関数はもう少し後回しにする。</p>\n<hr/>\n<h3>Step1-3 async/await (同期関数)</h3>\n<p>次は sync/await だ。</p>\n<p>そのまえに説明すべきことが2つほどあるので補足。</p>\n<h4>補足: 即時関数</h4>\n<p>即時関数は定義と同時に実行する関数だ。\n関数定義を括弧でくくると即時実行される。</p>\n<pre><code class=\"hljs language-javascript\">const Hello = () => { console.log('hello') };\nHello();\n\n// 上2行のコードは、次の行のコードと同じ。\n( () => { console.log('hello') });\n\n// アロー関数でなくても良い\n( function () { console.log('hello') });\n</code></pre>\n<h4>補足: Async 関数 (asnyc function)</h4>\n<p>関数定義の前に<code>async</code>とつけて定義する。\nAsnyc 関数の中でのみ await が使える。</p>\n<pre><code class=\"hljs language-javascript\">// 例\nconst arrowFunc = async () => {\n  await promise;\n}\nasync function func() {\n  await promise;\n}\n</code></pre>\n<hr/>\n<h4>改めて async/await (同期関数)</h4>\n<p>閑話休題。</p>\n<p>async/await は Promise を生成する構文と言っていい。\n先程の then を書かずともよくなる構文である。</p>\n<p>前節の Promise のコードを再掲する。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello');\n})\n\npromise.then( arg => {\n  console.log(arg) // ここではhelloが表示される\n  console.log('then is called');\n})\n</code></pre>\n<p>これを async/await に書き直すと</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello');\n})\n\n(async () => {\n  const arg = await promise;\n  console.log(arg); // ここではhelloが表示される\n  console.log('then is called');\n})\n</code></pre>\n<p>このようになる。\nthen が消えたことがわかる。</p>\n<p>(即時実行のasync関数を使っている。)</p>\n<br/>\n<p>もう一つ前節のコードを再掲し async/await に書き換えてみる。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello')\n})\n\npromise\n  .then( () => {\n    console.log('then is called')\n    return Promise.resolve('resolve!')\n  })\n  .then( arg => {\n    return Promise.resolve( arg + '!' )\n  })\n  .then( arg => {\n    console.log(arg) // resolve!! と表示される。\n  })\n</code></pre>\n<p>async/await に書き換えると</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve, reject) => {\n  resolve('hello')\n})\n\n( async () => {\n  let arg = await promise\n  console.log('then is called')\n  let arg = await Promise.resolve('resolve!')\n  let arg = await Promise.resolve( arg + '!' )\n  console.log(arg) // resolve!! と表示される。\n})\n</code></pre>\n<p>今度は then がなくなったことで短く書けたことが伝わるのではないか。</p>\n<p><code>await</code>が現れると、Async 関数内の<code>await</code>より後ろの部分が全て<code>then()</code>の引数として包まれる、といった見方もできる。</p>\n<p>以上のように、async/await は Promise を簡潔に書く構文である。</p>\n<br/>\n<h4>余談: Promiseは必要か?</h4>\n<p>async/awaitで簡潔にかけるなら、Promiseなんて理解しなくて良いのでは？と思う方もいるだろう。\nしかし今の所そうも行かないのだ。</p>\n<p>複数のPromiseを同時に待つ処理をasync/awaitで書いてみる。</p>\n<pre><code class=\"hljs language-javascript\">( async () => {\n  await Promise.all( [ promise1, promise2 ])\n})\n</code></pre>\n<p>うお、Promise出てきた。。。</p>\n<p>コードの内容はおいておいて、Promise という単語が出てきたことに注目。\n解説は省くが、async/await は Promise を完全には隠しきれていないのだ。</p>\n<p>(気になる方はこの記事を読み終えてから<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all</code></a>をみると良いだろう。</p>\n<br/>\n<h2>Step2 非同期処理</h2>\n<p>さてさて、ここまで来ればゴールは近い。\nこの節では今まで苦労して覚えた謎構文 Promise と asnyc/await のありがたみがわかるようになる。</p>\n<h3>Step2-1 同期関数と非同期関数</h3>\n<p>同期関数と非同期関数について説明する。</p>\n<ul>\n<li>同期関数とは、中の処理が完了するまで待ってから戻り値を返す関数のこと</li>\n<li>非同期関数とは、中の処理にかかわらず、すぐに戻り値を返してしまう関数のこと</li>\n</ul>\n<p>JavaScript の代表的な非同期関数に<code>setTimeOut()</code>がある。</p>\n<p>次のようなコードで考えてみよう。</p>\n<pre><code class=\"hljs language-javascript\">setTimeOut( () => {\n  console.log('hello');\n}, 1000);\nconsole.log('world');\n</code></pre>\n<p>JavaScript は、普通は(同期関数は)、上から順番に1行ずつ実行される。</p>\n<p>しかし上記のコードを実行すると<code>world</code>が表示された後に<code>hello</code>が表示される。\nこれは<code>setTimeOut()</code>関数が非同期関数だからだ。</p>\n<p>書き方を少し変えてみる。</p>\n<pre><code class=\"hljs language-javascript\">function Hello() { // 1\n  console.log('hello'); // 4\n}\nsetTimeOut( Hello, 1000) // 2\nconsole.log('world') // 3\n</code></pre>\n<p>さっきと同じ動作をするコードだ。</p>\n<p>コンピュータの気持ちになってみると</p>\n<ol>\n<li>Hello 関数を定義するよ。Hello 関数は実行されたら<code>'hello'</code>と表示するよ。まだ定義だけで実行しないよ。</li>\n<li>setTimeOut 関数を実行するよ。Hello 関数を 1000ms 後に実行するとを登録するよ。<strong>登録するだけで、すぐに戻り値を返すよ。</strong></li>\n<li><code>'world'</code>と表示するよ。</li>\n</ol>\n<p>... しばらく (1000ms) 経って ...</p>\n<ol start=\"4\">\n<li>Hello 関数を実行するよ、<code>'hello'</code>と表示するよ。</li>\n</ol>\n<p>このような順で動作する。\n同期関数はその行で処理が停止するのに対し、非同期関数はすぐに次の行が実行される。</p>\n<h2>Step2-2 コールバック (非同期関数)</h2>\n<p>先程の例で非同期関数を実現してるのがコールバックだ。</p>\n<p>あとで実行して欲しい関数を引数で伝えておいて、ときが来たら実行する。</p>\n<p>やりたいことはコールバックで実現できるものの、何重にも重なると次のようなコードにになってしまう。</p>\n<pre><code class=\"hljs language-javascript\">setTimeOut( () => {\n  setTimeOut( () => {\n    setTimeOut( () => {\n      setTimeOut( () => {\n        setTimeOut( () => {\n          setTimeOut( () => {\n            console.log('6s later');\n          }, 1000);\n        }, 1000);\n      }, 1000);\n    }, 1000);\n  }, 1000);\n}, 1000);\n\nconsole.log('これはすぐに実行される');\n</code></pre>\n<p>コールバック関数を呼ぶたびにネストが深くなってしまい読みづらい。</p>\n<p>俗に言うコールバック地獄である。\nたとえばこの例だと、どの秒数がどの setTimeOut に対応するのかわかりづらい。</p>\n<p>(上記の例は全て一つの setTimeOut にまとめられるが)\n実際には次のような状況が考えられる。</p>\n<ol>\n<li>サーバと通信して、記事のリストをとってくる。</li>\n<li>記事のリストから該当の記事を探して、再度サーバと通信して本文をとってくる。</li>\n</ol>\n<p>このように、複数の非同期処理が数珠つなぎになることもあるだろう。</p>\n<p>数珠つなぎ、、、</p>\n<h2>Step2-3 Promise (非同期関数)</h2>\n<p>そう、数珠つなぎならさっきの Promise チェーンと相性が良い。</p>\n<p>さっきの6秒待つ処理も</p>\n<pre><code class=\"hljs language-javascript\">// 事前に Promise 関数を作っておく。\n// ライブラリなどで用意されていたりするので、Promise を使う側は作る必要はない。\nfunction setTimeOutPromise(time){\n  return new Promise( resolve => {\n    setTimeOut( resolve, 1000);\n  });\n}\n\nsetTimeOutPromise(1000)\n.then( () => \n  setTimeOutPromise(1000)\n).then( () =>\n  setTimeOutPromise(1000)\n).then( () =>\n  setTimeOutPromise(1000)\n).then( () =>\n  setTimeOutPromise(1000)\n).then( () =>\n  setTimeOutPromise(1000)\n).then( () => {\n  console.log('6s later');\n})\n\nconsole.log('これはすぐに実行される');\n</code></pre>\n<p>ネストが解消されて、引数もコンパクトになって見やすくなった。</p>\n<h2>Step2-4 asnyc/await (非同期関数)</h2>\n<p>さらに async/awaitで書き直すと</p>\n<pre><code class=\"hljs language-javascript\">// 事前に Promise 関数を作っておく。\n// さっきと同じ。\nfunction setTimeOutPromise(time){\n  return new Promise( resolve => {\n    setTimeOut( resolve, 1000)\n  })\n}\n\n( async () => {\n  await setTimeOutPromise(1000);\n  await setTimeOutPromise(1000);\n  await setTimeOutPromise(1000);\n  await setTimeOutPromise(1000);\n  await setTimeOutPromise(1000);\n  await setTimeOutPromise(1000);\n  console.log('6s later');\n})\n\nconsole.log('これはすぐに実行される');\n</code></pre>\n<p>これは見やすい！\n非同期関数を同期的に書けるようになった。</p>\n<p>await の行で停止しているかのように動作する。</p>\n<h2>さいごに</h2>\n<p>本記事を読み次の2つを知れば、他の記事が格段に読みやすくなるだろう。</p>\n<ul>\n<li>同期処理と非同期処理の違い</li>\n<li>同期処理でPromiseがどういう動作をするか</li>\n</ul>\n<p>これからは「コールバック地獄を解決するために Promise チェーンがある」「 async/await は Promise の生成だ」などと書かれた他の記事も読めるのではないだろうか。</p>\n<p>この記事を完全に理解できなくても、 読者の皆様はこれから JavaScript の非同期処理を深める土台ができているのではないかと思う。</p>\n<p>ここまでの長文に付き合いいただきありがたい。</p>\n<p>以上。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-30T13:55:02+09:00","message":"Update for Qiita\n","hash":"39ff8b31b50f0ae27f379c0c5a8486bafeb80132"},{"date":"2020-05-19T19:42:52+09:00","message":"Publish a post of promise\n","hash":"83221c3c8c3707986024d192c851120e1a75cba6"},{"date":"2020-05-19T19:41:49+09:00","message":"Add a post of Promise\n","hash":"9a7f5fa4566b6a765643b4cf6480947b7931eba0"},{"date":"2020-05-19T12:20:51+09:00","message":"[WIP] writing about JavaScript Promise ...\n","hash":"94fe7d6f1f83dc15496bd17dcfdffc01e04fc474"}],"date_published":"2020-05-19T16:50:47+09:00","tags":["JavaScript","非同期"]},{"id":"https://memo.yammer.jp/posts/promise-then-arg2","url":"https://memo.yammer.jp/posts/promise-then-arg2","title":"Promiseのthenメソッドには第二引数がある","summary":"この記事は以下のツイートについて。 https://twitter.com/yammerjp/status/1262637541028585475 きっかけはMDN web docsのPromiseについてのページを見ていたことに始まる。 以前、私がPromiseとaync/awaitを理解するときにとても役にたった記事があった。 Qiitaにあった記事で同期処理でPromiseをしてみて理解しようと試みる記事だったのだが、いま探しても見つからない。 需要がありそうなので自分で書いているのだが、そんな中でMDNを見ていてthenメソッドに関する発見があった。 const promise = n","content_html":"<p>この記事は以下のツイートについて。</p>\n<p><blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">thenメソッドって第2引数でrejectedなときに実行する関数も指定できるのか、いつもcatchばかり使っていた。</p>— やんまー (@yammerjp) <a href=\"https://twitter.com/yammerjp/status/1262637541028585475?ref_src=twsrc%5Etfw\">May 19, 2020</a></blockquote></p>\n<p>きっかけは<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN web docsのPromiseについてのページ</a>を見ていたことに始まる。</p>\n<p>以前、私がPromiseとaync/awaitを理解するときにとても役にたった記事があった。\nQiitaにあった記事で同期処理でPromiseをしてみて理解しようと試みる記事だったのだが、いま探しても見つからない。</p>\n<p>需要がありそうなので自分で書いているのだが、そんな中でMDNを見ていてthenメソッドに関する発見があった。</p>\n<pre><code class=\"hljs language-javascript\">const promise = new Promise( (resolve,reject) => {\n  setTimeout( () => {\n    if( (Date.now()%2) === 0 ){\n      resolve()\n      return\n    }\n    reject()\n  }, 1000)\n})\n\npromise.then(\n  () => { console.log('fulfilled')},\n  () => { console.log('rejected')}\n)\n</code></pre>\n<p>あなたの運(実行タイミング)によってfulfilledかrejectedが表示されるコードである。</p>\n<ul>\n<li>thenの第一引数は、promiseオブジェクトがfulfilled状態になったとき(上記コードでいえば<code>resolve()</code>が実行されたとき)、実行される関数である。</li>\n</ul>\n<p>これは理解していたが次だ。</p>\n<ul>\n<li>thenの第二引数は、promiseオブジェクトがrejected状態になったとき(上記コードでいえば<code>reject()</code>が実行されたとき)、に実行される関数である。</li>\n</ul>\n<p>これは見落としていた。\nいつも<code>then(A).catch(B)</code>として拾っていたが、<code>then( A, B )</code>として書けるのだな。</p>\n<p>書けることと見やすいことは別で、今の私の感情ではcatchと書いたほうが見やすいのでは？と思うのだが、実際のところどうなのだろう。\nthenの第二引数がどれだけ使われているのか気になるところである。</p>\n<br/>\n<p>ところで、promiseの状態について、初期状態をpendingと表現し、それがfulfilledかrejectedに変化するのだが、fulfilledのことをついresolvedと表現したくなってしまう。</p>\n<p>正確にはresolvedというと、fulfilledとrejectedをどちらも指すようで、promiseが成功したときはfulfilledと表現すべきらしい。\n(resolvedと同じ意味でsettledという言葉も使われるようだ。)</p>\n<p>なるほど区別するのは良いのだが、それならよく</p>\n<pre><code class=\"hljs language-javascript\">new Promise( (resolve, relect) => {})\n</code></pre>\n<p>と書いているのはどうなの。</p>\n<pre><code class=\"hljs language-javascript\">new Promise( (fulfill, reject) => {})\n</code></pre>\n<p>と予め書いてあるほうが混乱を産まないと思うのだが。</p>\n<br/>\n<p>話がそれたが今日はPromiseのthenメソッド第二引数についてであった。\nいつも使っている文でも知らないことが隠れていたりするので、ことあるごとに正しい文献に戻ることを心がけていきたい。</p>","_history":[{"date":"2023-03-06T14:58:29+09:00","message":"Add: twitterとyoutubeのURL埋め込みに対応\n","hash":"635b352e6063577f6695e209e13a567efc3ad7d1"},{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-19T16:35:11+09:00","message":"Add a post of promise-then-args\n","hash":"4b666324175c9cee2ca3d30b753b1c9187cf04d1"}],"date_published":"2020-05-19T15:57:35+09:00","tags":["JavaScript","非同期"]},{"id":"https://memo.yammer.jp/posts/raspberry-pi-zero-setup","url":"https://memo.yammer.jp/posts/raspberry-pi-zero-setup","title":"Raspberry Pi Zeroをモニタレスで使うためのSetup","summary":"2020/3/4のメモ。 Raspberry pi Zero を、購入後一切モニタにつなぐことなく無線LAN経由でSSHできるようセットアップする手順。 母艦は MacOS X で行っているが、SDカードへの書き込みができればなんでもよい。 肝となるのは、OSを書き込んだSDカードに次のように手を加えておくことだ。 事前に無線LANのSSIDとパスワードを記述したファイルをおく SSHを有効化する 起動前 micro SD cardのフォーマット SD Association公式サイトより、SDカードフォーマッターをダウンロードする。 ダウンロードしたSDカードフォーマッターでSDカードをフォ","content_html":"<p>2020/3/4のメモ。\nRaspberry pi Zero を、購入後一切モニタにつなぐことなく無線LAN経由でSSHできるようセットアップする手順。</p>\n<p>母艦は MacOS X で行っているが、SDカードへの書き込みができればなんでもよい。</p>\n<p>肝となるのは、OSを書き込んだSDカードに次のように手を加えておくことだ。</p>\n<ul>\n<li>事前に無線LANのSSIDとパスワードを記述したファイルをおく</li>\n<li>SSHを有効化する</li>\n</ul>\n<h2>起動前</h2>\n<h3>micro SD cardのフォーマット</h3>\n<p><a href=\"https://www.sdcard.org/jp/downloads/formatter_4/\">SD Association公式サイト</a>より、SDカードフォーマッターをダウンロードする。</p>\n<p>ダウンロードしたSDカードフォーマッターでSDカードをフォーマットする。</p>\n<p>( FAT, FAT32, exFAT)。 4GB以上(要出典)。</p>\n<h3>OSイメージのダウンロード</h3>\n<p><a href=\"https://www.raspberrypi.org/downloads/raspbian/\">raspberry pi公式サイト</a>からraspbianをダウンロードする。</p>\n<p>ここではGUIが必要ないので、[Raspbian Buster Lite]のzipをダウンロードする。</p>\n<h3>OSイメージの書き込み</h3>\n<pre><code class=\"hljs language-shell\"># ダウンロードしたzipを展開してimgファイルを得る\n$ unzip 2020-02-13-raspbian-buster-lite.zip\n\n# デバイスを確認\n$ diskutil list\n\n# フォーマット済みの書き込み先デバイス(ここでは/dev/disk2)をunmount\n$ diskutil unMountDisk /dev/disk2\n\n# 書き込み\n$ sudo dd bs=1m if=2020-02-13-raspbian-buster-lite.img of=/dev/disk2\n</code></pre>\n<h3>wifiの事前設定とsshの有効化</h3>\n<p>書き込み後のSDカードのbootドライブをマウントする。(/Volumes/boot)</p>\n<pre><code class=\"hljs language-shell\">$ cd /Volumes/boot\n# bootドライブちょっかいsshという名前のファイルが有ると、初期状態でsshが起動する\n$ touch ssh\n\n# wifi設定を書き込む\n$ vim wpa_supplicant.conf\n</code></pre>\n<p><code>wpa_supplicant.conf</code>の中身は以下の通り</p>\n<pre><code># wpa_supplicant.conf\n\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=JP\n\nnetwork={\n        ssid=\"接続先アクセスポイントのSSID\"\n        psk=\"接続先アクセスポイントのパスワード\"\n}\n</code></pre>\n<h2>起動</h2>\n<p>micro SDカードを差し込み、PWRと書かれた方のmicro USB Bポートに電源ケーブルをつなぐと起動する。</p>\n<h3>ipアドレスとmacアドレスの確認とDHCPリースの固定</h3>\n<p>起動すると、自動でwifiに接続して22版ポートが開いてsshが立ち上がる(少し時間がかかる)</p>\n<p>ルータの設定画面などをみて、新しく接続されたデバイスに注目する。raspberry piっぽい端末のmacアドレスを見つける。</p>\n<p>DHCPリースを固定にして、このMACアドレスに対応するIPアドレスをわかりやすいものに固定しておく</p>\n<h3>sshで接続</h3>\n<p><strong>クライアント側</strong></p>\n<pre><code class=\"hljs language-shell\">$ ssh pi@192.168.0.13\n# raspberry pi のIPアドレスを指定(ここでは 192.168.0.13 であるとする)\n# デフォルトのIDは pi\n# デフォルトのパスワードは raspberry\n</code></pre>\n<h3>設定</h3>\n<p><strong>raspberry pi側</strong></p>\n<pre><code class=\"hljs language-shell\"># visudoでnanoではなくvimを立ち上げる\n# 参考: https://qiita.com/koara-local/items/35b999631b6ab41fdc9f\n$ sudo update-alternatives --config editor\n\n# vimをエイリアスとして登録\n$ vim ~/.bashrc\n</code></pre>\n<p><code>.bashrc</code>に下記を追記</p>\n<pre><code class=\"hljs language-bash\"># .bashrc\nalias vim='vi'\n</code></pre>\n<p>変更を読み込む</p>\n<pre><code class=\"hljs language-shell\">$ source ~/.bashrc\n</code></pre>\n<h2>sshの設定</h2>\n<h3>ssh用ユーザの作成</h3>\n<p><strong>raspberry pi側</strong></p>\n<pre><code class=\"hljs language-shell\"># yammerというユーザを作るとする\n$ sudo useradd yammer\n$ sudo passwd yammer\n$ sudo visudo\n</code></pre>\n<p>visudoによって、<code>/etc/sudoers</code>に下記を追記</p>\n<pre><code>yammer  ALL=(ALL) ALL\n</code></pre>\n<h3>ssh用公開鍵の作成</h3>\n<p>ssh用の公開鍵を作る。</p>\n<p><strong>クライアント側</strong></p>\n<pre><code class=\"hljs language-shell\">$ cd ~/.ssh\n$ ssh-keygen -t rsa -b 4096 -C \"raspberry-pi\" -f ~/.ssh/id_rsa_pi\n</code></pre>\n<h3>sshのパーミッションを設定</h3>\n<p><strong>raspberry pi側</strong></p>\n<pre><code class=\"hljs language-shell\">$ cd /home/yammer\n$ chmod 700 .ssh\n$ chmod 600 .ssh/authorized_keys\n</code></pre>\n<h3>ssh公開鍵を送る</h3>\n<p><strong>クライアント側</strong></p>\n<pre><code class=\"hljs language-shell\">$ scp ~/.ssh/id_rsa_pi.pub yammer@192.168.0.13:/home/yammer/.ssh/authorized_keys\n</code></pre>\n<h3>ssh設定</h3>\n<p><strong>raspberry pi側</strong></p>\n<pre><code class=\"hljs language-shell\">$ sudo vi /etc/ssh/sshd_config\n</code></pre>\n<pre><code># /etc/ssh/sshd_config\n\nRSAAuthentication   yes\nPubkeyAuthentication   yes\nAuthorizedKeysFile   .ssh/authorized_keys\nAllowUsers yammer # ユーザ名を追加\n</code></pre>\n<pre><code class=\"hljs language-shell\">$ sudo /etc/init.d/sshd restart\n</code></pre>\n<h3>接続できるか確認</h3>\n<p><strong>クライアント側</strong></p>\n<pre><code class=\"hljs language-shell\">$ ssh -i ~/.ssh/id_rsa_pi yammer@192.168.0.13\n</code></pre>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://qiita.com/tattn/items/a03cbf7c185d7efa6769\">SSH用のユーザー追加手順と注意点のまとめ - Qiita</a></li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-16T01:26:34+09:00","message":"Add post\n","hash":"8c87df65101c79604bfdd986be0dc77f7a8b26f0"}],"date_published":"2020-05-16T01:21:46+09:00","tags":["RaspberryPi"]},{"id":"https://memo.yammer.jp/posts/vim-intro","url":"https://memo.yammer.jp/posts/vim-intro","title":"Vimに入門したときの覚書","summary":"昨年、Vimを使える人間になりたいという気持ちからVimに入門した。 まずvimtutorをやり、またVim以外のエディタを使うことを禁止して慣れるようにした。 vimtuorのあとは実践Vimを読んだりしながら日常使いの中でVimに慣れていった。 また基本的にプラグインを追加することを禁止し、不用意な.vimrcの編集も禁止して、素の状態のVimに慣れるように気を配っていた。 そんなこんなでVimに慣れようとしていたわけだが、最初期vimtutorをやるだけではなかなかキーバインドが覚えられず、とても編集速度が遅かったので、同時にメモに書き出すことで覚えていたようである。 このときのメモをこ","content_html":"<p>昨年、Vimを使える人間になりたいという気持ちからVimに入門した。</p>\n<p>まずvimtutorをやり、またVim以外のエディタを使うことを禁止して慣れるようにした。\nvimtuorのあとは<a href=\"https://www.amazon.co.jp/dp/B00HWLJI3U/ref=dp-kindle-redirect?_encoding=UTF8&#x26;btkr=1\">実践Vim</a>を読んだりしながら日常使いの中でVimに慣れていった。\nまた基本的にプラグインを追加することを禁止し、不用意な<code>.vimrc</code>の編集も禁止して、素の状態のVimに慣れるように気を配っていた。</p>\n<p>そんなこんなでVimに慣れようとしていたわけだが、最初期vimtutorをやるだけではなかなかキーバインドが覚えられず、とても編集速度が遅かったので、同時にメモに書き出すことで覚えていたようである。</p>\n<p>このときのメモをここに供養する。書いた日付は2019/10/28。</p>\n<hr/>\n<h2>Vim :help 日本語化</h2>\n<p>まず次のコマンドを実行</p>\n<pre><code class=\"hljs language-shell\">$ curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n</code></pre>\n<p>次に<code>~/.vimrc</code>に次の内容を追記</p>\n<pre><code class=\"hljs language-vim\"><span class=\"hljs-comment\">\" .vimrc</span>\n\n<span class=\"hljs-keyword\">call</span> plug#begin(<span class=\"hljs-string\">'~/.vim/plugged'</span>)\n<span class=\"hljs-comment\">\" A project which translate Vim documents into Japanese.</span>\nPlug <span class=\"hljs-string\">'vim-jp/vimdoc-ja'</span>\n<span class=\"hljs-keyword\">call</span> plug#end()\n\n<span class=\"hljs-keyword\">set</span> helplang=ja,<span class=\"hljs-keyword\">en</span>\n</code></pre>\n<p>次にVimを立ち上げて<code>:PlugInstall</code>と入力しプラグインをインストールする</p>\n<p>参考: <a href=\"https://qiita.com/issuy/items/919d76ac1b94dc56a77e\">Vimをちゃんと知りたい！だからHelpを日本語化する！</a></p>\n<h2>.vimrcを無視する</h2>\n<p>.vimrcを書き換えて起動しなくなったら</p>\n<pre><code class=\"hljs language-shell\">$ vim -u NONE -N\n# -u None ... .vimrcを読み込まない vi互換モードにする\n# -N ...(nocompatible) vi互換モードをオフにする\n</code></pre>\n<h2>. 直前の操作を繰り返す</h2>\n<h3>ノーマルモード</h3>\n<p>直前のコマンドを繰り返す(カーソル移動はコマンドとみなされない) (ex.<code>x</code>, <code>dd</code>, <code>>G</code>)</p>\n<h3>インサートモード</h3>\n<p>挿入モードに入った瞬間(<code>i</code>を押す等)からノーマルモードに戻る(<code>&#x3C;Esc></code>を押す)までの間のキーストロークが記録されている<br>\n.を押すことでこの一連の流れを再生できる</p>\n<h2>移動</h2>\n<ul>\n<li><code>h</code> ... ←</li>\n<li><code>j</code> ... ↓</li>\n<li><code>k</code> ... ↑</li>\n<li><code>l</code> ... →</li>\n<li><code>$</code> ... 行末に移動</li>\n<li><code>w</code> ... 次の単語へ移動</li>\n<li><code>gg</code> ... ファイル先頭へ移動</li>\n<li><code>G</code> ... ファイル末尾へ移動</li>\n<li><code>{数字}G</code> ... {数字}行目に移動</li>\n<li><code>&#x3C;Ctrl>G</code> ... 現在のカーソル行を表示</li>\n<li><code>>G</code> ... 現在の行からファイル末尾までのインデントを1段深くする</li>\n</ul>\n<h2>基本操作</h2>\n<ul>\n<li><code>x</code> ... カーソル下の文字を削除</li>\n<li><code>dd</code> ... 行頭から行末まで削除</li>\n<li><code>i</code> ... インサートモードへ切り替え</li>\n<li><code>a</code> ... カーソルの右隣でインサートモードへ切り替え</li>\n<li><code>A</code> ... 行末に移動してインサートモードに切り替え</li>\n<li><code>o</code> ... 次行を作りインサートモードへ</li>\n<li><code>O</code> ... 前行を作りインサートモードへ</li>\n<li><code>u</code> ... アンドゥ 戻る</li>\n<li><code>U</code> ... 行単位でアンドゥ 戻る</li>\n<li><code>&#x3C;Ctrl>R</code> ... リドゥ　戻るの取り消し</li>\n<li><code>0</code> ... 行頭へ移動</li>\n<li><code>p</code> ... 貼り付け (削除したものを貼り付け 例えば<code>dd</code>コマンドで削除した行等</li>\n<li><code>r</code> ... 置き換え カーソル下の文字を一文字消して次に入力した一文字で置き換える。なお置き換え後もノーマルモードを維持する</li>\n<li><code>R</code> ... 置換モード カーソル下を上書きして文字を挿入する escキーでノーマルモードに戻る</li>\n<li><code>%</code> ... 対応する括弧へ移動</li>\n<li><code>yy</code> ... 行をヤンク</li>\n<li><code>yw</code> ... カーソル後ろの空白を含む単語をヤンク</li>\n</ul>\n<h2>モーション操作</h2>\n<h3><code>d</code></h3>\n<p>ノーマルモードでモーション操作を行うとカーソル移動</p>\n<p><code>d{モーション}</code>を行うと現カーソルからモーション先まで削除</p>\n<p><code>d{数字}{モーション}</code>ないし<code>{数字}d{モーション}</code>は等価で、数字個先のモーションの差示す場所まで削除する</p>\n<h3><code>e</code></h3>\n<p><code>c{モーション}</code>を行うと、現カーソルからモーション先まで削除して挿入モードに切り替え</p>\n<h3>モーション</h3>\n<ul>\n<li><code>w</code> ... 空白を含む単語尾</li>\n<li><code>e</code> ... 空白を含まない単語尾</li>\n<li><code>$</code> ... 行末</li>\n</ul>\n<h2>コマンド</h2>\n<h3>終了</h3>\n<ul>\n<li><code>:q!</code> ... 内容を破棄して終了</li>\n<li><code>:wq</code> ... 内容を保存して終了</li>\n</ul>\n<h3>書き込み</h3>\n<ul>\n<li><code>:w filename</code> ... ファイルfilenameへ書き込み</li>\n</ul>\n<h3>検索</h3>\n<ul>\n<li><code>/hoge</code> ... hogeを前方検索</li>\n<li><code>?hoge</code> ... hogeを逆方向に検索</li>\n<li>(検索した状態で)<code>n</code> ... 次を検索</li>\n<li>(検索した状態で)<code>&#x3C;Ctrl>o</code> ... 一つ前の検索結果に戻る</li>\n</ul>\n<h3>置換</h3>\n<ul>\n<li><code>:s/before/after</code> ... カーソル行の１つ目のbeforeをafterへ置換</li>\n<li><code>:s/before/after/g</code> ... カーソル行の全てのbeforeをafterへ置換</li>\n<li><code>:3,5s/before/after/g</code> ... 3行目から5行目の全てのbeforeをafterへ置換</li>\n<li><code>:%s/before/after/g</code> ... ファイル内全てのbeforeをafterへ置換</li>\n<li><code>:%s/before/after/gc</code> ... ファイル内全てのbeforeを都度確認しながらafterへ置換</li>\n</ul>\n<h3>検索/置換のオプション</h3>\n<ul>\n<li><code>:set ic</code> ... 検索時に大文字小文字を区別しない(ignorecase)</li>\n<li><code>:set is</code> ... 検索フレーズに部分マッチしている部分を表示する(incsearch)</li>\n<li><code>:set hls</code> ... マッチする全てを強調表示する(hlsearch)</li>\n</ul>\n<h3>ターミナルコマンド実行</h3>\n<ul>\n<li><code>:!ls</code> ... lsを実行(のちエンターでvimに戻る)</li>\n</ul>\n<h3>挿入</h3>\n<ul>\n<li><code>:r filename</code> ... filenameの内容をカーソル位置へ挿入</li>\n<li><code>:r !ls</code> ... lsの結果をカーソル位置へ挿入</li>\n</ul>\n<h3>help</h3>\n<ul>\n<li><code>:help</code> ... helpウィンドウを開く</li>\n<li><code>:help hoge</code> ... hogeに関するhelpを見る</li>\n</ul>\n<h3>候補と保管</h3>\n<ul>\n<li><code>:e&#x3C;TAB></code> ... eから始まるコマンドを補完</li>\n<li><code>:e&#x3C;Ctrl>d</code> ... eから始まるコマンドを一覧表示</li>\n</ul>\n<h2>visualモード</h2>\n<ul>\n<li><code>v</code> ... visualモードへ切り替え カーソルを移動させると、visualモード移行時のカーソルとの間が反転し選択される</li>\n<li>(visualモードで短形選択時)<code>:'&#x3C;,'>w filename</code>(<code>'&#x3C;,'></code>は自動で入力される) ... 短形選択部分をfilenameへ書き出し</li>\n<li>(visualモードで短形選択時)<code>y</code> ... ヤンク(コピー)</li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-16T01:17:36+09:00","message":"Add posts\n","hash":"419545d6e9024462bcbe6cd0d8addfa5b5f8895e"}],"date_published":"2020-05-16T01:07:44+09:00","tags":["Vim"]},{"id":"https://memo.yammer.jp/posts/my-type-of-typescript","url":"https://memo.yammer.jp/posts/my-type-of-typescript","title":"TypeScriptでプロジェクト内独自の型定義をまとめたファイルを読み込ませる方法。","summary":"TypeScriptでプロジェクト内の型定義をするときのための過去のメモをここに供養する。 日付は2020/1/10。 やりたいこと TypeScriptで、独自の型定義をプロジェクト内の複数のファイルで利用したい。 src/types/index.d.tsで定義する型DayOfWeekをはじめとして、src/typesディレクトリ以下のファイルにある型定義をTypeScriptコンパイラに読み込ませて、プロジェクト内の任意のファイルで利用できるようにする。 // src/types/index.d.ts type DayOfWeek = \"Sunday\" | \"Monday\" | \"Tues","content_html":"<p>TypeScriptでプロジェクト内の型定義をするときのための過去のメモをここに供養する。\n日付は2020/1/10。</p>\n<h2>やりたいこと</h2>\n<p>TypeScriptで、独自の型定義をプロジェクト内の複数のファイルで利用したい。</p>\n<p><code>src/types/index.d.ts</code>で定義する型<code>DayOfWeek</code>をはじめとして、<code>src/types</code>ディレクトリ以下のファイルにある型定義をTypeScriptコンパイラに読み込ませて、プロジェクト内の任意のファイルで利用できるようにする。</p>\n<pre><code class=\"hljs language-typescript\">// src/types/index.d.ts\ntype DayOfWeek = \"Sunday\" | \"Monday\" | \"Tuesday\" | Wednesday\" | \"Tursday\" | \"Friday\" | Saturday\"; \n</code></pre>\n<h2>方法</h2>\n<p><code>tsconfig.json</code>に次を追記する</p>\n<pre><code class=\"hljs language-json\">// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"typeRoots\": [\n      \"node_modules/@types\",\n      \"src/types\"\n    ]\n  }\n}\n</code></pre>\n<p><code>tsconfig.json</code>内での<code>compilerOptions.typeRoots</code>は文字列の配列をおく。</p>\n<p>文字列は型定義ファイルを置くディレクトリのパスを表す。</p>\n<p>もともと、npmでインストールしたパッケージの型定義は<code>node_modules/@types</code>以下に配置され、<code>compilerOptions.typeRoots</code>が定義されていないときはデフォルトで読み込まれる。</p>\n<p><code>compilerOptions.typeRoots</code>を記述する際には、自分の定義したい型ファイルのディレクトリと合わせて、デフォルトで読み込まれる型定義ファイルのパスも記述する必要がある。</p>\n<h2>発展して</h2>\n<p>逆に、インストールした型定義を無視したい時は、<code>compilerOptions.typeRoots</code>に<code>node_modules/@types</code>を除いて記述すれば良い。</p>\n<p>使うシチュエーションはあまりないかもしれないが。</p>\n<h2>感想</h2>\n<p>TypeScriptは毎回完全理解()しているので、チョットデキル人間になるために一度ちゃんと学び直す必要がありそう。</p>\n<p>(この項目はメモをここに移したときに書いた)</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-16T01:26:34+09:00","message":"Add post\n","hash":"8c87df65101c79604bfdd986be0dc77f7a8b26f0"},{"date":"2020-05-16T01:17:36+09:00","message":"Add posts\n","hash":"419545d6e9024462bcbe6cd0d8addfa5b5f8895e"}],"date_published":"2020-05-16T01:01:45+09:00","tags":["TypeScript"]},{"id":"https://memo.yammer.jp/posts/telnet-http","url":"https://memo.yammer.jp/posts/telnet-http","title":"TELNETでHTTP通信する","summary":"TELNETでHTTP通信するだけの記事である。 すぐ終わる。 相手ホストやポート番号、手書きのHTTPヘッダを渡せば、 TELNET で HTTP 通信ができる。 $ telnet memo.yammer.jp 80 Trying 2400:6180:0:d1::4df:d001... Connected to memo-basd4g-net.netlify.com. Escape character is '^]'. GET / HTTP/1.1 Host: memo.yammer.jp Connection: close HTTP/1.1 301 Moved Permanently Ca","content_html":"<p>TELNETでHTTP通信するだけの記事である。\nすぐ終わる。</p>\n<p>相手ホストやポート番号、手書きのHTTPヘッダを渡せば、 TELNET で HTTP 通信ができる。</p>\n<pre><code class=\"hljs language-shell\">$ telnet memo.yammer.jp 80\nTrying 2400:6180:0:d1::4df:d001...\nConnected to memo-basd4g-net.netlify.com.\nEscape character is '^]'.\nGET / HTTP/1.1\nHost: memo.yammer.jp\nConnection: close\n\nHTTP/1.1 301 Moved Permanently\nCache-Control: public, max-age=0, must-revalidate\nContent-Length: 40\nContent-Type: text/plain\nDate: Fri, 15 May 2020 15:46:22 GMT\nLocation: https://memo.yammer.jp/\nAge: 2\nConnection: close\nServer: Netlify\nX-NF-Request-ID: e38b7b4a-47e9-4306-8d60-e917e96c78cd-2547281\n\nRedirecting to https://memo.yammer.jp/\nConnection closed by foreign host.\n</code></pre>\n<p>IPv6でつないでくれている。</p>\n<p>あいにく memo.yammer.jp は HTTP をリダイレクトしてしまうのでページの内容は取得できなかったが、通信できた。</p>\n<p>たまには HTTP ヘッダを手書きしてみるのも趣があるのではなかろうか。(??)</p>\n<p>以上。</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-16T00:51:49+09:00","message":"Add article\n","hash":"95288fd84531f6946852261ba69cf82ab2f6db52"}],"date_published":"2020-05-16T00:43:55+09:00","tags":["Shell","HTTP"]},{"id":"https://memo.yammer.jp/posts/internet-tcpip","url":"https://memo.yammer.jp/posts/internet-tcpip","title":"インターネットとTCP/IP","summary":"今日のインターネットの根幹をなすTCP/IPについての基本的な知識を説明する。 研究室の輪講で「マスタリングTCP/IP 入門編」を読んだことがきっかけ。 参考文献: マスタリングTCP/IP入門編 第二章 pp60-80 インターネット 今この文章もインターネットに公開され、インターネットを介して見ていることと思うが、インターネットとはそもそも何を指すのか。 Internet / The Internet とは、TCP/IPにより全世界を接続しているコンピュータネットワーク、ただ一つのことを指す。 語源は「複数のネットワークを結ぶ」ことを表す internet。 現在ではこの意味は inte","content_html":"<p>今日のインターネットの根幹をなすTCP/IPについての基本的な知識を説明する。</p>\n<p>研究室の輪講で「マスタリングTCP/IP 入門編」を読んだことがきっかけ。</p>\n<ul>\n<li>参考文献: マスタリングTCP/IP入門編 第二章 pp60-80</li>\n</ul>\n<h2>インターネット</h2>\n<p>今この文章もインターネットに公開され、インターネットを介して見ていることと思うが、インターネットとはそもそも何を指すのか。</p>\n<p>Internet / The Internet とは、TCP/IPにより全世界を接続しているコンピュータネットワーク、ただ一つのことを指す。</p>\n<p>語源は「複数のネットワークを結ぶ」ことを表す internet。\n現在ではこの意味は internet ではなく internetworking という言葉で表される。</p>\n<h3>インターネットの構造</h3>\n<p>インターネットは、小さなネットワークが相互接続し1つのネットワークを成し、これが複数接続して大きなネットワークを成し、、のように階層的な構造をもつ。</p>\n<p>ISP (Internet Service Provider) のネットワーク内では、NOC (Network Operation Center) と呼ばれる施設を通じて接続し、ネットワークを構成している。\nISP 同士の接続には、2者間接続を行うプライベートピアリングや、多数の ISP を IX (Internet Exchange) を通じてつなぐ IP トランジットがある。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-internet-construction.png\" alt=\"インターネットの構造\"></p>\n<p>画像はインターネットの構造を表した図。</p>\n<p>ISP 以外にも有志で運営される地域ネットといわれるネットワークも存在すると本に記載があるが、2020年現在の実態は不明。\n過去にあった地域ネットとして<a href=\"https://ja.wikipedia.org/wiki/%E6%9F%8F%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%83%A6%E3%83%8B%E3%82%AA%E3%83%B3\">柏インターネットユニオン</a>などがあるようだ。</p>\n<h2>TCP/IP</h2>\n<p>TCP/IP とは、パケット交換プロトコルである IP (Internet Protocol) を利用したり、 IP で通信したりするときに必要なプロトコル群の総称のことである。\nインターネットで必要なプロトコルをまとめたものであることから、インターネットプロトコルスイートとも言われる。\nTCP/IP という語を使うとき、 TCP プロトコルと IP プロトコルだけを指しているわけではない。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-internet-protocol-suite.png\" alt=\"TCP/IP に含むプロトコルの一例\"></p>\n<h3>パケット交換ネットワーク</h3>\n<p>先程出てきたパケット交換について。\nパケット交換ネットワークとは、電話に用いられるような回線交換型と対比されるネットワークの形式である。</p>\n<p>一つの回線を複数が共有して使う。\n代表的な利点として、回線の利用効率を高められること、分散型のネットワークの構築に向くことが挙げられる。</p>\n<h3>TCP/IP の歴史</h3>\n<p>1960年代、米国防総省 (The Depertment of Defense) が中心に、分散型ネットワークによる通信技術の開発が行われた。\nその中で学術機関4ノードを結ぶ、パケット交換の実用性を試験するための分散型ネットワーク ARPANET が誕生した。\nARPANET は急速に発展し、3年間で34ノードにまで拡大し、パケット交換によるデータ通信に実用性があることがわかった。</p>\n<p>その後、単なるパケット交換通信にとどまらず、各ノードのコンピュータ間での信頼性の高い通信手段を提供する総合的な通信プロトコルが実験、開発される。これがTCP/IPとなった。</p>\n<p>TCP/IP は当時普及していた OS である BSD UNIX に実装され、利用がさらに加速する。\nARPANET は拡大し、多数のネットワークと接続するようになる。\nやがて ARPANET や後継の NSFnet に接続する TCP/IP による世界的なネットワークをインターネット (The Internet) と呼ぶようになった。</p>\n<p>1995年ごろには ISP (Internet Service Provider) が乱立し、インターネットの商用化が進む。\nこのような流れで今日に至り、世界中を TCP/IP によるネットワークであるインターネットが覆い尽している。</p>\n<ul>\n<li>1960s DoD による通信技術の研究</li>\n<li>1969 ARPANET の誕生。パケット交換技術の開発</li>\n<li>1972 TCP/IP の誕生</li>\n<li>1975 TCP/IP の仕様決定と、 TCP/IP が実装された UNIX の提供</li>\n<li>1982 ARPANET でのプロトコルがTCP/IPに統一</li>\n<li>1989 LAN/WAN 上で TCP/IP が普及</li>\n<li>1995 インターネットの商用化が進む</li>\n</ul>\n<h3>TCP/IP の標準化</h3>\n<p>TCP/IP はプロトコル群であり、通信のためには両者が同一のプロトコルを使用する必要がある。\nそのためにTCP/IP にも標準が存在するが、 TCP/IP の標準化には次の2つの特徴があり、これがプロトコルの急速な実現と普及に影響した。</p>\n<ul>\n<li>オープンである</li>\n<li>実用を重視する</li>\n</ul>\n<h4>特徴:オープンである</h4>\n<p>TCP/IP の仕様を議論する IETF (Internet Engineering Task Force) のメーリングリストには自由に参加できる。</p>\n<p>また仕様や実装も公開されており、自由にアクセスできることもオープンであるという特徴を表している。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-ietf-maling-list.png\" alt=\"IETF のWebページ\"></p>\n<p>画像は<a href=\"https://www.ietf.org/how/lists/\">IETF のあるWebページ</a>の冒頭部分である。\n画像下部分に書かれているように、IETF の議論には、どんな個人でも参加できる。\nこのページの更に下に行くと、実際にメーリングリストに参加する手順が書かれていた。</p>\n<h4>特徴:実用を重視する</h4>\n<p>TCP/IP は仕様策定時に実装することを念頭において進む。\nプロトコルの詳細仕様を決める際には既に通信できる実装が存在し、標準になる頃には既に製品に実装されている。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-tcpip-standardizatin.png\" alt=\"TCP/IP 標準化の手続き\"></p>\n<p>画像はTCP/IP 標準化の手続きを図示したものである。</p>\n<p>以上のように、TCP/IP の標準化手続きには特徴がある。\n普及した要因に、他のプロトコルと比べ、実用を重視したことで動作するプロトコルをはやく作れたこと、オープンな仕様策定の仕組みにより急速な技術革新に対応できたことが考えられる。</p>\n<h4>TCP/IP の仕様</h4>\n<p>標準化しようとするプロトコルは RFC (Request For Comments) と呼ばれるドキュメントになり、<a href=\"http://rfc-editor.org/rfc\">インターネット上で公開</a>される。\n仕様だけでなく、実装や運用、実験に関する情報を含む。</p>\n<p>RFC には番号をがつけられており、一度 RFC になると改定することはない。\n拡張や廃止、新規のプロトコルを定める際には新たな RFC として公開される。\nそのため通し番号は大きくなり、プロトコルごとに番号の統一性があるわけでもないので人間にはわかりづらいところがある。\nこれを助けるため、複数の RFC を指す STD (STanDard), FYI (For Your Information) などの文書単位もある。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-rfc2616.png\" alt=\"rfc2616の冒頭\"></p>\n<p>画像は <a href=\"https://tools.ietf.org/html/rfc2616\">RFC2617</a> の冒頭である。</p>\n<h3>TCP/IP の階層モデル</h3>\n<p>TCP/IP モデルは階層構造になっている。\nネットワークの信頼のある通信を実現するには様々な機能を実装せねばならないので、各層に分けて他層を抽象化することが現実的には必須。</p>\n<p>TCP/IP が普及した理由の一つに柔軟性が挙げられる。\nIP が動作すればそれより下位層は何を使ってもよいし、 TCP / UDP 上で動作すればそれより上位のアプリケーションはなんでもよいのである。</p>\n<p>以下では、 OSI 参照モデルと TCP/IP 階層モデルの対応を示した後、下位層から順に、代表的なプロトコルを示す。</p>\n<h4>OSI 参照モデルとの対応</h4>\n<p>TCP/IP の階層モデルは、アプリケーション層、トランスポート層、インターネット層、リンク層の4階層から成る。\nOSI 参照モデル7階層に完全に対応するものではないが、対応するとしたらつぎのようになる。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-tcpip-protocol-stack.png\" alt=\"OSI 参照モデルと TCP/IP 階層モデルの対応\"></p>\n<h4>ハードウェア</h4>\n<p>OSI 参照モデルで物理層に当たる部分である。</p>\n<p>ハードウェアついては、 TCP/IP プロトコルでは特に指定されていない。\n通信する上での信頼性、セキュリテイ、帯域、遅延、無線/有線、電話回線やイーサネットなど、物理的なものには拘束されず、ネットワークで接続された装置間で通信できればよい。</p>\n<hr/>\n<p>余談だが、 TCP/IP におけるハードウェアとして伝書鳩を用いることもできる。\nRFC にも、<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 鳥類キャリアによるIPデータグラムの伝送企画</a>としてきちんと仕様が存在する。</p>\n<p>これはエイプリルフールに作られたようだが、このような<strike>ふざけた</strike>お茶目な RFC はジョーク RFC と呼ばれ、他にも次のようなものがある。</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc2322\">RFC2322 洗濯バサミDHCPによるIPアドレスの管理手法</a>(<a href=\"http://www.kt.rim.or.jp/~ksk/joke-RFC/rfc2322j.txt\">邦訳</a>)</li>\n<li><a href=\"https://www.ietf.org/rfc/rfc2324.txt\">RFC2324 ハイパーテクストコーヒーポット制御プロトコル</a></li>\n</ul>\n<p>等。 鳩を用意するのは厳しいが、後者2つは実装してみたい気もする。</p>\n<hr/> \n<h4>リンク層</h4>\n<p>ネットワークインタフェース層とも。(マスタリングTCP/IP入門編より)</p>\n<p>デバイスドライバが実装にあたる。(マスタリングTCP/IP入門編より)\nハードウェアの違いを吸収し、上位層で IP が使えるようにする。</p>\n<p>PPP (Point to Point Protocol) もここに含まれる。</p>\n<h4>インターネット層</h4>\n<p>OSI 参照モデルの下から3番目であるネットワーク層に対応する。</p>\n<p>経路制御を行う。\n通信したいホスト間のデータリンクを上位層へ隠し、実際は Hop-by-Hop で行われている通信を End-to-End で行われているようにみせる役割がある。</p>\n<p>代表的な3つのプロトコルを紹介する。</p>\n<h5>IP (Internet Protocol)</h5>\n<p>パケットを転送するために用いられる、インターネット層で代表的なプロトコル。\nIP アドレスでホストを識別し、通信相手までパケットを配送する。\n通信経路の確立を行うが、データが正しく送られる保証はない。</p>\n<h5>ICMP (Internet Control Message Protocol)</h5>\n<p>IP によるパケット転送に誤りがあったり、失敗したときにこれを通知するために用いられる。\n他に、ネットワークが正常に通信できるか診断する機能ももつ。\nping コマンドや traceroute コマンドなどは ICMP パケットを送信することで実現している。</p>\n<h5>ARP (Address Resolution Protocol)</h5>\n<p>IP アドレスと MAC アドレスの対応関係を取得するためのプロトコル。IP が目的地へ通信するために、ARP を用いて途中の各通信経路の解決が行われる。</p>\n<h4>トランスポート層</h4>\n<p>OSI 参照モデルの下から4番目であるトランスポート層に対応する。\nアプリケーション間のプログラムの通信を実現し、場合によってはデータの到達性も保証する。</p>\n<h5>TCP (Transmission Control Protocol)</h5>\n<p>コネクション型のプロトコル。\nデータの到達性を保証し、再送制御や輻輳制御を行う。\nコネクションの確立に3パケット、切断に4パケットの通信が少なくとも必要である。</p>\n<h5>UDP (User Datagram Protocol)</h5>\n<p>コネクションレス型のプロトコル。\nデータの到達性を保証しない。\nパケット数の少ない通信、2者間ではないブロードキャスト/マルチキャスト通信, データが多少抜け落ちても問題ない動画や音声の通信に向く。</p>\n<h4>アプリケーション層</h4>\n<p>OSI 参照モデルの5-7階層に相当する。\nTCP/IP上では様々なアプリケーションを動かすことができる。\n以下では、それぞれのアプリケーションごとに使われるプロトコルを紹介する。</p>\n<h5>WWW (World Wide Web)</h5>\n<p>HTML (Hyper Text Markup Language) 文書をはじめとするデータを、Webブラウザを介して HTTP (Hyper Text Transfer Protocol) / HTTPS ( - Secure) で受信し閲覧する。</p>\n<p>(QUIC などの例外を除いて)主に TCP 上で動作する。</p>\n<h5>電子メール</h5>\n<p>MIME (Multipurpose Internet Mail Extensions) (マイム)形式のデータを、専用のプロトコルを用いて送受信する。</p>\n<p>メールの送受信には SMTP (Simple Mail Transfer Protocol), POP3 (Post Office Protocol version 3), IMAP (Internet Message Access Protocol)などが用いられる。</p>\n<p>送信者はメールを SMTP サーバを経由して相手方の POP3 / IMAP サーバへ送信する。\n受信者は POP3 / IMAP サーバよりメールを受け取る。</p>\n<p>TCP 上で動作する。</p>\n<h5>ファイル転送</h5>\n<p>FTP (File Transfer Protocol) / SFTP (Secure - )によりファイルを送受信する</p>\n<p>TCP 上で動作する。</p>\n<h5>遠隔ログイン</h5>\n<p>TELNET (TELetypewriter NETwork) や SSH (Secure SHell) を用いて離れたコンピュータにログインする。</p>\n<p>Linux で GUI を実現するためによく用いられる X Window System の X Protocol も TCP/IP 上で実現している。</p>\n<p>TELNET や SSH 等は TCP 上で動作する。\nX Protocol の中でも XDMCP (X Display Manager Control Protocol) は UDP。</p>\n<h5>ネットワーク管理</h5>\n<p>SNMP (Simple Network Management Protocol) など。</p>\n<p>ネットワーク上のルータやスイッチなどの管理対象(SNMP エージェント)を管理端末(SNMP マネージャ)が管理する。\nパケットの量や機器の温度などを管理できる。\nネットワーク機器の動作を妨げないため、また通信に必要なパケットが少ないため、UDP で動作する。</p>\n<h3>実際の通信</h3>\n<p>通信を行う際、送信側は上位層から順にその層で必要となる管理情報を含むヘッダを付加してカプセル化する。\n受信側は下位層から順にヘッダを解釈して除去し上位層に渡す。</p>\n<p>例えばWebページを閲覧する際は、サーバ側で HTML 文書に HTTP ヘッダを付加し、  TCP ヘッダを付加し、 IP ヘッダを付加し、イーサネットフレームのヘッダを付加し送信される。\nクライアントはイーサネットフレームのヘッダを解釈し、 IP ヘッダを解釈し、 TCP ヘッダを解釈し、 HTTP ヘッダを解釈し、 HTML 文章を画面に描画する。</p>\n<p><img src=\"https://blob.yammer.jp/internet-tcpip-encapsulation.png\" alt=\"実際の通信のカプセル化\"></p>\n<h2>まとめ</h2>\n<p>以上の内容をまとめると次のようになる。</p>\n<ul>\n<li>インターネットは TCP/IP で接続される世界全体のネットワークのこと</li>\n<li>TCP/IP は IP をはじめとするプロトコル群</li>\n<li>TCP/IP はオープンな議論で, 実用重視の仕様策定を行っている</li>\n<li>TCP/IP の各プロトコルは階層モデルでわけることができる</li>\n</ul>\n<p>ネットワーク全体について俯瞰して振り返ることはあまりないので、スライドを作ったのに合わせて文章にも起こしてみた。\nこういった復習を多く含む地道な勉強も、怠らずにやっていきたい。</p>\n<hr>\n<p>追記: (2020/10/04) 不要な改行タグを削除</p>","_history":[{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-05-15T23:37:00+09:00","tags":["インターネット","TCP/IP"]},{"id":"https://memo.yammer.jp/posts/job-hunting-6-month-ago","url":"https://memo.yammer.jp/posts/job-hunting-6-month-ago","title":"就活を終えて半年経って思うこと。","summary":"進路を迷っている知人に就活のことを聞かれ、自分が何を考えて決めたのかを、主に次の視点で綴ったので、ここにも記します。 就職先の決め手 なぜエンジニアとして働くのか なぜ大学院に進学しなかったのか 就職先の決め手 就活時に重視していたところはつぎのようなことがあります。 文化 技術的な成長 会社のサービスに自分が貢献したいと思えるか 会社を決めた理由は、ざっくりまとめると「自分が最も成長できそうだから」でしょうか。 就職予定の会社は、独特の企業文化が特徴です。これが自分が働くモチベーション高く保つことにつながると考えました。 技術が身につく環境でも、自分に合わない環境で働くのは長続きしないでしょ","content_html":"<p>進路を迷っている知人に就活のことを聞かれ、自分が何を考えて決めたのかを、主に次の視点で綴ったので、ここにも記します。</p>\n<ul>\n<li>就職先の決め手</li>\n<li>なぜエンジニアとして働くのか</li>\n<li>なぜ大学院に進学しなかったのか</li>\n</ul>\n<h2>就職先の決め手</h2>\n<p>就活時に重視していたところはつぎのようなことがあります。</p>\n<ul>\n<li>文化</li>\n<li>技術的な成長</li>\n<li>会社のサービスに自分が貢献したいと思えるか</li>\n</ul>\n<p>会社を決めた理由は、ざっくりまとめると「自分が最も成長できそうだから」でしょうか。\n就職予定の会社は、独特の企業文化が特徴です。これが自分が働くモチベーション高く保つことにつながると考えました。\n技術が身につく環境でも、自分に合わない環境で働くのは長続きしないでしょう。しかしこの会社でなら正直に過ごせそう、自分が成長の努力をしながら楽しんで働けそうだと感じたからです。</p>\n<p>新卒時点の給料はそこまで重視していなくて、技術が身につけばいくらでも給料を高められるだろうから、自分が成長できること(長期的に見て稼げること)のほうが大事だと考えていました。</p>\n<p>あとは、会社規模も関係しています。決めた会社は社内のエンジニアコミュニティが強く、その中で高めあっているところが魅力に写りました。</p>\n<p>他に受けていた会社で、エンジニアが数人ほどの企業もあったのですが、私の技術的な未熟さゆえに選考を断念しました。\n(極端に言うと幅広い技術や一歩先の技術を身につける余裕を自分に持てないのではないかとの懸念がありました。)\n規模が小さいほうが裁量があったり、ビジネスサイドにも足をつっこんだりしやすい側面はありそうです。この魅力を重視する方は私とは違う決断をするでしょう。)</p>\n<p>逆にもっと大きな会社だと、細分化されすぎていて私には楽しくないようにみえました。(エンジニアリングに関してはいろんなことに足を突っ込んでみたい。)\n会社規模は選考がある程度進んでから、比較するようになって考えだしました。</p>\n<h2>エンジニアになるかどうか</h2>\n<p>私はわりと初期の段階でWebエンジニアに絞ってしまっていました。とりあえず行動してみて、納得できなければ変えるつもりでしたが、働くイメージが湧いてきたのでそのまま方向を変えずに就活をつづけました。</p>\n<p>自分がどれだけ技術を好きになれるか、勉強を苦に思わないかが自分の中での判断基準です。世の中には自分よりコンピュータが好きな人はたくさんいるし、上を見たらきりはないので、現時点での技術力と熱意が他人に負けているからダメという選び方はしていません。\n私にとって、他の仕事よりWebエンジニアとして働いたほうが、仕事を楽しめてかつ社会に出せる価値が多そうだと判断し決めました。</p>\n<p>(Web)エンジニアになるのはある意味賭けで、専門的な技術は身につくけど、いざとなれば転職で入ってこれる業界でもあるので、難しいですね。</p>\n<p>エンジニアといっても、ビジネスやデザインのわかるエンジニア、他方、技術に尖ったエンジニアをより欲しているところ、育てようとしているところはたくさんあるだろうし、非常に多種多様な姿があるだろうから、自分にあったキャリアを見つけるのは大変でしょう。さらに世の中には本当に様々な仕事があり、Webエンジニア、プログラマーだけをを見ているのは勿体無いかもしれません。</p>\n<p>私なりにいくつかの選択肢を考える中で、自分に興味のある領域を深められる職・会社としていまの進路を選びました。</p>\n<h2>大学院に行くかどうか</h2>\n<p>就活を始めるときに、内心「良さげな企業に受かったら就職、うまく行かなかったら院にいこうか」と考えましたが、まず「とりあえず就職前提で動こう」(じゃないと何もしなそう)と自分に言い聞かせました。</p>\n<p>就活をしていくうちに、良い会社に出会えたこと、(まだ始まっていなかったが)大学での研究よりもWeb周りのことを触っている方が楽しいだろうと思ったことから就職へ傾きました。\n内心、面接が重なると早く就活を抜け出したい、(院卒で)もう一回やるのはちょっと大変という気持ちもありました。\n就活は真剣にキャリアを考える機会として面白い面もあるのですが、続けていると気持ちが疲れてくる面もあります。</p>\n<p>いまの会社に受かってなければ大学院に進学していたかもしれません。\n真っ当な理由「研究がしたい」 はもちろん、就活を先延ばしにする意味でも大学院進学もありだったなとは今も思ってます。(院卒に怒られる)。</p>\n<p>Web業界は新卒といえど、(私は経験ないですが)長期インターンに行っている人が結構いたり、ある程度の技術的素養が求められている会社もそこそこあるので、就活が先延ばしになると受かりやすくなる面はあるかもしれません。\n(どこかで読みましたがインターンに受かるコツはインターンに受かることだそうです。)\n大学院に進学すれば、インターンなどに参加する時間的な猶予ができるともとれます。</p>\n<hr/>\n<p>つたない文章ですが、私が考えていたことを思い返してみました。</p>\n<p>就活をはじめてから、自分がどんな価値を見いだせるか、どんな環境で働きたいか、あらためて何度も考えました。\n特に面接や面談はその考えが深まる、改まる場であって、このような機会を設けてくださった方々に感謝しています。</p>","_history":[{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-14T00:21:15+09:00","message":"Add post\n","hash":"a8ffbbb92c446493c9f7dafb313af6488f58d9b9"}],"date_published":"2020-05-13T23:54:22+09:00","tags":["お気持ち"]},{"id":"https://memo.yammer.jp/posts/plist","url":"https://memo.yammer.jp/posts/plist","title":"(余談) User Defaultsとproperty list(plist)","summary":"Mac OS XのUser Defaultsを変更するためのシェルスクリプトを作るツール pdefを制作した。(解説記事: Macの設定を自動化するdefaultsコマンドと、それを助けるpdef) これを作る際にProperty listについて学んだことを記す。 User Defaults User Defaultsは、MacOSXやiOSにおける各アプリケーションが設定などを保持するためのデータベースである。 User Defaultsは、各アプリケーション(正確にはアプリケーションの持つドメイン)ごとにProperty listとして記録される。 普段は各アプリケーションを通して読み書","content_html":"<p>Mac OS XのUser Defaultsを変更するためのシェルスクリプトを作るツール <a href=\"https://github.com/yammerjp/pdef\">pdef</a>を制作した。(解説記事: <a href=\"/posts/pdef/\">Macの設定を自動化するdefaultsコマンドと、それを助けるpdef</a>)</p>\n<p>これを作る際にProperty listについて学んだことを記す。</p>\n<h2>User Defaults</h2>\n<p>User Defaultsは、MacOSXやiOSにおける各アプリケーションが設定などを保持するためのデータベースである。\nUser Defaultsは、各アプリケーション(正確にはアプリケーションの持つドメイン)ごとにProperty listとして記録される。\n普段は各アプリケーションを通して読み書きされるが、ターミナル上からアクセスできる<code>$ defaults</code>コマンドも提供されている。(後述)</p>\n<h2>Property list</h2>\n<p>User Defaultsに使われているproperty list(以下plist)は、Mac OS Xにおいてオブジェクトの永続化におけるファイル形式としてよく用いられている。\n例えば、iOSアプリを開発する際に自動生成されてXcode上から見える<code>info.plist</code>がその例だ。</p>\n<p>plistはNeXTSTEP時代から続く歴史あるフォーマットらしい。時代背景も相まってファイルの保存形式は多数ある(後述)。</p>\n<h3>論理構造</h3>\n<p>plistはJSON等と同様のキーバリュー形式の論理構造を取る。\nキーに一対一対応する値が存在し、値は即値の他に入れ子状にデータを保持できる。</p>\n<p>値のとりうる型は次の通り。</p>\n<ul>\n<li>辞書(dictionary)</li>\n<li>配列(array)</li>\n<li>文字列(string)</li>\n<li>数値(number(integer and float))</li>\n<li>日付(date)</li>\n<li>バイナリ(binary data)</li>\n<li>真偽値(Boolean value)</li>\n</ul>\n<p>この中でも辞書型と配列型は特殊で、辞書型はキーと値の組を、配列型は値を、子にもつことができる。</p>\n<p>JSONに無い型(日付,バイナリ)が存在するので、完全な相互変換は不可。</p>\n<p>参考: <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/PropertyList.html\">Property list - Apple Developper Documentation</a> (plist関する公式のドキュメント)</p>\n<h3>保存形式</h3>\n<h4>old-style ASCII形式</h4>\n<p>テキストベースで、可読性が高いのがこの形式。NeXT形式とも呼ばれる?。NeXTSTEP時代にできた。\n作られた当時、文字列、配列、ディクショナリ、そしてバイナリデータのみを表現できたらしい。\nシンプルなフォーマットであるが、型情報がなく、型の判別が難しい。</p>\n<p><code>$ defaults read</code>コマンドで出力される形式であり、現在では主にここでみられる。</p>\n<p>old-style ASCII形式の例として、あるplistをold-style ASCIIで表した表記を以下に示す。</p>\n<pre><code class=\"hljs language-text\">{\n    \"boolean-example\" = 0;\n    fuga =     {\n        p0y0p0y0 = 0;\n        punipuni = value;\n    };\n    hoge = helloworld;\n    wara =     (\n        {length = 8, bytes = 0x0123456789abcdef},\n        123,\n        \"0.5\",\n        1,\n        \"2019-09-16 05:45:42 +0000\"\n    );\n}\n</code></pre>\n<h4>XML形式</h4>\n<p>plistのデータ構造をXML形式で表現した形式。\n前述のold-style ASCIIのように欠けた情報がなく、なおかつ人間にも読めるのでplistをこねくり回す際にはお世話になるだろう。</p>\n<p>それぞれの型におけるxml上での表記は次の通り</p>\n<ul>\n<li>辞書: <code>&#x3C;dict> &#x3C;key>keystring&#x3C;/key> [value] (繰り返し) &#x3C;/dict></code></li>\n<li>配列: <code>&#x3C;array> [vaule] (繰り返し) &#x3C;/array></code></li>\n<li>文字列: <code>&#x3C;string>value&#x3C;/string></code></li>\n<li>数値(整数): <code>&#x3C;integer>124234&#x3C;/integer></code></li>\n<li>数値(浮動小数点数): <code>&#x3C;real>0.43&#x3C;/real></code></li>\n<li>日付: <code>&#x3C;date>2019-09-16T05:45:42Z&#x3C;/date></code> (ISO8601と思われる)</li>\n<li>バイナリ: <code>&#x3C;data> ASNFZ4mrze8= &#x3C;/data></code> (base64でエンコード済みの文字列)</li>\n<li>真偽値: <code>&#x3C;true/></code>または<code>&#x3C;false/></code></li>\n</ul>\n<p>XML形式の例として、先程示したplistをXMLで表した表記を以下に示す。</p>\n<pre><code class=\"hljs language-xml\">&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n&#x3C;plist version=\"1.0\">\n&#x3C;dict>\n  &#x3C;key>hoge&#x3C;/key>\n  &#x3C;string>helloworld&#x3C;/string>\n  &#x3C;key>boolean-example&#x3C;/key>\n  &#x3C;false/>\n  &#x3C;key>wara&#x3C;/key>\n  &#x3C;array>\n    &#x3C;data>\n    ASNFZ4mrze8=\n    &#x3C;/data>\n    &#x3C;integer>123&#x3C;/integer>\n    &#x3C;real>0.5&#x3C;/real>\n    &#x3C;true/>\n    &#x3C;date>2019-09-16T05:45:42Z&#x3C;/date>\n  &#x3C;/array>\n  &#x3C;key>fuga&#x3C;/key>\n  &#x3C;dict>\n    &#x3C;key>punipuni&#x3C;/key>\n    &#x3C;string>value&#x3C;/string>\n    &#x3C;key>p0y0p0y0&#x3C;/key>\n    &#x3C;string>0&#x3C;/string>\n  &#x3C;/dict>\n&#x3C;/dict>\n&#x3C;/plist>\n</code></pre>\n<h4>binary形式</h4>\n<p>テキストベースではなく人間が用意に読めなくした代わりに、ファイルサイズの削減と読み書きを高速化ができる形式。</p>\n<p>ここまでで述べたようにplistはバイナリデータも含むことができる。\nそのため、大きなバイナリデータを含むplistについては、old-style ASCIIやxmlでの表現は冗長で、ファイルが大きくなる、読み書きが遅くなるなどの問題が生まれる。\nこれを避けるためにバイナリ形式でデータを書き出すことができる。具体的な形式は未調査。</p>\n<p>おそらくあまり出会うことはないが、バイナリ形式には現在使われていない古い別形式もあるらしい。</p>\n<p>参考:  Plistの歴史</p>\n<ul>\n<li><a href=\"https://www.itmedia.co.jp/enterprise/articles/0705/14/news013_2.html\">第3回 plist（プロパティリスト）とFoundation【前編】 - ITmedia</a></li>\n<li><a href=\"https://www.itmedia.co.jp/enterprise/articles/0705/30/news011.html\">第4回 plist（プロパティリスト）とFoundation【後編】 - ITmedia</a></li>\n</ul>\n<h3>plistを操作できるデフォルトツール</h3>\n<p>plistを検証、確認、変更するコマンドラインツールが、Mac OS Xにはデフォルトでいくつか入っている。</p>\n<p><code>defaults</code>, <code>pl</code>, <code>plutil</code>, <code>/usr/libexec/PlistBuddy</code>を紹介する。</p>\n<h4>defaults</h4>\n<p>User Defaultsを読み書きするためのツール</p>\n<p>代表的な<code>read</code>,<code>write</code>,<code>import</code>,<code>export</code>のハマりどころを記す。</p>\n<ul>\n<li><code>$ defaults read</code></li>\n</ul>\n<p>\"ほぼ\"old-style ASCII形式で、User Defaultsを標準出力に出力する。\nold-style ASCIIには型情報を含まないので、型のみを調べる<code>$ defaults read-type</code>もある。</p>\n<p><strong>出力は正しい文法のold-style ASCII形式のplistとは限らない。大きなサイズのdata型の値は、一部省略して出力され、この部分は文法規則に反する。</strong>\n(これが原因で最初plistを正しく読み込めずに困った)</p>\n<p>readの後ろに引数を渡さないとすべてドメインのUser Defaultsを出力する。\n1コマンドでまとめて出力できるのは筆者の知る限り<code>$ defaults read</code>のみ。</p>\n<p>ネストしている深い値を指定して読むことはできない。</p>\n<ul>\n<li><code>$ defaults write</code></li>\n</ul>\n<p>引数にで値を指定して、User Defaultsに書き込める。\n型を区別するオプションを指定できる。</p>\n<p>data型は<code>-data</code>オプションをつけた上で、valueを16進数表記で記述する。</p>\n<p>date型は<code>-date</code>オプションをつけた上で、valueをISO8601形式で記述する。</p>\n<p>ネストしている深い値を指定して書き込むことはできない。</p>\n<ul>\n<li><code>$ defaults export</code></li>\n</ul>\n<p>特定のドメインのUser Defualtsをxml形式またはバイナリ形式で出力する。</p>\n<p>ドメインは必ず指定する必要があり、<code>$ defaults read</code>のようにすべてのドメインのUser Defaultsを一括して出力することはできない。</p>\n<ul>\n<li><code>$ defaults import</code></li>\n</ul>\n<p>xml形式またはバイナリ形式でUser Defaultsに書き込める。</p>\n<h4>pl</h4>\n<p>old-style ASCII形式のplistの文法をチェックするツール。</p>\n<h4>plutil</h4>\n<p>XML,binary形式のplistの文法をチェックするツール。</p>\n<p>値の読み書き/削除ができるが、深いネストしている深い値を指定して操作することはできない。</p>\n<ul>\n<li><a href=\"https://qiita.com/trakwkbys/items/a94c4d43342e96352bde\">コマンドラインでplistを操作（データ追加・編集・削除） - Qiita(@trakwkbys)</a></li>\n</ul>\n<h4>/usr/libexec/PlistBuddy</h4>\n<p>ネストしている深い値を直接指定して読み書き/削除できるスグレモノ。</p>\n<p>data型を書き込むときは、文字列がそのままbyte列として読み込まれるらしい。\nよって書き込める値が制限される。\nネストが深い場所にあるdata型の値を書き込む際は、xmlファイルに直接base64エンコードした文字列を書き込むなどすると良い。</p>\n<p>date型を書き込むときは、<code>Mon Apr 20 20:52:00 2020 JST</code>のような形式を渡す。\n(PlistBuddyのdata型の値書き込みに関するドキュメントは見つけられなかったが、<a href=\"https://github.com/darlinghq/darling/blob/master/src/PlistBuddy/PlistBuddy.c\">darling</a>の実装を参考にして実験し見つけた。)</p>\n<h2>plistファイルを読み書きする際の、Swiftでの実装</h2>\n<p>今回作成した<a href=\"https://github.com/yammerjp/pdef\">pdef</a>において、Swiftでplistを扱う際に肝になった部分を実装を交えて紹介する。</p>\n<p>ちなみにPythonでは<a href=\"https://docs.python.org/ja/3/library/plistlib.html\">plistlib</a>が使えるようだ。</p>\n<h3>plistファイル全体をNSDictionaryとして読み込む</h3>\n<p>plistファイルをSwiftの変数として扱えるように取り込むのは非常に簡単。\n下記のサンプルコードのように一行で読み込める。</p>\n<p>ファイル形式がold-style ASCIIだろうがxmlだろうがbinaryだろうが、勝手に判断してよしなにしてくれる。\n(ただし<a href=\"#defaults\">ハマりどころ</a>に注意)</p>\n<pre><code class=\"hljs language-swift\">// https://github.com/yammerjp/pdef/blob/516f0215306b6ca206ebad646190ba74bd5d4b17/src/loadFile.swift\n// 以上より一部抜粋\n\nimport Foundation\n\nguard let plist = NSDictionary(contentsOfFile: path) else {\n  ErrorMessage(\"Failed to load property list '\\(path)'\")\n  exit(1)\n}\n</code></pre>\n<p>pdefをSwiftで実装したのはplistを扱うのが楽だろうからという目論見だったが、それが一番功を奏したのがこの部分。</p>\n<h3>型を判別する</h3>\n<p>上記の方法でplistファイルをSwift内の変数として読み込んでも、型はすべてAnyとして扱われてしまう。\nこれは困るので、値を次のサンプルコードの関数<code>GetPlistType(value: Any) -> PlistType</code>に与えることで型を調べられる。\n型がわかればキャストできるので、その後Swiftで扱うのが楽になる。</p>\n<pre><code class=\"hljs language-swift\">// https://github.com/yammerjp/pdef/blob/516f0215306b6ca206ebad646190ba74bd5d4b17/src/plist.swift\n// 以上より一部抜粋、書き換え\n\nimport Foundation\n\nenum PlistType: Int {\n  case string\n  case real\n  case integer\n  case bool\n  case data\n  case date\n  case array\n  case dict\n}\n\nfunc GetPlistType(value: Any) -> PlistType {\n  let typeID = CFGetTypeID(value as CFTypeRef?)\n  switch typeID {\n  case CFNumberGetTypeID():\n    if value is NSInteger {\n      return .integer\n    }\n    return .real\n  case CFArrayGetTypeID():\n    return .array\n  case CFDictionaryGetTypeID():\n    return .dict\n  case CFStringGetTypeID():\n    return .string\n  case CFDataGetTypeID():\n    return .data\n  case CFDateGetTypeID():\n    return .date\n  case CFBooleanGetTypeID():\n    return .bool\n  default:\n    exit(1)\n  }\n}\n</code></pre>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/corefoundation/cftypeid\">CFTypeID - Apple Developper Documantation</a>(Property listの型をSwiftで判別する)</li>\n<li><a href=\"https://qiita.com/junpluse/items/e334e511457f8c133de9\">Swift.Any as? CFType - Qiita(@junpluse)</a>(Property listの型をSwiftで判別する)</li>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/Inspecting.html\">Inspecting Objects - Apple Developper Docuumentation</a>(Property listの型をSwiftで判別する)</li>\n</ul>\n<h2>おわりに</h2>\n<p>Swiftでplistを扱うための情報を集めるのに時間がかかったので、まとめる記事を書くに至った。</p>\n<p>この記事は<a href=\"/posts/pdef/\">Macの設定を自動化するdefaultsコマンドと、それを助けるpdef</a>(pdefの紹介記事)の余談と補足として作った。\nここまでの内容を実装して作った、User Defaults書き換えを支援するツールである<a href=\"https://github.com/yammerjp/pdef\">pdef</a>も興味があれば使ってみてほしい。</p>\n<p>User DefaultsだけでなくProperty listをSwiftで扱う際に、どこから手をつけてよいかわからない人が概要を掴むのにこの記事が役立てば幸いだ。</p>\n<hr>\n<p>追記: (2020/10/04) pdefの記事へのリンクを相対リンクに修正</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T22:43:27+09:00","message":"Fix internal links\n","hash":"698524967ae01574a8037c627a8b083e253a04f2"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-05-02T18:52:59+09:00","message":"Delete unnecessary text\n","hash":"b0c059c4550ee771770fd379ca3784c7a200ea1e"},{"date":"2020-05-02T16:27:03+09:00","message":"Draft -> Publish\n","hash":"3c66a3806802300f6bcf4b8e94eaa74510b4bcf1"},{"date":"2020-05-02T16:24:57+09:00","message":"Fix typo\n","hash":"10de6b6d5a073094ad62202ad3173f9825829c96"},{"date":"2020-05-02T16:24:05+09:00","message":"Fix link\n","hash":"79560c53fe90e51cc5ef0eff7e4645ecf89d3d5d"},{"date":"2020-05-02T16:20:31+09:00","message":"Fix plist.md\n","hash":"63789db2e633ff7668e68a82823e26d16818aec1"},{"date":"2020-05-02T16:11:13+09:00","message":"Delete  description\n","hash":"75b44add9b7f39b14eccba471ba1b2dc4ea87f21"},{"date":"2020-05-02T15:49:19+09:00","message":"Add old-style-ascii sample (draft)\n","hash":"c3d9ce2b0f8fe9a80a42424b8e43c29bbcafe8e3"},{"date":"2020-05-02T15:38:50+09:00","message":"Update plist.md (draft)\n","hash":"62c4e30b2e568c26d086fcc1564491b25f30934b"},{"date":"2020-05-02T11:58:38+09:00","message":"Update plist.md (draft)\n","hash":"274345589b379cea58a03f64e56f38a390c12ee5"},{"date":"2020-05-01T01:02:11+09:00","message":"Add draft post. plist\n","hash":"2e71607b56bddeb8a67e337b81526238b3c2447f"}],"date_published":"2020-05-02T16:26:00+09:00","tags":["macOS","plist"]},{"id":"https://memo.yammer.jp/posts/pdef","url":"https://memo.yammer.jp/posts/pdef","title":"Macの設定を自動化するdefaultsコマンドと、それを助けるpdef","summary":"tl;dr Mac OS XのUser Defaultsの差分をdefaultsコマンドの形式に変換するコマンドラインツール、\"pdef\"を作った。 本題(pdefでシェルスクリプトを作る)まで飛ばす defaultsコマンドでMacの設定を自動化する Macには、OSや各アプリの設定を保存するUser Defaultsというデータベースがある。 例えばドックの大きさやメニューバーに表示するアイコン、Safariの開発者ツールの有効化フラグ、(使用している場合は)サードパーティ製アプリケーションの設定情報なども記録されている。 これらのUser Defaultsの項目は普通、GUI上の設定画面","content_html":"<p>tl;dr Mac OS XのUser Defaultsの差分をdefaultsコマンドの形式に変換するコマンドラインツール、<a href=\"https://github.com/yammerjp/pdef\">\"pdef\"</a>を作った。</p>\n<p><a href=\"#pdef%E3%81%A7%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">本題(pdefでシェルスクリプトを作る)まで飛ばす</a></p>\n<h2>defaultsコマンドでMacの設定を自動化する</h2>\n<p>Macには、OSや各アプリの設定を保存するUser Defaultsというデータベースがある。\n例えばドックの大きさやメニューバーに表示するアイコン、Safariの開発者ツールの有効化フラグ、(使用している場合は)サードパーティ製アプリケーションの設定情報なども記録されている。</p>\n<p>これらのUser Defaultsの項目は普通、GUI上の設定画面を変更することでデータを読み書きするが、ターミナル上から操作するdefaultsコマンドなるものもMacに標準で入っている。</p>\n<p>これを用いることで、Macの初期設定を自動化するシェルスクリプトがよく作られているようだ。</p>\n<p>たとえば、次のスクリプトは、Finder(ファイラー)において、隠しファイル・隠しフォルダを表示する設定を有効にする。</p>\n<pre><code class=\"hljs language-bash\">#!/bin/bash\ndefaults write com.apple.finder AppleShowAllFiles YES\n</code></pre>\n<p>(スクリプト実行後に<code>$ killall Finder</code>としてアプリケーションを再起動する必要がある。)</p>\n<p>このようなdefaultsコマンドによる設定例はブログなどで見つけることができる。\nそれらをまとめて自分用のシェルスクリプトを作っておけば、Macを初期設定する際にすぐに自分好みの環境にすることができるというわけだ。</p>\n<p>GUIからの設定は項目が増えると手間がかかるし同じ環境を再現するのは大変なので、自動化できるのはありがたい。</p>\n<p>様々なdefaultsコマンドの一例を記載したサイト</p>\n<ul>\n<li><a href=\"https://neos21.hatenablog.com/entry/2019/01/10/080000\">MacOS で設定する defaults コマンドをまとめてみた - Corredor</a></li>\n<li><a href=\"https://qiita.com/ry0f/items/f2c75f0a77b1012182d6\">OS X を自分色に染める w/ defaults - Qiita(@ry0f)</a></li>\n<li><a href=\"https://qiita.com/idtkb/items/68c44c6f7ba1e15924bb\">Macの環境設定 - Qiita(@idtkb)</a></li>\n<li><a href=\"https://github.com/mathiasbynens/dotfiles/blob/master/.macos\">.macos - GitHub(mathiasbynens/dotfiles)</a></li>\n</ul>\n<h2>defaultsコマンドの引数を調べる</h2>\n<p>ところで、このdefaultsコマンドの引数はどのようにして知るのだろうか。\n先程のサイトに載っているものはよいものの、他の設定項目はdefaultsコマンドにどんな引数を渡せばよいのだろうか。\n私の調べた限りでは、公式なまとまった情報はないようだった。</p>\n<p>しかし、愚直に調査する方法はある。</p>\n<p>defaultsコマンドには、<code>$ defaults write</code>の他に<code>$ defaults read</code>というサブコマンドもある。これによりUser Defaultsを閲覧できる。\nGUI上の操作によってUser Defaultsにどんな変更が加わるか、変更前後の<code>$ defaults read</code>の出力を比較すればわかる。</p>\n<pre><code class=\"hljs language-shell\">$ defaults read > before.txt\n# GUI上で設定を変更する\n$ defaults read > after.txt\n\n$ diff before.txt after.txt\n</code></pre>\n<p>diffで該当した部分を中心に、defaultsコマンドで指定する値を抜き出せばよい。</p>\n<p>が、<code>$ defaults read</code>の出力結果を読むのが面倒なので、これを自動で行うツールを作成した。</p>\n<p>(<code>$ defaults read</code>の出力形式は、property list(old-style ascii)である。\n<a href=\"/posts/plist/\">(余談) UserDefaultsとplistについて</a>として別記事にまとめたので、plistについてはこちらを参照してほしい。)</p>\n<h2>pdefでシェルスクリプトを作る</h2>\n<p>閑話休題</p>\n<h3>pdefとは</h3>\n<p><a href=\"https://github.com/yammerjp/pdef\">pdef</a> (pi:def) は、User Defaultsの設定前後の差分から、defaultsコマンドの引数を調べてくれる。</p>\n<p>引数に<code>$ defaults read</code>の出力を記録したファイルのパスを与える。 (第一引数に設定前、第二引数に設定後)\nすると、設定前後の差分から、シェルスクリプト(defaultsコマンドを並べたもの)を出力する。</p>\n<h3>インストール</h3>\n<pre><code class=\"hljs language-shell\">$ git clone https://github.com/yammerjp/pdef.git\n$ cd pdef\n$ make\n$ cp bin/pdef /user/local/bin\n</code></pre>\n<h3>使用例</h3>\n<p>次のように使う。</p>\n<pre><code class=\"hljs language-shell\"># 設定を記録する\n\n$ defaults read > before.txt\n# [GUI上で設定を変更する]\n$ defaults read > after.txt\n$ pdef before.txt after.txt > patch.sh\n\n# 設定を復元する\n\n$ bash patch.sh\n</code></pre>\n<p>使用例として、メニューバーの音量アイコンを表示/非表示している様子。</p>\n<p><img src=\"https://blob.yammer.jp/pdef-demo.gif\" alt=\"使用例のスクリーンショット\"></p>\n<p>Mac上で設定を変更するときに、前後で<code>$ defaults read</code>でUser Defaultsの内容を書き出しておくと、pdefを使って再設定が楽にできるという算段である。</p>\n<h3>オプション</h3>\n<p><code>--domain</code>オプションをつけると、特定のアプリのUser Defaultsも比較できる。(<code>$ defaults export hogehoge -</code>の出力等)\n<code>--domain</code>オプションをつけた際は、old-style asciiのplist以外にも、xmlやバイナリも読み込める。</p>\n<p>実行例</p>\n<pre><code class=\"hljs language-shell\">$ defaults export com.apple.systemuiserver - > before.xml\n# メニューバーの変更(音量アイコンの表示/非表示等)\n$ defaults export com.apple.systemuiserver - > after.xml\n$ pdef --domain com.apple.systemuiserver before.xml after.xml\n</code></pre>\n<h3>例外</h3>\n<p>pdefは現在は以下のようなものには対応していない。</p>\n<ul>\n<li>data型の長い値 ( --domainオプションを付加すれば可能)</li>\n<li>keyのrename</li>\n<li>追加と削除が混在した差分</li>\n</ul>\n<h2>さいごに</h2>\n<p>インターネットの海に流れるdefaultsコマンドの設定例の他に、このツールで調べた設定を追加して、自分専用のMac設定用スクリプトの作成に役立てていただければ幸いだ。</p>\n<p>私のdefaultsコマンドを集めた<a href=\"https://github.com/yammerjp/dotfiles/tree/master/bin/user-default\">シェルスクリプトはこちら</a>。</p>\n<hr>\n<p>追記: (2020/10/04) plistへの記事リンクを相対リンクに修正</p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-05-01T00:52:47+09:00","tags":["macOS","plist"]},{"id":"https://memo.yammer.jp/posts/macos-defaults","url":"https://memo.yammer.jp/posts/macos-defaults","title":"macOSでの各種設定を自動化するdefaultsコマンド","summary":"研究室や就職先などでのコンピュータのセットアップのために、3月頃からdotfilesを構築している。 その流れでdefaultsコマンドを知ったので、その記録と使い方、調べ方を残しておく。。 defaultsコマンドとは macOSにおける環境設定や各アプリケーションの設定は.plist拡張子のプロパティリストと言われるファイルに記録される。 このプロパティリストを読み書きするためにmacOSに標準で搭載されているのがdefaultsコマンドである。 (詳細は$ man defaultsしてください。) これを利用して、OS全体の環境設定やアプリケーションの設定を自動化するスクリプトをつくって","content_html":"<p>研究室や就職先などでのコンピュータのセットアップのために、3月頃から<a href=\"https://github.com/yammerjp/dotfiles\">dotfiles</a>を構築している。</p>\n<p>その流れでdefaultsコマンドを知ったので、その記録と使い方、調べ方を残しておく。。</p>\n<h2>defaultsコマンドとは</h2>\n<p>macOSにおける環境設定や各アプリケーションの設定は.plist拡張子の<a href=\"https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html\">プロパティリスト</a>と言われるファイルに記録される。\nこのプロパティリストを読み書きするためにmacOSに標準で搭載されているのがdefaultsコマンドである。\n(詳細は<code>$ man defaults</code>してください。)</p>\n<p>これを利用して、OS全体の環境設定やアプリケーションの設定を自動化するスクリプトをつくっている。(<a href=\"https://github.com/yammerjp/dotfiles/blob/master/bin/macos-defaults.sh\">実際に作ったスクリプト - yammerjp/dotfiles - GitHub</a>)</p>\n<p>今回はこのスクリプトを構築するための話。</p>\n<p>参考: <a href=\"https://support.apple.com/ja-jp/guide/terminal/apda49a1bb2-577e-4721-8f25-ffc0836f6997/mac\">Macの「ターミナル」でプロパティリストを編集する - ターミナルユーザガイド - Apple</a></p>\n<h2>他人の設定を拝借する</h2>\n<p>ネット上に他の人がどのコマンドを叩くとどの設定が変更できるかを調べてすでにまとめてくれたものがある。これを拝借するのが第一の手。</p>\n<p>公式でどこかに情報がまとまっていればよいのだが、「公式な」設定変更のやり方はGUIから変えることだからか、そんな丁寧なマニュアルはなさそう。</p>\n<ul>\n<li><a href=\"https://amasuda.xyz/post/2016-10-23-mastering-mac-defaults-command/\">MacOS defaults コマンドをマスターする - Think Abstract</a></li>\n<li><a href=\"https://neos21.hatenablog.com/entry/2019/01/10/080000\">MacOS で設定する defaults コマンドをまとめてみた - Corredor</a></li>\n<li><a href=\"https://qiita.com/djmonta/items/17531dde1e82d9786816\">ターミナルから Mac を設定する（defaults write コマンド等） - Qiita</a></li>\n<li><a href=\"https://qiita.com/ryuichi1208/items/5905240f3bfce793b33d\">iMac/MacBook購入後に必ず設定したい設定項目 - Qiita</a></li>\n<li><a href=\"https://oki2a24.com/2019/01/21/nitial-setting-done-manually-and-setting-with-defaults-command-on-macbook-pro-2018/\">Macbook Pro 2018 で手動で行った初期設定と、defaults コマンドを使った設定のメモ - Just another oki2a24 ブロゴ</a></li>\n<li><a href=\"https://ottan.xyz/system-preferences-terminal-defaults-2-4643/\">システム環境設定をターミナル（defaultsコマンド）から設定する方法（一般） - OTTAN.XYZ</a></li>\n<li><a href=\"https://matsuokah.hateblo.jp/entry/2016/01/01/161753\">OSXのコマンドラインからすると捗った設定リスト - will and way</a></li>\n<li><a href=\"http://www.neko.ne.jp/~freewing/software/macos_mojave_speed_up_setting_tips/\">macOS Mojaveを高速化する 20の効果的な設定、Macを買ったら最初に設定する俺チューン設定項目 - FREE WINGの Androidと Windows、中国語の便利ソフト</a></li>\n<li><a href=\"http://wordpress.ideacompo.com/?p=4826\">Tips of Rubbish DIYとIoTをこよなく愛する、WEB関連やデジモノなどの雑多な情報ブログ</a></li>\n</ul>\n<p><em>注釈: defaultsコマンドを実行すると、設定変更が即座に反映されるわけではない。以下のように再起動するなどして設定を読み込ませると良い。</em></p>\n<pre><code class=\"hljs language-shell\"># Dockの設定変更を反映\n$ killall Dock\n# finderの設定変更を反映\n$ killall Finder\n# メニューバー(画面上部)の設定変更を反映\n$ killall SystemUIServer\n# その他駄目なら再起動。\n$ sudo reboot\n</code></pre>\n<h2>設定するコマンドを探す</h2>\n<p>ネットを探していても自分の思うような設定がみつからないことがある。そのときは以下の手順で調べると見つかるかもしれない。</p>\n<h3>defaultsコマンドの使い方</h3>\n<p>前提として、manual(<code>$ man defaults</code>)の通り、defaultsコマンドは次のように使う。\n以下は簡略に示す。実際に実行する際はmanualを参照。</p>\n<pre><code class=\"hljs language-shell\"># すべて読む\n$ defaults read\n\n# 読む\n$ defaults read DOMAIN KEY\n$ defaults read -g KEY\n# 書き込む\n$ defaults write DOMAIN KEY VALUE\n$ defaults write -g KEY VALUE\n</code></pre>\n<p>プロパティリストはkeyとvalueの対が原則で、jsonのようにvalueの中に入れ子でkeyとvalueのまとまりなどが入る。</p>\n<p>valueにはstringやdata, int, float, bool, array, dictなどの形式がある。</p>\n<p><code>$defaults write</code>する際にオプションで<code>-string</code>や<code>-array</code>, <code>-array-add</code>とすると希望のデータ型で値を書き込める。</p>\n<h3>探し方</h3>\n<p>設定変更前後のプロパティリストの差分から、それっぽい設定項目を見つける。\nその後実際に<code>$ defaults write</code>でプロパティリストを書き換えて、設定が反映されるかを確認する。</p>\n<p>このとき、設定変更のためのGUIウィンドウは予め開いておいて、beforeとafterの記録をすると良い。\nプロパティリストには我々が手動で設定した環境設定の他にも多用途に利用されているらしく、時間をあけるとあっという間にdiffが汚くなる。</p>\n<pre><code class=\"hljs language-shell\">$ defaults read > before\n\n# GUI上で設定を変更する\n\n$ defaults read > after\n$ diff before after\n# colordiff(brew install colordiff)などを使うと捗る\n</code></pre>\n<h3>実際に探す一例</h3>\n<p>一例として、メニューバーに音量アイコンを表示する設定を探す。</p>\n<h4>プロパティリストを読む</h4>\n<p>GUIで設定する前後のプロパティリストを比較する。</p>\n<p><img src=\"https://blob.yammer.jp/macos-defaults-read.gif\" alt=\"プロパティリストを読み込むスクリーンショット\"></p>\n<pre><code class=\"hljs language-shell\">$ defaults read > before\n# GUIで設定変更\n$ defaults read > after\n$ diff before after\n6504a6505\n>         \"NSStatusItem Visible com.apple.menuextra.volume\" = 1;\n6511c6512,6513\n&#x3C;             \"/System/Library/CoreServices/Menu Extras/Bluetooth.menu\"\n---\n>             \"/System/Library/CoreServices/Menu Extras/Bluetooth.menu\",\n>             \"/System/Library/CoreServices/Menu Extras/Volume.menu\"\n</code></pre>\n<p>差分を見ると、6500行目あたりに設定項目がありそう。</p>\n<p>実際にafterの6500行目以降の数行を見てみる。</p>\n<pre><code>     \"com.apple.systemuiserver\" =     {\n         \"NSStatusItem Visible com.apple.menuextra.airport\" = 1;\n         \"NSStatusItem Visible com.apple.menuextra.battery\" = 1;\n         \"NSStatusItem Visible com.apple.menuextra.bluetooth\" = 1;\n         \"NSStatusItem Visible com.apple.menuextra.clock\" = 1;\n         \"NSStatusItem Visible com.apple.menuextra.volume\" = 1;\n         \"__NSEnableTSMDocumentWindowLevel\" = 1;\n         \"last-analytics-stamp\" = \"608273612.570469\";\n         menuExtras =         (\n             \"/System/Library/CoreServices/Menu Extras/Clock.menu\",\n             \"/System/Library/CoreServices/Menu Extras/Battery.menu\",\n             \"/System/Library/CoreServices/Menu Extras/AirPort.menu\",\n             \"/System/Library/CoreServices/Menu Extras/Bluetooth.menu\",\n             \"/System/Library/CoreServices/Menu Extras/Volume.menu\"\n         );\n     };\n</code></pre>\n<p>以上より、設定は次の内容を書き込めば良さそう。</p>\n<ul>\n<li>ドメイン <code>com.apple.systemuiserver</code> 、キー <code>NSStatusItem Visible com.apple.menuextra.volume</code> に、値 <code>1</code> を設定する。</li>\n<li>ドメイン <code>com.apple.systemuiserver</code> 、キー <code>menuExtra</code> の値の配列に、\n<code>/System/Library/CoreServices/Menu Extras/Volume.menu</code> を追加。</li>\n</ul>\n<p>シェルスクリプトにまとめると次の通り。</p>\n<pre><code class=\"hljs language-bash\">#!/bin/bash -e\n\n# 音量アイコンをMenuBarに表示\ndefaults write com.apple.systemuiserver \\\n  \"NSStatusItem Visible com.apple.menuextra.volume\" 1\n\ndefaults write com.apple.systemuiserver \\\n  menuExtras -array-add \"/System/Library/CoreServices/Menu Extras/Volume.menu\"\n\n# メニューバーを再起動\nkillall SystemUIServer\n</code></pre>\n<h4>プロパティリストに書き込んで試す</h4>\n<p>実際に試してみると、反映されていることがわかる。</p>\n<p><img src=\"https://blob.yammer.jp/macos-defaults-write.gif\" alt=\"プロパティリストに書き込むスクリーンショット\"></p>\n<h2>なぜdefaultsコマンドを使うのか</h2>\n<h3>メリット</h3>\n<ul>\n<li>設定を自動化できる</li>\n</ul>\n<p>PCで新しく環境構築する際に、シェルスクリプトにまとまっているので一括で設定できる</p>\n<ul>\n<li>自分が行っていた設定を記録できる。</li>\n</ul>\n<p>自分がGUI上でどんな設定を行っているか、いたかをコードで示すことができる。\nアプリケーションがプロパティリストとしてデータを持っているならば、サードパーティアプリケーションでも同様に設定を記録できる。</p>\n<p>たとえば、私は<a href=\"https://github.com/fikovnik/ShiftIt\">ShiftIt</a>というアプリケーションを使っている。\nこのアプリケーションで使うキーバインドはGUI上から設定するのだが、自分がどんな設定をしているのかをコードとして記録できるのは、再設定だけでなく今後のなんらかのキーバインド設定の参考にもなる。</p>\n<p>参考: <a href=\"https://github.com/yammerjp/dotfiles/blob/master/bin/shiftit-init.sh\">私の現在のShiftItのキーバインド設定</a></p>\n<h3>デメリット</h3>\n<ul>\n<li>設定変更のたびに逐一調べてシェルスクリプトを更新しなければならない</li>\n</ul>\n<p>これはたしかに面倒だけどね。\nプロパティリストをむやみに書き換えると、パソコンが上手く動かなくなる可能性もある。。</p>\n<ul>\n<li>OSのアップデートによって設定が適用できなくなるかもしれない</li>\n</ul>\n<p>GUIもアップデートで項目がなくなったりどこにいったかわからなくなったりするよね</p>\n<h2>まとめ</h2>\n<p>以下を使って頑張ってシェルスクリプトを書こう。</p>\n<pre><code class=\"hljs language-shell\">$ defaults read > before\n# GUIで設定変更\n$ defaults read > after\n$ diff before after\n\n$ man defaults\n</code></pre>\n<h2>将来の自分へ</h2>\n<p>diffを読み取ってdefaultsコマンドのシェルスクリプト形式にするのは自動化できるのでは？\nと思ったが、<a href=\"https://rcmdnk.com/blog/2015/03/22/computer-mac/\">先駆者がいたようだ</a></p>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-12-24T22:37:31+09:00","message":"Update to move pictures to save on blob.basd4g.net\n","hash":"10abacf2484fb0e6c7875db393ad0d3add6ff7ca"}],"date_published":"2020-04-13T21:57:37+09:00","tags":["macOS","Shell","dotfiles","plist"]},{"id":"https://memo.yammer.jp/posts/vim-lsp-init","url":"https://memo.yammer.jp/posts/vim-lsp-init","title":"vim-lspを使った、Vim上でのTypeScript(JavaScript)の補完の実現","summary":"LSPとは LSP(Language Server Protocol)とは、IDEと言語サーバとの通信用プロトコル。 IDEやテキストエディタが補完やコードジャンプなどの様々な機能を実現するために、以前はIDEやエディタのプラグイン内に内包されていた機能を、言語ごとにLanguage Serverとして切り出す。 これにより言語補完部分の製作はLanguage Serverさえ作ってしまえばたくさんのIDE(エディタ)に対応できるし、IDE(エディタ)開発側も、LSPにさえ対応してしまえば各言語への対応を独自実装しなくて済む。 2016年6月にMicrosoftが発表したらしい。 参考: la","content_html":"<h2>LSPとは</h2>\n<p><a href=\"https://github.com/Microsoft/language-server-protocol\">LSP(Language Server Protocol)</a>とは、IDEと言語サーバとの通信用プロトコル。</p>\n<p>IDEやテキストエディタが補完やコードジャンプなどの様々な機能を実現するために、以前はIDEやエディタのプラグイン内に内包されていた機能を、言語ごとにLanguage Serverとして切り出す。</p>\n<p>これにより言語補完部分の製作はLanguage Serverさえ作ってしまえばたくさんのIDE(エディタ)に対応できるし、IDE(エディタ)開発側も、LSPにさえ対応してしまえば各言語への対応を独自実装しなくて済む。</p>\n<p>2016年6月にMicrosoftが発表したらしい。</p>\n<p>参考: <a href=\"https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4\">language server protocolについて (前編) - Qiita</a></p>\n<h2>やること</h2>\n<p>今回はTypeScript,JavaScript用のLanguage Serverをインストールし、これをvim-lspにつないでvim上でLanguage Serverの支援が得られるようにする。</p>\n<p>( <a href=\"https://github.com/prabirshrestha/vim-lsp\">vim-lsp</a>はvimでLanguage Serverを利用できるようにするプラグイン )</p>\n<h2>環境</h2>\n<ul>\n<li>macOS Mojave(10.14.6)</li>\n<li>VIM 8.2  Compiled by Homebrew</li>\n<li>dein.vimでプラグイン管理</li>\n</ul>\n<p>Vim8上で、dein.vimにプラグインを読み込ませる。</p>\n<h2>手順</h2>\n<ol>\n<li>typescript-language-serverをインストールする</li>\n</ol>\n<pre><code class=\"hljs language-shell\">$ npm install -g typescript typescript-language-server\n# または\n$ yarn global add typescript typescript-language-server\n</code></pre>\n<p>typescript-language-serverはJavaScriptのLanguage Serverとしても動く</p>\n<ol start=\"2\">\n<li>各種vimプラグインを入れる</li>\n</ol>\n<p>dein.tomlに以下の記述を追記</p>\n<pre><code class=\"hljs language-toml\"># dein.toml\n\n#========== vim-lsp とその関連プラグイン ==========\n#vim-lspとLanguage Serverの連携に必要なプラグイン群\n[[plugins]]\nrepo = 'prabirshrestha/async.vim'\n[[plugins]]\nrepo = 'prabirshrestha/asyncomplete.vim'\n[[plugins]]\nrepo = 'prabirshrestha/asyncomplete-lsp.vim'\n\n# 事前にnpm install -g typescript typescript-language-server \n[[plugins]]\nrepo = 'prabirshrestha/vim-lsp'\nhook_add = '''\n\" TypeScript, JavaScript\nif executable('typescript-language-server')\n    au User lsp_setup call lsp#register_server({\n        \\ 'name': 'typescript-language-server',\n        \\ 'cmd': {server_info->[&#x26;shell, &#x26;shellcmdflag, 'typescript-language-server --stdio']},\n        \\ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'package.json'))},\n\"       \\ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},\n        \\ 'whitelist': ['typescript', 'typescript.tsx', 'javascript', 'javascript.jsx'],\n        \\ })\nendif\n\n\" 他言語サーバの読み込みはここに挿入\n'''\n\n#vim-lspのキーバインドを設定\n後で書く\n</code></pre>\n<ol start=\"3\">\n<li>vimを起動</li>\n</ol>\n<pre><code class=\"hljs language-shell\">$ vim\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-04-01T17:37:46+09:00","tags":["Vim","LSP","TypeScript","JavaScript"]},{"id":"https://memo.yammer.jp/posts/20200330","url":"https://memo.yammer.jp/posts/20200330","title":"今日欲しい物(2020/3/30)","summary":"欲しい物 ほしいと思ったものの記録。 docomo系MVNOのSIM 60%の自作キーボード ヘッドホン docomo系のMVNOのSIM 昨年macを買ったのに合わせて初めてiphoneを購入し、それ以降iphone7を使い続けているが、そろそろandroidに戻りたい気持ちが強くなってきた。 ビッグローブの3GB音声通話有りのプランは、半年間400円で使えて2500円キャッシュバックが有るらしい。 iphone7に挿しているsimは最近UQmobileに乗り換えたばかりだし、UQmobileの回線速度は素晴らしいので、乗り換えるのは早計かなと思っている。 しかしUQmobileのsimが使","content_html":"<h2>欲しい物</h2>\n<p>ほしいと思ったものの記録。</p>\n<ul>\n<li>docomo系MVNOのSIM</li>\n<li>60%の自作キーボード</li>\n<li>ヘッドホン</li>\n</ul>\n<h2>docomo系のMVNOのSIM</h2>\n<p>昨年macを買ったのに合わせて初めてiphoneを購入し、それ以降iphone7を使い続けているが、そろそろandroidに戻りたい気持ちが強くなってきた。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/B072PS4Q3H/ref=sspa_dk_detail_0?psc=1&#x26;pd_rd_i=B072PS4Q3H&#x26;pd_rd_w=MtTuU&#x26;pf_rd_p=6413bd85-d494-49e7-9f81-0e63e79171a9&#x26;pd_rd_wg=eJADD&#x26;pf_rd_r=9K6KRSP0W1DSTS5MQEPK&#x26;pd_rd_r=f0f592c6-efca-451e-ad83-7a5fe8f4bfe2&#x26;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExU1g2MENHQ0VZWEtGJmVuY3J5cHRlZElkPUEwNTQ2MDM2MklSSzVWVDlJQUFVQiZlbmNyeXB0ZWRBZElkPUE2V1UwTDFMNjBLM04md2lkZ2V0TmFtZT1zcF9kZXRhaWwmYWN0aW9uPWNsaWNrUmVkaXJlY3QmZG9Ob3RMb2dDbGljaz10cnVl\">ビッグローブの3GB音声通話有りのプラン</a>は、半年間400円で使えて2500円キャッシュバックが有るらしい。</p>\n<p>iphone7に挿しているsimは最近UQmobileに乗り換えたばかりだし、UQmobileの回線速度は素晴らしいので、乗り換えるのは早計かなと思っている。</p>\n<p>しかしUQmobileのsimが使える端末が手元にないので、とりあえずdocomo系のsimを契約して2台持ちにしようかと検討している。\n今、お金をほとんど使わずに不満を解消できるのが2台持ち。</p>\n<p>しばらくしたらUQmobileでも使えるandroidを買うか、androidへ乗り換える夢を諦めるか、メインの回線をdocomo系のMVNOに乗り換えるかしよう。</p>\n<p>以下はiphoneを一年弱使った感想。</p>\n<p>生粋のandroid人間だったので、操作感など最初は中々慣れなかった。</p>\n<h3>iphoneの不満</h3>\n<ul>\n<li>オートメーションで位置情報による自動実行、WIFI接続時の自動実行が出来ない。</li>\n</ul>\n<p>家の鍵(Sesami mini)を、帰宅/外出を自動検知しAPIを叩いて自動開閉をしたい。\nandroidならIFTTTで実現できそう。</p>\n<ul>\n<li>OK googleしたい</li>\n</ul>\n<p>スマホの音声操作は車を運転するときに真価を発揮する。</p>\n<p>Googleマップの検索と案内開始、音楽再生をどちらも音声操作だけで完結できるのでGoogleアシスタントを使いたい。</p>\n<p>夏、特にダイビングに行くときに車を運転するので、今後もっとandroidが欲しくなるはず。</p>\n<p>(注:Siriは○ソ。使えない。自明。)</p>\n<ul>\n<li>公式ストア外のアプリをインストールできない。</li>\n</ul>\n<p>セキュリティ的には良いところなのだが。(一般向けのスマートフォンOSの戦略としては正解だと思う)</p>\n<p>私には自由が必要なのだ、androidのような自由が。</p>\n<h3>iphoneのいいところ</h3>\n<ul>\n<li>テザリング時にスマホを操作しなくて良い</li>\n</ul>\n<p>iphoneからmacへテザリングする際に、ポケットに入ったiphoneに指一本触れずにMac上からテザリングを有効化できる。Apple帝国に納税した分の福利厚生といったところか。</p>\n<ul>\n<li>セキュリティが安心</li>\n</ul>\n<p>政府要人でもないし抜かれる個人情報も大したこと無いけれど、国を敵に回してもiphoneには容易にはデータにアクセス出来なそう。\n(ただし、端末内のデータにアクセスできないからと言って安全とは限らない。PCやWebサービスのデータベースの情報を抜かれるかもしれない)</p>\n<h2>60%の自作キーボード</h2>\n<p>ちょっと前はHHKBを狙っていたけれど、高いし、「あれ、俺がほしいのはHHKBではなくUS配列60%キーボードだ」と気づいた。</p>\n<p>ここ1ヶ月ほどKarabinerでSandS(スペースバーを他キーと同時に押すとShiftキーとして扱う)を設定している。\nこれに味をシメて、数字キーのShift動作を反転させて、普段は記号、Shiftキー(SandSなので実際はスペースバー)が押されているときは数字が入力されるようにしようとしていた。</p>\n<p>こんなふうに配列をいじっていると、はたしてこのまま日本語配列でよいのかと思ってくる。\nUSキーボードの配列に慣れておいたほうがキーボードの選択肢が広がる(自作キーボードをするとき)し、かっこいい(厨2)(要出典)し、エンターキー押しやすそうだし、記号も自然な配列と聞くので、さっさとUSにしないと。</p>\n<p>KBDfansを見ていると頑張って安いものを選べば1.3万円くらいでできそう。</p>\n<p>自分への誕生日プレゼントとしてひとつ組んでみようかな。</p>\n<h2>ヘッドホン</h2>\n<p>5000円未満で音質が結構良いらしいヘッドホン、<a href=\"https://www.amazon.co.jp/%E3%83%9E%E3%83%A9%E3%83%B3%E3%83%84%E3%83%97%E3%83%AD-Marantz-Professional-MPH-1-%E5%AF%86%E9%96%89%E5%9E%8B%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC%E3%83%98%E3%83%83%E3%83%89%E3%83%9B%E3%83%B3/dp/B01E74L2L0?psc=1&#x26;SubscriptionId=AKIAICDGYC76ENTD3PNA&#x26;tag=menbou0202-22&#x26;linkCode=xm2&#x26;camp=2025&#x26;creative=165953&#x26;creativeASIN=B01E74L2L0\">マランツプロ MPH-1</a>。</p>\n<p>今はSonyのXDR-XB950というヘッドホンを3年以上使っている。\nbluetoothのヘッドホンは本当に素晴らしくて、無線は本当に快適。\nバッテリーも公称40時間持つとかで、最近のワイヤレスイヤホンとは比較にならないほど持つ。</p>\n<p>ただ、音質はそこまで良くないと思う。bluetoothということで、ホワイトノイズも目立つ。</p>\n<p>次買うならSonyかboseの4万円くらいするワイヤレスヘッドホンなのだけれど、高いのでおいそれと手が出ない。</p>\n<p>そんなときに下を見つけた。\nギズモード・ジャパンの網藤さんのブログで見つけた、5000円のヘッドホン。</p>\n<p><a href=\"https://men-bou.net/mph-1-under-5000/\">アンダー5,000円のモニタリングヘッドホン「MPH-1」は脊髄で買っていいくらい高コスパ - MENBOU</a></p>\n<p>この価格帯で推せるヘッドホンが有るのはアツイ。</p>\n<p>2020年に有線ヘッドホンを買うかは迷いどころだけれど、机に座っているとき専用だったら有線でもまぁいいかな。</p>\n<p>現状に困っているわけではないので、なんだかんだ買わない気もするけれど。</p>","_history":[{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-30T10:06:22+09:00","tags":["日記","欲しい物"]},{"id":"https://memo.yammer.jp/posts/book-memo-do-now","url":"https://memo.yammer.jp/posts/book-memo-do-now","title":"すぐやる人に変わる方法","summary":"2017年11月頃のメモを移動。以下、 先送りせずにすぐやる人に変わる方法 (中経の文庫)を読んだ際のメモだと思われる。 優先度を比較する「前」にやってしまう 「快楽を捨てること」と「苦痛を選択する」ということの2つのことを一度にやろうとしてはダメ まず「快楽を捨てる」ことだけに、全神経を集中 すぐに実行できるところまで分解する どんどん分解する癖がつけば自然と「すぐやる」人になれる 誘導タスクを設定する メールは「下書き」をしておく いまの状況を正直に伝える .. そういうときは、ざっと目を通して、簡単な感想を概ねポジティブに書いて出す 以下軽く目を通して考えてから採用すること すぐやる人は","content_html":"<p>2017年11月頃のメモを移動。以下、\n<a href=\"https://www.amazon.co.jp/%E5%85%88%E9%80%81%E3%82%8A%E3%81%9B%E3%81%9A%E3%81%AB%E3%81%99%E3%81%90%E3%82%84%E3%82%8B%E4%BA%BA%E3%81%AB%E5%A4%89%E3%82%8F%E3%82%8B%E6%96%B9%E6%B3%95-%E4%B8%AD%E7%B5%8C%E3%81%AE%E6%96%87%E5%BA%AB-%E4%BD%90%E3%80%85%E6%9C%A8-%E6%AD%A3%E6%82%9F-ebook/dp/B00ARBMSQG\">先送りせずにすぐやる人に変わる方法 (中経の文庫)</a>を読んだ際のメモだと思われる。</p>\n<ul>\n<li>\n<p>優先度を比較する「前」にやってしまう</p>\n</li>\n<li>\n<p>「快楽を捨てること」と「苦痛を選択する」ということの2つのことを一度にやろうとしてはダメ まず「快楽を捨てる」ことだけに、全神経を集中</p>\n</li>\n<li>\n<p>すぐに実行できるところまで分解する どんどん分解する癖がつけば自然と「すぐやる」人になれる</p>\n</li>\n<li>\n<p>誘導タスクを設定する</p>\n</li>\n<li>\n<p>メールは「下書き」をしておく</p>\n</li>\n<li>\n<p>いまの状況を正直に伝える .. そういうときは、ざっと目を通して、簡単な感想を概ねポジティブに書いて出す</p>\n</li>\n<li>\n<p>以下軽く目を通して考えてから採用すること</p>\n</li>\n<li>\n<p>すぐやる人は肩の力が抜けている</p>\n</li>\n<li>\n<p>やりたいことを増やさない</p>\n</li>\n<li>\n<p>一気にやる快感に気をつける 溜める量を減らしていく</p>\n</li>\n<li>\n<p>締め切りが無くても動ける方法を探す 自分で設定したデッドラインでできたという経験を多く持つ</p>\n</li>\n</ul>","_history":[{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-28T11:52:38+09:00","tags":["本"]},{"id":"https://memo.yammer.jp/posts/virtualization","url":"https://memo.yammer.jp/posts/virtualization","title":"仮想化","summary":"過去の自分向けメモを移動。以下、2019/4/27頃のメモである。 最近大学でOSの授業が始まった。 OSの基本的な役割として挙げられるのが、計算資源の管理とハードウェアの仮想化だそうな。 仮想化と聞くとVirtual Machineを使ったサーバー仮想化などあるが、それよりももっと前から仮想化という概念は存在していて。 CPUのハイパースレッディングテクノロジーなんかはCPUの仮想化。 デバイスドライバを介した入出力機器の仮想化。ファイルシステムによりデータを抽象的に操作できるハードディスクの仮想化。アドレスを意識する必要のないメモリの仮想化。 仮想化といわれると、以前はエミュレータなんかに","content_html":"<p>過去の自分向けメモを移動。以下、2019/4/27頃のメモである。</p>\n<p>最近大学でOSの授業が始まった。</p>\n<p>OSの基本的な役割として挙げられるのが、計算資源の管理とハードウェアの仮想化だそうな。</p>\n<p>仮想化と聞くとVirtual Machineを使ったサーバー仮想化などあるが、それよりももっと前から仮想化という概念は存在していて。\nCPUのハイパースレッディングテクノロジーなんかはCPUの仮想化。\nデバイスドライバを介した入出力機器の仮想化。ファイルシステムによりデータを抽象的に操作できるハードディスクの仮想化。アドレスを意識する必要のないメモリの仮想化。</p>\n<p>仮想化といわれると、以前はエミュレータなんかに近いものを想像していた。</p>\n<p>しかしOSがハードウェアを仮想化しているということを意識すると言葉のイメージが変わった。\n仮想化(=抽象化)というのは、カプセル化だったり、階層化という概念に近く、コンピュータの中でごく一般的に広く用いられている手法ではないか？</p>\n<p>そこまで考えを広げたうえで、昨今のデータセンタ内の仮想化技術(サーバー、ストレージ、ネットワーク、、)は自然の流れとも言える。\n今まで使っていたハードウェアないしレイヤーを更に仮想的に(抽象的に、ソフトウェア的に)扱いやすくした、レイヤーが一層加わっただけである。</p>\n<p>大学1年のとき、某企業でデータセンタに関するソリューション提案のインターンをした。そのときは仮想化どころかデータセンタに関する知識が少なくて学ぶことばかりでついていくのもやっとだったけれど、概念の理解は当時より進んだと思う。</p>","_history":[{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-28T11:48:13+09:00","tags":["仮想化","お気持ち"]},{"id":"https://memo.yammer.jp/posts/sakura-vps-docker","url":"https://memo.yammer.jp/posts/sakura-vps-docker","title":"さくらのVPSとdocker環境構築 ","summary":"PCを整理していて発見したメモを移動して公開する。ファイルのタイムスタンプは2017/12/19。 windows10のPCから、さくらVPSでCentOS7のサーバでdockerを使えるようにする記録。 windows10にはあらかじめputty,WinSCPがインストールされていることを想定。 さくらVPS初期設定 OSインストール さくらVPS管理画面にて、> サーバ一覧 > (設定したいサーバ) > 各種設定 > OSインストール OSインストール形式の選択: 標準OS インストールするOSを選んでください: CentOS7 x86_64 rootパスワード: 適当に設定 スタートアッ","content_html":"<p>PCを整理していて発見したメモを移動して公開する。ファイルのタイムスタンプは2017/12/19。</p>\n<p>windows10のPCから、さくらVPSでCentOS7のサーバでdockerを使えるようにする記録。</p>\n<p>windows10にはあらかじめputty,WinSCPがインストールされていることを想定。</p>\n<h2>さくらVPS初期設定</h2>\n<h3>OSインストール</h3>\n<p>さくらVPS管理画面にて、> サーバ一覧 > (設定したいサーバ) > 各種設定 > OSインストール</p>\n<ul>\n<li>OSインストール形式の選択: 標準OS</li>\n<li>インストールするOSを選んでください: CentOS7 x86_64</li>\n<li>rootパスワード: 適当に設定</li>\n<li>スタートアップスクリプト: 利用しない</li>\n</ul>\n<p>こんな感じでOSをインストールする。</p>\n<h3>一般ユーザーの作成</h3>\n<p>まず、さくらVPS管理画面にて、>サーバ一覧 >(設定したいサーバ) > _コンソール > _シリアルコンソール(β)版 から操作。</p>\n<h4>sampleuserの作成</h4>\n<p>以下、sampleuserは適当に自分の作りたいユーザー名に置き換える。</p>\n<pre><code class=\"hljs language-shell\">#rootでログイン \n$ useradd sampleuser #ユーザー作成 \n$ passwd sampleuser #パスワード設定 \n</code></pre>\n<h4>sampleuserがsudoできるようにする</h4>\n<pre><code class=\"hljs language-shell\">$ visudo \n</code></pre>\n<p>visudoで/etc/sudoersを編集する。次の行のコメントアウトを外す。</p>\n<pre><code>## Allows people in group wheel to run all commands \n#%wheel  ALL=(ALL)       ALL \n↓ \n## Allows people in group wheel to run all commands \n%wheel  ALL=(ALL)       ALL \n</code></pre>\n<p>:wqで保存。</p>\n<pre><code class=\"hljs language-shell\">$ usermod -aG wheel sampleuser \n#ユーザーをwheelグループに追加 \n \n$ exit \n \n$ login #sampleuserでlogin \n \n$ groups #自分の所属groupを確認 \nsampleuser wheel \n \n$ sudo su #sampleuserでsudoできるか確認 \n[sudo] password for sampleuser:{sampleuserのパスワード} \n \n$ whoami \nroot \n</code></pre>\n<h4>puttyからsshログインしてみる</h4>\n<p>putty.exeを起動。</p>\n<ul>\n<li>>Session の Host Name : サーバのipアドレスorドメイン名</li>\n<li>>Session の Port : 22</li>\n<li>>Conection の Seconds to between keepalives(0 to turn off) : 30<br>\n(30秒ごとにnull文字が送信されることでしばらく操作が無くてもsshセッションが途絶えるのを防ぐ。)</li>\n<li>>Session の SavedSessions : sakura_vps_session</li>\n</ul>\n<p>Saveし、その後Openでssh接続できるか確認する。</p>\n<h3>セキュリティの強化</h3>\n<h4>rootのsshログインを止める</h4>\n<pre><code class=\"hljs language-shell\">$ vim sudo /etc/ssh/sshd_config \n</code></pre>\n<p>/etc/ssh/sshd_configを次のように編集する。</p>\n<pre><code> #PermitRootLogin yes \n ↓ \n PermitRootLogin no \n \n</code></pre>\n<p>:wqで保存。</p>\n<pre><code class=\"hljs language-shell\">$ systemctl restart sshd #設定を反映させる \n</code></pre>\n<h4>port番号変更とfirewall設定変更</h4>\n<p>sshポートを、標準である22から適当な値に変更する。ここでは2222に変更するが、セキュリティのためには各自適当な値を用いるべき。</p>\n<pre><code class=\"hljs language-shell\">$ sudo vim /etc/ssh/sshd_config \n</code></pre>\n<p>/etc/ssh/sshd_configを次のように編集する。</p>\n<pre><code>#Port22 \n↓ \nPort2222 \n</code></pre>\n<p>:wqで保存。</p>\n<pre><code class=\"hljs language-shell\">$ systemctl restart sshd #設定を反映させる \n</code></pre>\n<p>そして、sshの設定でポートを変更したのち、<strong>firewallの設定も変更しなければならない。。。</strong> これに気づかず最初つまづいた。</p>\n<pre><code class=\"hljs language-shell\">$ cp /usr/lib/firewalld/services/ssh.xml /etc/firewalld/services/ssh.xml \n \n$ sudo vim /etc/firewalld/services/ssh.xml \n</code></pre>\n<p>firewallのデフォルト設定は/usr/lib/firewalld/にあるが、これは触らないこと。\n編集する場合は、/etc/firewalld/以下にファイルを置くと、その部分だけシステム設定が上書きされるようになっているので、こちらに書き込む。</p>\n<p>/etc/firewalld/services/ssh.xmlを次のように編集する。</p>\n<pre><code>&#x3C;port protocol=\"tcp\" port=\"22\"/> \n↓ \n&#x3C;port protocol=\"tcp\" port=\"2222\"/> \n</code></pre>\n<p>:wqで保存。</p>\n<pre><code class=\"hljs language-shell\">$ firewall-cmd --reload #設定を反映させる \n</code></pre>\n<p>putty.exeでも、ポート設定を変更しておく。\nsakura_vps_session をLoadし、Portを2222に変えてSave。puttyから接続できるか確認しておく。</p>\n<h4>公開鍵認証</h4>\n<p>puttygen.exeで公開鍵、秘密鍵のペアを作成する。\nGenerateボタンを押した後、カーソルをウィンドウ上でランダムに動かすと鍵が作成できる。\nKey passphraseを任意のものに設定する。\n適当な場所に Save public key  で sakura_rsa.pub として、Save private key sakura_rsa.ppk として保存。</p>\n<p>公開鍵をサーバにアップロードする。\nWinSCPで、新しいサイトから、</p>\n<ul>\n<li>編集プロトコル:SFTP</li>\n<li>ホスト名:にサーバのipアドレスorドメイン名</li>\n<li>ポート番号:2222</li>\n<li>ユーザ名:sampleuser</li>\n<li>パスワード:(sampleuserのパスワード)</li>\n</ul>\n<p>として保存、ログインする。\nWinSCPでは画面左側にローカルの、画面右側にサーバのファイルが表示されており、ドラッグアンドドロップで相互に転送できる。\n先ほどの\nサーバの/home/sampleuser に先ほどの sakura_rsa.pub (公開鍵だけ)を転送する。</p>\n<p>サーバに公開鍵を登録する。</p>\n<pre><code class=\"hljs language-shell\">$ login #sampleuserでloginする \n \n$ ssh-keygen -i -f sakura_rsa.pub >> authorized_keys #puttygen.exeで作成した公開鍵の形式を変換 \n \n#/home/sampleuser/.ssh/にauthorized_keysを設置し、適切なユーザ権限を与える \n$ mkdir .ssh \n$ chmod 700 .ssh \n$ mv authorized_keys .ssh \n$ chmod 600 .ssh/authorized_keys \n \n$ rm -f sakura_rsa.pub #変換前の公開鍵を削除 \n</code></pre>\n<p>puttyに秘密鍵を登録する。</p>\n<p>putty.exeで sakura_vps_session を Loadし、>Conection>SSH>Auth の Private key fire authentication にsakura_rsa.ppk(秘密鍵)を設定する。\n>Sessionから 設定の変更をSaveする。\nその後puttyで接続できるか確認。鍵を作成したときのパスフレーズをここで入力する必要があるはず。\n問題なく接続できれば、晴れて公開鍵認証でssh接続できている。</p>\n<p>パスワードログインの無効化をする。\n公開鍵認証でログインできても、まだ従来のパスワードによるログインもできるのでセキュリティ向上にはなっていない。従来のパスワードによるログインを無効化する。</p>\n<pre><code class=\"hljs language-shell\">$ vim sudo /etc/ssh/sshd_config \n</code></pre>\n<p>/etc/ssh/sshd_configを次のように編集する。</p>\n<pre><code>#PasswordAuthentication yes \n↓ \nPasswordAuthentication no \n</code></pre>\n<p>:wqで保存。</p>\n<pre><code class=\"hljs language-shell\">$ systemctl restart sshd #設定を反映させる \n</code></pre>\n<h2>docker構築</h2>\n<h3>dockerのインストール</h3>\n<pre><code class=\"hljs language-shell\">$ sudo yum update \n$ sudo yum install docker-io \n#dockerのインストール \n \n$ sudo systemctl start docker \n#無事インストールされたか確認する \n$ sudo docker info \n#インストールされていればつらつら現在の状況が表示される \n</code></pre>\n<h3>sampleuserがdockerを使えるようにする</h3>\n<pre><code class=\"hljs language-shell\">$ sudo groupadd docker #dockerグループの作成 \n$ sudo gpasswd -a sampleuser docker \n#sampleuserをdockerグループへ追加 \n \n$ sudo systemctl restart docker \n#dockerデーモンの再起動 \n \n$ docker info \n#sampleuserで動くことを確認 \n</code></pre>\n<h3>Moby Dockを表示してみる</h3>\n<pre><code class=\"hljs language-shell\">$ docker run docker/whalesay cowsay 'Congrats!!!' \n</code></pre>\n<h2>参考文献</h2>\n<ul>\n<li>CentOSでuserをsudo可能にする:<br>\n<a href=\"https://qiita.com/Esfahan/items/a159753d156d23baf180\">https://qiita.com/Esfahan/items/a159753d156d23baf180</a></li>\n<li>CentOS7のfirewalldでsshのポート番号を変更する方法:<br>\n<a href=\"https://qiita.com/DQNEO/items/5780d81b2e0af4cc1544\">https://qiita.com/DQNEO/items/5780d81b2e0af4cc1544</a></li>\n<li>PuTTYで公開鍵認証方式でのSSH接続を行う手順まとめ:<br>\n<a href=\"https://qiita.com/sugar_15678/items/55cb79d427b9ec21bac2\">https://qiita.com/sugar_15678/items/55cb79d427b9ec21bac2</a></li>\n<li>VPSにdocker環境構築:<br>\n<a href=\"https://qiita.com/t-mimura/items/c206d46f3af771292f89\">https://qiita.com/t-mimura/items/c206d46f3af771292f89</a></li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-28T03:10:34+09:00","tags":["さくらのVPS","Linux","CentOS","Docker"]},{"id":"https://memo.yammer.jp/posts/sakura-vps-dns","url":"https://memo.yammer.jp/posts/sakura-vps-dns","title":"お名前.comで取得したドメインをさくらVPSで使う。","summary":"PCを整理していて発見したメモを移動して公開する。ファイルのタイムスタンプは2017/12/19。 お名前.comで取得したドメインをさくらVPSで使う。DNSサーバーはさくらのものを利用する。 お名前.com側の設定 > ドメイン > ドメイン設定 > ネームサーバーの設定 > ネームサーバーの変更 目的のドメイン名にチェックを入れて 登録情報は正しいので、手続きを進める をクリック。 他のネームサーバーを利用 のタブにして 1プライマリネームサーバー(必須) :\tns1.dns.ne.jp 2セカンダリネームサーバー(必須) :\tns2.dns.ne.jp として確認画面へ進み、設定を適用","content_html":"<p>PCを整理していて発見したメモを移動して公開する。ファイルのタイムスタンプは2017/12/19。</p>\n<p>お名前.comで取得したドメインをさくらVPSで使う。DNSサーバーはさくらのものを利用する。</p>\n<h2>お名前.com側の設定</h2>\n<p>> ドメイン > ドメイン設定 > ネームサーバーの設定 > ネームサーバーの変更</p>\n<p>目的のドメイン名にチェックを入れて 登録情報は正しいので、手続きを進める をクリック。</p>\n<p>他のネームサーバーを利用 のタブにして</p>\n<ul>\n<li>1プライマリネームサーバー(必須) :\tns1.dns.ne.jp</li>\n<li>2セカンダリネームサーバー(必須) :\tns2.dns.ne.jp</li>\n</ul>\n<p>として確認画面へ進み、設定を適用する。</p>\n<p>これでネームサーバーはさくらインターネットのものが使われる</p>\n<h2>さくらVPS側の設定</h2>\n<p>> さくらのVPSコントロールパネル > ネームサーバ登録</p>\n<ul>\n<li>ドメイン名:example.com (目的のドメイン名)\n送信する をクリックして設定を適用する。</li>\n</ul>\n<p>> 会員メニュー > ドメイン > 管理ドメインとネームサーバの一覧<br>\nにてドメイン名:example.comの ゾーン編集 をクリック\n左側の 変更 から</p>\n<ul>\n<li>エントリ名: 空欄</li>\n<li>種別: IPアドレス(A)</li>\n<li>値: 192.0.43.10 (サーバのIPアドレス)</li>\n<li>DNSチェック: する</li>\n<li>TTLの指定: (チェックしない)</li>\n</ul>\n<p>として新規登録</p>\n<p>もう一度<br>\n> 会員メニュー > ドメイン > 管理ドメインとネームサーバの一覧<br>\nにてドメイン名:example.comの ゾーン編集 をクリックし、左側の 変更 から</p>\n<ul>\n<li>エントリ名: www</li>\n<li>種別: 別名(CNAME)</li>\n<li>値: @</li>\n<li>DNSチェック: する</li>\n<li>TTLの指定: (チェックしない)</li>\n</ul>\n<p>として新規登録</p>\n<p>以上で完了となる。</p>","_history":[{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-28T03:03:08+09:00","tags":["さくらのVPS","ドメイン","DNS"]},{"id":"https://memo.yammer.jp/posts/android-phone-call-command","url":"https://memo.yammer.jp/posts/android-phone-call-command","title":"androidの架電アプリによる各種制御プログラムの起動","summary":"まえがき PC内のデータを整理していたら過去に自分向けに書いていたメモが出てきたので、ここ記す形で移動する。 タイムスタンプをみるに、2017/11/22頃に書かれたものだ。 androidでは、端末の細かい挙動の設定を変更する際、電話アプリで以下に有るようなコマンドを打ち込むと行えることがある。 過去のメモなので、どの機種、環境だと利用できるのか確認していないが、少なくとも SOL26で利用できそうである。 メモ Open Android Mobile Programs Using Commend      Commands               Usages    *#06# = I","content_html":"<h2>まえがき</h2>\n<p>PC内のデータを整理していたら過去に自分向けに書いていたメモが出てきたので、ここ記す形で移動する。\nタイムスタンプをみるに、2017/11/22頃に書かれたものだ。</p>\n<p>androidでは、端末の細かい挙動の設定を変更する際、電話アプリで以下に有るようなコマンドを打ち込むと行えることがある。</p>\n<p>過去のメモなので、どの機種、環境だと利用できるのか確認していないが、少なくとも SOL26で利用できそうである。</p>\n<h2>メモ</h2>\n<pre><code>Open Android Mobile Programs Using Commend  \n \n Commands               Usages \n \n*#06# = IMEI Android serial number \n \n*#8999*523# = LCD Brightness \n*#1234# = To check Software and Hardware information, PDA, CSC,MODEM. \n \n*#2222# = it will open H/W Version \n*#*#4636#*#*= user statistics and Phone Info \n*#0011# = Displays status information for the GSM \n*2767*3855# = Full factory reset (Don’t dial unless you have problem, it does not ask you to confirm) \n*#12580*369# = SW &#x26; HW Info \n#*#8377466# = S/W Version &#x26; H/W Version \n#*5376# = DELETE ALL SMS!!!! \n*#197328640# = Service Mode \n*#0228# = Battery status (ADC, RSSI reading) \n*#32489# = Service mode (Ciphering Info) \n*#2255# = Call List \n#*3888# = BLUETOOTH Test mode \n#*7828# = Task screen \n*#5282837# = Java Version \n*#232331# = Bluetooth Test Mode \n*#232338# = WLAN MAC Address \n*#232339# = WLAN Test Mode \n*#8999*8378# = Test Menu \n*#0842# = Vibrate Motor Test Mode \n*#0782# = Real Time Clock Test \n*#0673# = Audio Test Mode \n*#0*# = General Test Mode \n*#2263# = RF Band Selection / Network modes select \n*#9090# = Diagnostic Configuration \n*#7284# = USB I2C Mode Control \n*#872564# = USB Logging Control \n*#4238378# = GCF Configuration \n*#0283# = Audio Loopback Control \n*#1575# = GPS Control Menu \n*#3214789650# = LBS Test Mode \n*#745# = RIL Dump Menu \n*#746# = Debug Dump Menu \n*#9900# = Takes you to System Dump, where Disabling Fast Dormancy gives a boost to your network speed on some networks (both Wi-Fi and Gpr), same code to re-enable it \n*#44336# = Software Version Info \n*#0289# = Melody Test Mode \n*#2663# = TSP / TSK firmware update \n*#03# = NAND Flash S/N \n*#0589# = Light Sensor Test Mode \n*#0588# = Proximity Sensor Test Mode \n*#273283*255*3282*# = Data Create Menu \n \n*#7594# = Remap Shutdown to End Call TSK \n*#7465625# = View Phone Lock Status \n*7465625*638*# = Configure Network Lock MCC/MNC \n#7465625*638*# = Insert Network Lock Key code \n*7465625*782*# = Configure Network Lock NSP \n#7465625*782*# = Insert Partial Network Lock key code \n*7465625*77*# = Insert Network Lock key code SP \n#7465625*77*# = Insert Operator Lock key code \n*7465625*27*# = Insert Network Lock key code NSP/CP \n#7465625*27*# = Insert Content Provider key code \n*#272*IMEI# = then we will get buyer code (For Samsung galaxy six code) \n*#*#7780#*#* = Factory data reset – Clears Google-account data, system and program settings and \n \n*2767*3855# = Format phone \n \nThe Most Useful Cods on Android Mobile \n– Disables Network Lock : #7465625*638*00000000# \n– Disables SIM Lock : #7465625*746*00000000# \n– Disables SP lock : #7465625*77*00000000# \n– Disables Subset Lock : #7465625*782*00000000# \n</code></pre>\n<p>参考: <a href=\"http://www.commandshow.com/open-android-programs-using-command/\">http://www.commandshow.com/open-android-programs-using-command/</a></p>","_history":[{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T02:28:33+09:00","message":"Fix link\n","hash":"2f3f89946ac843c738e245f5006fd33b096a62c8"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-28T02:45:25+09:00","tags":["android"]},{"id":"https://memo.yammer.jp/posts/sh-history","url":"https://memo.yammer.jp/posts/sh-history","title":"shellでhistoryを使う","summary":"過去に実行したコマンドを再度実行する history ... unix系OSでshellに存在する組み込みコマンドだ。 過去に実行したコマンドを表示できる。 historyコマンドで表示されたコマンドの番号を!と合わせて入力すると、そのコマンドを実行できる。 $ history   1  ls   2  pwd   3  cd /etc $ !1 ls hogedir/    fugafile 以下のようにして全履歴を表示できる。 出力した後はgrepで煮るなり焼くなりするのが良いかと。 $ history -E 1 # 履歴を全て表示する .zshrcでの設定 .zshrcでhistoryに","content_html":"<h2>過去に実行したコマンドを再度実行する</h2>\n<p>history ... unix系OSでshellに存在する組み込みコマンドだ。</p>\n<p>過去に実行したコマンドを表示できる。</p>\n<p>historyコマンドで表示されたコマンドの番号を!と合わせて入力すると、そのコマンドを実行できる。</p>\n<pre><code class=\"hljs language-shell\">$ history\n  1  ls\n  2  pwd\n  3  cd /etc\n$ !1\nls\nhogedir/    fugafile\n</code></pre>\n<p>以下のようにして全履歴を表示できる。</p>\n<p>出力した後はgrepで煮るなり焼くなりするのが良いかと。</p>\n<pre><code class=\"hljs language-shell\">$ history -E 1\n# 履歴を全て表示する\n</code></pre>\n<h2>.zshrcでの設定</h2>\n<p><code>.zshrc</code>でhistoryに関する設定をしておく</p>\n<pre><code class=\"hljs language-zsh\"># .zshrc\nHISTSIZE=50000 # メモリに保存するコマンド数\nHISTFILE=~/.zsh_history\nSAVEHIST=100000 # ヒストリファイルに保存するコマンド数\n\nalias history=\"history -i\"\nfunction history-all { history -E 1 }\n\n# 重複するコマンド行は古い方を削除\nsetopt hist_ignore_all_dups\n# 直前と同じコマンドラインはヒストリに追加しない\nsetopt hist_ignore_dups\n# コマンド履歴ファイルを共有する\nsetopt share_history\n# 履歴を追加 (毎回 .zsh_history を作るのではなく)\nsetopt append_history\n# 履歴をインクリメンタルに追加\nsetopt inc_append_history\n# ヒストリを呼び出してから実行する間に一旦編集可能\nsetopt hist_verify\n# 余分な空白は詰めて記録\nsetopt hist_reduce_blanks\n# historyコマンドは履歴に登録しない\nsetopt hist_no_store\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-26T00:13:29+09:00","tags":["zsh","Shell"]},{"id":"https://memo.yammer.jp/posts/download-ubuntu","url":"https://memo.yammer.jp/posts/download-ubuntu","title":"Ubuntuをダウンロードしてインストールする","summary":"Download Ubuntu Desktop 日本語 Remixをダウンロードする Torrentを利用するために、uTorrent classicを使用した。 ただし、catalinaがサポート外と書かれていたのでもしかしたら32bitアプリケーションかもしれない。 Torrentについては別途要検討 Check macでは次のようにしてmd5ハッシュを確認できる ダウンロードページのhashと比較して、ダウンロードが正しく行われたことを確認する $ md5 -q path/to/file # manによると、-qオプションはQuiet modeらしい。md5ハッシュのみ出力する。 # の","content_html":"<h2>Download</h2>\n<p><a href=\"https://www.ubuntulinux.jp/download/ja-remix\">Ubuntu Desktop 日本語 Remix</a>をダウンロードする</p>\n<p>Torrentを利用するために、uTorrent classicを使用した。\nただし、catalinaがサポート外と書かれていたのでもしかしたら32bitアプリケーションかもしれない。\nTorrentについては別途要検討</p>\n<h2>Check</h2>\n<p>macでは次のようにしてmd5ハッシュを確認できる\nダウンロードページのhashと比較して、ダウンロードが正しく行われたことを確認する</p>\n<pre><code class=\"hljs language-shell\">$ md5 -q path/to/file\n# manによると、-qオプションはQuiet modeらしい。md5ハッシュのみ出力する。\n# ので、次のように比較するのが良いかな\n\n$ md5 -q path/to/file | diff hash/text/file/path -\n# diffの第二引数\"-\"は、標準入力の意\n</code></pre>\n<h2>Copy</h2>\n<pre><code class=\"hljs language-shell\"># Convert iso to img\n$ hdutil convert -format UDRW -o hoge.img hoge.iso\n$ mv hoge.img.dmg hoge.img\n\n# USBメモリの確認\n$ diskutil list\n\n# Mountされていたら\n$ diskutil unMountDisk path/to/device\n# ex)  $ diskutil unMountDisk /dev/disk1\n\n$ sudo dd if=hoge.img of=path/to/device bs=1m\n\n$ sudo diskutil eject path/to/device\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-21T23:18:47+09:00","tags":["Linux","Ubuntu"]},{"id":"https://memo.yammer.jp/posts/install-dein-vim","url":"https://memo.yammer.jp/posts/install-dein-vim","title":"dein.vimの導入","summary":"dotfiles環境下でvimのプラグイン管理にdein.vimを導入する。 前提 ~/dotfilesで.vimrcを管理している dein.vimも~/dotfilesで管理する 下準備 $ cd ~/dotfiles $ mkdir dein $ touch dein/load.vim .vimrcに追記 ~/dotfiles/.vimrcの先頭に次を記載 \" .vimrc \"===== dein.vim ===== if filereadable(expand('dein/load.vim'))     source dein/load.vim endif load.vimに記述 ~/","content_html":"<p>dotfiles環境下でvimのプラグイン管理に<a href=\"https://github.com/Shougo/dein.vim\">dein.vim</a>を導入する。</p>\n<h2>前提</h2>\n<ul>\n<li><code>~/dotfiles</code>で<code>.vimrc</code>を管理している</li>\n<li>dein.vimも<code>~/dotfiles</code>で管理する</li>\n</ul>\n<h2>下準備</h2>\n<pre><code class=\"hljs language-shell\">$ cd ~/dotfiles\n$ mkdir dein\n$ touch dein/load.vim\n</code></pre>\n<h2>.vimrcに追記</h2>\n<p><code>~/dotfiles/.vimrc</code>の先頭に次を記載</p>\n<pre><code class=\"hljs language-vim\"><span class=\"hljs-comment\">\" .vimrc</span>\n\n<span class=\"hljs-comment\">\"===== dein.vim =====</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">filereadable</span>(<span class=\"hljs-built_in\">expand</span>(<span class=\"hljs-string\">'dein/load.vim'</span>))\n    <span class=\"hljs-keyword\">source</span> dein/load.<span class=\"hljs-keyword\">vim</span>\n<span class=\"hljs-keyword\">endif</span>\n</code></pre>\n<h2>load.vimに記述</h2>\n<p><code>~/dotfiles/dein/load.vim</code>に次の内容を記述</p>\n<pre><code class=\"hljs language-vim\"><span class=\"hljs-comment\">\" ~/dotfiles/dein/load.vim</span>\n\n<span class=\"hljs-string\">\"\"</span><span class=\"hljs-comment\">\"===== dein.vim ======</span>\n\n<span class=\"hljs-comment\">\"dein.vim dark power</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s:dein_dir</span> = <span class=\"hljs-built_in\">expand</span>(<span class=\"hljs-string\">'~/dotfiles/dein'</span>)\n<span class=\"hljs-comment\">\" s:dein_dirとg:rc-dirは一致させること。dein.tomlとdein-lazy.tomlをtouchしている</span>\n<span class=\"hljs-comment\">\"</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s:dein_repo_dir</span> = <span class=\"hljs-variable\">s:dein_dir</span> . <span class=\"hljs-string\">'/repos/github.com/Shougo/dein.vim'</span>\n\n<span class=\"hljs-keyword\">set</span> nocompatible\n<span class=\"hljs-comment\">\" dein.vim をインストールしていない場合は自動インストール</span>\n<span class=\"hljs-keyword\">if</span> !isdirectory(<span class=\"hljs-variable\">s:dein_repo_dir</span>)\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"install dein.vim...\"</span>\n  <span class=\"hljs-keyword\">execute</span> <span class=\"hljs-string\">'!git clone git://github.com/Shougo/dein.vim'</span> <span class=\"hljs-variable\">s:dein_repo_dir</span>\n  <span class=\"hljs-keyword\">execute</span> <span class=\"hljs-string\">'!touch -m '</span> . <span class=\"hljs-variable\">s:dein_dir</span> . <span class=\"hljs-string\">'/dein.toml'</span>\n  <span class=\"hljs-keyword\">execute</span> <span class=\"hljs-string\">'!touch -m '</span> . <span class=\"hljs-variable\">s:dein_dir</span> . <span class=\"hljs-string\">'/dein_lazy.toml'</span>\n<span class=\"hljs-keyword\">endif</span>\n<span class=\"hljs-keyword\">execute</span> <span class=\"hljs-string\">'set runtimepath^='</span> . <span class=\"hljs-variable\">s:dein_repo_dir</span>\n\n<span class=\"hljs-comment\">\"---------------------------</span>\n<span class=\"hljs-comment\">\" Start dein.vim Settings.</span>\n<span class=\"hljs-comment\">\"---------------------------</span>\n\n<span class=\"hljs-keyword\">if</span> dein#load_state(<span class=\"hljs-variable\">s:dein_dir</span>)\n  <span class=\"hljs-keyword\">call</span> dein#begin(<span class=\"hljs-variable\">s:dein_dir</span>)\n\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:rc_dir</span>    = <span class=\"hljs-built_in\">expand</span>(<span class=\"hljs-string\">'~/dotfiles/dein'</span>)\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s:toml</span>      = <span class=\"hljs-variable\">g:rc_dir</span> . <span class=\"hljs-string\">'/dein.toml'</span>\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s:lazy_toml</span> = <span class=\"hljs-variable\">g:rc_dir</span> . <span class=\"hljs-string\">'/dein_lazy.toml'</span>\n\n  <span class=\"hljs-comment\">\" TOMLファイルにpluginを記述</span>\n  <span class=\"hljs-keyword\">call</span> dein#load_toml(<span class=\"hljs-variable\">s:toml</span>,      {<span class=\"hljs-string\">'lazy'</span>: <span class=\"hljs-number\">0</span>})\n  <span class=\"hljs-keyword\">call</span> dein#load_toml(<span class=\"hljs-variable\">s:lazy_toml</span>, {<span class=\"hljs-string\">'lazy'</span>: <span class=\"hljs-number\">1</span>})\n\n  <span class=\"hljs-keyword\">call</span> dein#end()\n  <span class=\"hljs-keyword\">call</span> dein#save_state()\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-comment\">\" 未インストールを確認</span>\n<span class=\"hljs-keyword\">if</span> dein#check_install()\n  <span class=\"hljs-keyword\">call</span> dein#install()\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-comment\">\"---------------------------</span>\n<span class=\"hljs-comment\">\" End dein.vim Settings.</span>\n<span class=\"hljs-comment\">\"---------------------------</span>\n</code></pre>\n<h2>vimを起動</h2>\n<p><code>.vimrc</code>の記述により、vim起動によりdein.vimがinstallされる。\n(ただし、gitが必要)</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/yammerjp/dotfiles\">yammerjp/dotfiles -GitHub</a></li>\n</ul>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-17T00:13:35+09:00","tags":["Vim","dotfiles"]},{"id":"https://memo.yammer.jp/posts/shell-pwd","url":"https://memo.yammer.jp/posts/shell-pwd","title":"Shell Scriptにおける、カレントディレクトリの固定","summary":"前提 shell script内では、shell scriptを起動する前のカレントディレクトリが引き継がれる。 例えば、次のようなpwd.shを実行する。 #!/bin/sh pwd 次のように、shell scriptを呼び出す際のカレントディレクトリにより、shell scriptの挙動が変化する。 $ pwd /Users/hoge $ ls -F pwd.sh*   dir/ $ sh pwd.sh  /Users/hoge $ cd dir $ sh ../pwd.sh /Users/hoge/dir 解決策 shell scriptの前方に、2行追加する。 #!/bin/sh #","content_html":"<h2>前提</h2>\n<p>shell script内では、shell scriptを起動する前のカレントディレクトリが引き継がれる。</p>\n<p>例えば、次のような<code>pwd.sh</code>を実行する。</p>\n<pre><code class=\"hljs language-shell\">#!/bin/sh\npwd\n</code></pre>\n<p>次のように、shell scriptを呼び出す際のカレントディレクトリにより、shell scriptの挙動が変化する。</p>\n<pre><code class=\"hljs language-shell\">$ pwd\n/Users/hoge\n\n$ ls -F\npwd.sh*   dir/\n\n$ sh pwd.sh \n/Users/hoge\n\n$ cd dir\n$ sh ../pwd.sh\n/Users/hoge/dir\n</code></pre>\n<h2>解決策</h2>\n<p>shell scriptの前方に、2行追加する。</p>\n<pre><code class=\"hljs language-shell\">#!/bin/sh\n\n# change directory to the shell file's directory\nSCRIPT_DIR=`dirname $0`\ncd $SCRIPT_DIR\n\npwd\n</code></pre>\n<p>これにより、shell scriptを呼び出す際のカレントディレクトリに関わらず、shell scriptでのカレントディレクトリが、shell scriptが配置されたディレクトリに固定される。</p>\n<pre><code class=\"hljs language-shell\">$ pwd\n/Users/hoge\n\n$ ls -F\npwd.sh*   dir/\n\n$ sh pwd.sh \n/Users/hoge\n\n$ cd dir\n$ sh ../pwd.sh\n/Users/hoge\n</code></pre>\n<h2>その他の解決策</h2>\n<p>shell script内のpathを、<code>\"$HOME\"</code>などの変数を使って絶対パスで記載する。</p>\n<h2>まとめ</h2>\n<p>以下のテンプレートをshell scriptの先頭に追加すると良い。</p>\n<pre><code class=\"hljs language-bash\">#!/bin/sh\nSCRIPT_DIR=`dirname $0`\ncd $SCRIPT_DIR\n</code></pre>\n<h2>追記 (2020/03/19)</h2>\n<p><code>$SCRIPT_DIR</code>にフルパスを格納するなら以下の通り</p>\n<pre><code class=\"hljs language-bash\">SCRIPT_DIR=$(cd $(dirname $0); pwd)\ncd $SCRIPT_DIR\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:47:39+09:00","message":"tag -> keywords\n","hash":"b1c87df27cfab6d80bf16ebc335401cedfc095a7"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-16T22:23:27+09:00","tags":["Shell","Linux","macOS"]},{"id":"https://memo.yammer.jp/posts/hexo","url":"https://memo.yammer.jp/posts/hexo","title":"hexoによる静的サイトの構築","summary":"Hexoによる静的サイトの構築 Hexoは、node.jsを使った静的サイトジェネレータ。 markdown形式の記事を静的サイトに簡単に公開できる。 Hexoの導入 $ npm install hexo-cli $ npx hexo init ../memo.yammer.jp  $ cd ../memo.yammer.jp $ npm install $ hexo server # ローカルでサイトの確認 Hexoの設定について 設定は基本的に_config.ymlに書き込む。 例えば、このサイトの_config.ymlが一例。 テーマの導入 Hexoはサードパーティで公開された様々なテー","content_html":"<h2>Hexoによる静的サイトの構築</h2>\n<p><a href=\"https://hexo.io/\">Hexo</a>は、node.jsを使った静的サイトジェネレータ。</p>\n<p>markdown形式の記事を静的サイトに簡単に公開できる。</p>\n<h3>Hexoの導入</h3>\n<pre><code class=\"hljs language-shell\">$ npm install hexo-cli\n$ npx hexo init ../memo.yammer.jp \n$ cd ../memo.yammer.jp\n$ npm install\n$ hexo server\n# ローカルでサイトの確認\n</code></pre>\n<h3>Hexoの設定について</h3>\n<p>設定は基本的に<code>_config.yml</code>に書き込む。</p>\n<p>例えば、このサイトの<a href=\"https://github.com/yammerjp/memo.yammer.jp/blob/master/_config.yml\"><code>_config.yml</code></a>が一例。</p>\n<h3>テーマの導入</h3>\n<p>Hexoはサードパーティで公開された様々なテーマを導入できる。</p>\n<p><a href=\"https://hexo.io/themes/\">公式サイトのテーマ一覧</a>にあるように、様々なものが選べる。</p>\n<p>今回は<a href=\"https://github.com/aircloud/hexo-theme-aircloud\">air-cloud</a>を導入した。</p>\n<pre><code class=\"hljs language-shell\">$ git clone https://github.com/aircloud/hexo-theme-aircloud.git theme/air-cloud\n</code></pre>\n<p>テーマ特有の設定は、<a href=\"https://github.com/aircloud/hexo-aircloud-blog\">Demo</a>の<a href=\"https://github.com/aircloud/hexo-aircloud-blog/blob/master/_config.yml\"><code>_config.yml</code></a>が参考になる。</p>\n<h3>特別なページの設置</h3>\n<h4>自己紹介ページの追加</h4>\n<pre><code class=\"hljs language-shell\">$ npx hexo new page about\n</code></pre>\n<p><code>source/about/index.md</code>を次の内容に編集する。</p>\n<pre><code class=\"hljs language-md\">---\nlayout: about\ntitle: About Me\ndate: \"2020-03-16 11:22:00\"\n---\n\n## About Me\n\nyammerjpの雑多なメモ。\n\n- twitter: [@yammerjp](https://twitter.com/yammerjp)\n- GitHub: [@yammerjp](https://github.com/yammerjp) \n- [blog](https://blog.yammer.fun)\n\n</code></pre>\n<h4>タグページの追加</h4>\n<p>次のコマンドで、tagページを作る</p>\n<pre><code class=\"hljs language-shell\">$ npx hexo new page \"tags\"\n</code></pre>\n<p><code>source/tags/index.md</code>を次のように書き換える</p>\n<pre><code class=\"hljs language-md\">---\ntitle: All tags\ntype: \"tags\"\n--- \n</code></pre>\n<h4>検索機能の追加</h4>\n<pre><code class=\"hljs language-shell\">$ npm i hexo-generator-search --save\n</code></pre>\n<p><code>_config.yml</code>に次の内容を記載する</p>\n<pre><code class=\"hljs language-yaml\"># _config.yml\nsearch:\n  path: search.json\n  field: post\n</code></pre>","_history":[{"date":"2023-03-06T00:18:42+09:00","message":"Fix: syntax highlighting\n","hash":"19a9cedb178d8ecc24c51ab06121a9e7d5026240"},{"date":"2021-05-11T01:29:01+09:00","message":"Update: ドメインをmemo.basd4g.net -> memo.yammer.jp に変更\n","hash":"ae9f8434d6a5080d5cbadf9002485d663bda2d54"},{"date":"2021-05-08T19:42:24+09:00","message":"Fix: タグ名を整理 (大文字小文字の統一など)\n","hash":"0cddc9de95d06d985b70762310c42e37abefb887"},{"date":"2021-05-04T13:21:45+09:00","message":"Fix markdown directory\n","hash":"24ebe74a7fc3098f4815f0a10e55b197a5db5a47"},{"date":"2021-04-29T23:55:33+09:00","message":"Add Next.js\n","hash":"149ce385dda4d7d43d96ae94674e4ea9ee213ef2"},{"date":"2021-04-29T23:17:22+09:00","message":"YAML Front Matterのフォーマットを修正し\"\"で囲むよう統一\n","hash":"4c61f209b2c8da2f7d0b887f455bfae372d64738"},{"date":"2020-10-04T19:11:00+09:00","message":"Add tags\n","hash":"a7726e1d33de7ff9097e10d44ac2cfb1f80ef11e"},{"date":"2020-04-14T01:33:14+09:00","message":"Update date format\n","hash":"c35706e842136ecdcc6f56c2b3bf00884581570f"},{"date":"2020-04-14T00:37:48+09:00","message":"Delete hexo\n","hash":"ceed4c0d0cd5265c6b0cd550d188fd59a9fa22ba"}],"date_published":"2020-03-16T09:09:00+09:00","tags":["hexo","JavaScript","ブログ"]}]}